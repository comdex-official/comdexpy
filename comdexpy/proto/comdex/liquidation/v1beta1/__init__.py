# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/liquidation/v1beta1/genesis.proto, comdex/liquidation/v1beta1/liquidations.proto, comdex/liquidation/v1beta1/locked_vault.proto, comdex/liquidation/v1beta1/params.proto, comdex/liquidation/v1beta1/querier.proto, comdex/liquidation/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgLiquidateVaultRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    vault_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgLiquidateVaultResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgLiquidateBorrowRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    borrow_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class MsgLiquidateBorrowResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LiquidationOffsetHolder(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    current_offset: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    liquidation_batch_size: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class LockedVault(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    app_id: int = betterproto.uint64_field(2)
    original_vault_id: int = betterproto.uint64_field(3)
    extended_pair_vault_id: int = betterproto.uint64_field(4)
    owner: str = betterproto.string_field(5)
    amount_in: str = betterproto.string_field(6)
    amount_out: str = betterproto.string_field(7)
    updated_amount_out: str = betterproto.string_field(8)
    """
    updated_amount_out = amount_out + interest_accumulated +
    opening_fee_accumulated + closing_fee_accumulated
    """

    initiator: str = betterproto.string_field(9)
    is_auction_complete: bool = betterproto.bool_field(10)
    is_auction_in_progress: bool = betterproto.bool_field(11)
    cr_at_liquidation: str = betterproto.string_field(12)
    current_collateralisation_ratio: str = betterproto.string_field(13)
    collateral_to_be_auctioned: str = betterproto.string_field(14)
    liquidation_timestamp: datetime = betterproto.message_field(15)
    selloff_history: List[str] = betterproto.string_field(16)
    interest_accumulated: str = betterproto.string_field(17)
    borrow_meta_data: "BorrowMetaData" = betterproto.message_field(18, group="kind")


@dataclass(eq=False, repr=False)
class BorrowMetaData(betterproto.Message):
    lending_id: int = betterproto.uint64_field(1)
    is_stable_borrow: bool = betterproto.bool_field(2)
    stable_borrow_rate: str = betterproto.string_field(3)
    bridged_asset_amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(
        4
    )


@dataclass(eq=False, repr=False)
class QueryLockedVaultRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryLockedVaultResponse(betterproto.Message):
    locked_vault: "LockedVault" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLockedVaultsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryLockedVaultsResponse(betterproto.Message):
    locked_vaults: List["LockedVault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLiquidationParamsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryLiquidationParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLockedVaultsHistoryRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryLockedVaultsHistoryResponse(betterproto.Message):
    locked_vaults_history: List["LockedVault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryUserLockedVaultsRequest(betterproto.Message):
    user_address: str = betterproto.string_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryUserLockedVaultsResponse(betterproto.Message):
    user_locked_vaults: List["LockedVault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryUserLockedVaultsHistoryRequest(betterproto.Message):
    user_address: str = betterproto.string_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryUserLockedVaultsHistoryResponse(betterproto.Message):
    user_locked_vaults_history: List["LockedVault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockedVaultsPairRequest(betterproto.Message):
    pair_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockedVaultsPairResponse(betterproto.Message):
    locked_vaults_pair: List["LockedVault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAppIdsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryAppIdsResponse(betterproto.Message):
    whitelisted_app_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    locked_vault: List["LockedVault"] = betterproto.message_field(1)
    whitelisted_apps: List[int] = betterproto.uint64_field(2)
    params: "Params" = betterproto.message_field(4)


class MsgStub(betterproto.ServiceStub):
    async def msg_liquidate_vault(
        self,
        msg_liquidate_vault_request: "MsgLiquidateVaultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgLiquidateVaultResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Msg/MsgLiquidateVault",
            msg_liquidate_vault_request,
            MsgLiquidateVaultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_liquidate_borrow(
        self,
        msg_liquidate_borrow_request: "MsgLiquidateBorrowRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgLiquidateBorrowResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Msg/MsgLiquidateBorrow",
            msg_liquidate_borrow_request,
            MsgLiquidateBorrowResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def query_locked_vault(
        self,
        query_locked_vault_request: "QueryLockedVaultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockedVaultResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Query/QueryLockedVault",
            query_locked_vault_request,
            QueryLockedVaultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locked_vaults(
        self,
        query_locked_vaults_request: "QueryLockedVaultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockedVaultsResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Query/QueryLockedVaults",
            query_locked_vaults_request,
            QueryLockedVaultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_liquidation_params(
        self,
        query_liquidation_params_request:"QueryLiquidationParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLiquidationParamsResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Query/QueryParams",
            query_liquidation_params_request,
            QueryLiquidationParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locked_vaults_history(
        self,
        query_locked_vaults_history_request: "QueryLockedVaultsHistoryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockedVaultsHistoryResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Query/QueryLockedVaultsHistory",
            query_locked_vaults_history_request,
            QueryLockedVaultsHistoryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_user_locked_vaults(
        self,
        query_user_locked_vaults_request: "QueryUserLockedVaultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryUserLockedVaultsResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Query/QueryUserLockedVaults",
            query_user_locked_vaults_request,
            QueryUserLockedVaultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_user_locked_vaults_history(
        self,
        query_user_locked_vaults_history_request: "QueryUserLockedVaultsHistoryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryUserLockedVaultsHistoryResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Query/QueryUserLockedVaultsHistory",
            query_user_locked_vaults_history_request,
            QueryUserLockedVaultsHistoryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locked_vaults_pair(
        self,
        query_locked_vaults_pair_request: "QueryLockedVaultsPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockedVaultsPairResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Query/QueryLockedVaultsPair",
            query_locked_vaults_pair_request,
            QueryLockedVaultsPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_app_ids(
        self,
        query_app_ids_request: "QueryAppIdsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAppIdsResponse":
        return await self._unary_unary(
            "/comdex.liquidation.v1beta1.Query/QueryAppIds",
            query_app_ids_request,
            QueryAppIdsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def msg_liquidate_vault(
        self, msg_liquidate_vault_request: "MsgLiquidateVaultRequest"
    ) -> "MsgLiquidateVaultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_liquidate_borrow(
        self, msg_liquidate_borrow_request: "MsgLiquidateBorrowRequest"
    ) -> "MsgLiquidateBorrowResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_msg_liquidate_vault(
        self,
        stream: "grpclib.server.Stream[MsgLiquidateVaultRequest, MsgLiquidateVaultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_liquidate_vault(request)
        await stream.send_message(response)

    async def __rpc_msg_liquidate_borrow(
        self,
        stream: "grpclib.server.Stream[MsgLiquidateBorrowRequest, MsgLiquidateBorrowResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_liquidate_borrow(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.liquidation.v1beta1.Msg/MsgLiquidateVault": grpclib.const.Handler(
                self.__rpc_msg_liquidate_vault,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgLiquidateVaultRequest,
                MsgLiquidateVaultResponse,
            ),
            "/comdex.liquidation.v1beta1.Msg/MsgLiquidateBorrow": grpclib.const.Handler(
                self.__rpc_msg_liquidate_borrow,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgLiquidateBorrowRequest,
                MsgLiquidateBorrowResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def query_locked_vault(
        self, query_locked_vault_request: "QueryLockedVaultRequest"
    ) -> "QueryLockedVaultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locked_vaults(
        self, query_locked_vaults_request: "QueryLockedVaultsRequest"
    ) -> "QueryLockedVaultsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_liquidation_params(
        self, query_liquidation_params_request: "QueryLiquidationParamsRequest"
    ) -> "QueryLiquidationParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locked_vaults_history(
        self, query_locked_vaults_history_request: "QueryLockedVaultsHistoryRequest"
    ) -> "QueryLockedVaultsHistoryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_user_locked_vaults(
        self, query_user_locked_vaults_request: "QueryUserLockedVaultsRequest"
    ) -> "QueryUserLockedVaultsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_user_locked_vaults_history(
        self,
        query_user_locked_vaults_history_request: "QueryUserLockedVaultsHistoryRequest",
    ) -> "QueryUserLockedVaultsHistoryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locked_vaults_pair(
        self, query_locked_vaults_pair_request: "QueryLockedVaultsPairRequest"
    ) -> "QueryLockedVaultsPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_app_ids(
        self, query_app_ids_request: "QueryAppIdsRequest"
    ) -> "QueryAppIdsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_locked_vault(
        self,
        stream: "grpclib.server.Stream[QueryLockedVaultRequest, QueryLockedVaultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locked_vault(request)
        await stream.send_message(response)

    async def __rpc_query_locked_vaults(
        self,
        stream: "grpclib.server.Stream[QueryLockedVaultsRequest, QueryLockedVaultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locked_vaults(request)
        await stream.send_message(response)

    async def __rpc_query_liquidation_params(
        self,
        stream: "grpclib.server.Stream[QueryLiquidationParamsRequest, QueryLiquidationParamsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_liquidation_params(request)
        await stream.send_message(response)

    async def __rpc_query_locked_vaults_history(
        self,
        stream: "grpclib.server.Stream[QueryLockedVaultsHistoryRequest, QueryLockedVaultsHistoryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locked_vaults_history(request)
        await stream.send_message(response)

    async def __rpc_query_user_locked_vaults(
        self,
        stream: "grpclib.server.Stream[QueryUserLockedVaultsRequest, QueryUserLockedVaultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_user_locked_vaults(request)
        await stream.send_message(response)

    async def __rpc_query_user_locked_vaults_history(
        self,
        stream: "grpclib.server.Stream[QueryUserLockedVaultsHistoryRequest, QueryUserLockedVaultsHistoryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_user_locked_vaults_history(request)
        await stream.send_message(response)

    async def __rpc_query_locked_vaults_pair(
        self,
        stream: "grpclib.server.Stream[QueryLockedVaultsPairRequest, QueryLockedVaultsPairResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locked_vaults_pair(request)
        await stream.send_message(response)

    async def __rpc_query_app_ids(
        self, stream: "grpclib.server.Stream[QueryAppIdsRequest, QueryAppIdsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_app_ids(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.liquidation.v1beta1.Query/QueryLockedVault": grpclib.const.Handler(
                self.__rpc_query_locked_vault,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockedVaultRequest,
                QueryLockedVaultResponse,
            ),
            "/comdex.liquidation.v1beta1.Query/QueryLockedVaults": grpclib.const.Handler(
                self.__rpc_query_locked_vaults,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockedVaultsRequest,
                QueryLockedVaultsResponse,
            ),
            "/comdex.liquidation.v1beta1.Query/QueryLiquidationParams": grpclib.const.Handler(
                self.__rpc_query_liquidation_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLiquidationParamsRequest,
                QueryLiquidationParamsResponse,
            ),
            "/comdex.liquidation.v1beta1.Query/QueryLockedVaultsHistory": grpclib.const.Handler(
                self.__rpc_query_locked_vaults_history,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockedVaultsHistoryRequest,
                QueryLockedVaultsHistoryResponse,
            ),
            "/comdex.liquidation.v1beta1.Query/QueryUserLockedVaults": grpclib.const.Handler(
                self.__rpc_query_user_locked_vaults,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryUserLockedVaultsRequest,
                QueryUserLockedVaultsResponse,
            ),
            "/comdex.liquidation.v1beta1.Query/QueryUserLockedVaultsHistory": grpclib.const.Handler(
                self.__rpc_query_user_locked_vaults_history,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryUserLockedVaultsHistoryRequest,
                QueryUserLockedVaultsHistoryResponse,
            ),
            "/comdex.liquidation.v1beta1.Query/QueryLockedVaultsPair": grpclib.const.Handler(
                self.__rpc_query_locked_vaults_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockedVaultsPairRequest,
                QueryLockedVaultsPairResponse,
            ),
            "/comdex.liquidation.v1beta1.Query/QueryAppIds": grpclib.const.Handler(
                self.__rpc_query_app_ids,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAppIdsRequest,
                QueryAppIdsResponse,
            ),
        }
