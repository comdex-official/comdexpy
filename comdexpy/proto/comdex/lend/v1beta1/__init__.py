# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/lend/v1beta1/genesis.proto, comdex/lend/v1beta1/gov.proto, comdex/lend/v1beta1/lend.proto, comdex/lend/v1beta1/params.proto, comdex/lend/v1beta1/query.proto, comdex/lend/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime

from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgLend(betterproto.Message):
    lender: str = betterproto.string_field(1)
    asset_id: int = betterproto.uint64_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    pool_id: int = betterproto.uint64_field(4)
    app_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class MsgWithdraw(betterproto.Message):
    lender: str = betterproto.string_field(1)
    lend_id: int = betterproto.uint64_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgDeposit(betterproto.Message):
    lender: str = betterproto.string_field(1)
    lend_id: int = betterproto.uint64_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgCloseLend(betterproto.Message):
    lender: str = betterproto.string_field(1)
    lend_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class MsgBorrow(betterproto.Message):
    borrower: str = betterproto.string_field(1)
    lend_id: int = betterproto.uint64_field(2)
    pair_id: int = betterproto.uint64_field(3)
    is_stable_borrow: bool = betterproto.bool_field(4)
    amount_in: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(5)
    amount_out: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class MsgRepay(betterproto.Message):
    borrower: str = betterproto.string_field(1)
    borrow_id: int = betterproto.uint64_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgDepositBorrow(betterproto.Message):
    borrower: str = betterproto.string_field(1)
    borrow_id: int = betterproto.uint64_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgDraw(betterproto.Message):
    borrower: str = betterproto.string_field(1)
    borrow_id: int = betterproto.uint64_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgCloseBorrow(betterproto.Message):
    borrower: str = betterproto.string_field(1)
    borrow_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class MsgBorrowAlternate(betterproto.Message):
    lender: str = betterproto.string_field(1)
    asset_id: int = betterproto.uint64_field(2)
    pool_id: int = betterproto.uint64_field(3)
    amount_in: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    pair_id: int = betterproto.uint64_field(5)
    is_stable_borrow: bool = betterproto.bool_field(6)
    amount_out: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(7)
    app_id: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class MsgFundModuleAccounts(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    lender: str = betterproto.string_field(3)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MsgCalculateInterestAndRewards(betterproto.Message):
    borrower: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MsgFundReserveAccounts(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    lender: str = betterproto.string_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgLendResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgWithdrawResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDepositResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCloseLendResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgBorrowResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRepayResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDepositBorrowResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDrawResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCloseBorrowResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgBorrowAlternateResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgFundModuleAccountsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCalculateInterestAndRewardsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgFundReserveAccountsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LendAsset(betterproto.Message):
    lending_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    pool_id: int = betterproto.uint64_field(3)
    owner: str = betterproto.string_field(4)
    amount_in: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(5)
    lending_time: datetime = betterproto.message_field(6)
    available_to_borrow: str = betterproto.string_field(7)
    app_id: int = betterproto.uint64_field(8)
    global_index: str = betterproto.string_field(9)
    last_interaction_time: datetime = betterproto.message_field(10)
    cpool_name: str = betterproto.string_field(11)
    total_rewards: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class BorrowAsset(betterproto.Message):
    borrowing_id: int = betterproto.uint64_field(1)
    lending_id: int = betterproto.uint64_field(2)
    is_stable_borrow: bool = betterproto.bool_field(3)
    pair_id: int = betterproto.uint64_field(4)
    amount_in: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(5)
    amount_out: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(6)
    bridged_asset_amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(
        7
    )
    borrowing_time: datetime = betterproto.message_field(8)
    stable_borrow_rate: str = betterproto.string_field(9)
    interest_accumulated: str = betterproto.string_field(10)
    global_index: str = betterproto.string_field(11)
    reserve_global_index: str = betterproto.string_field(12)
    last_interaction_time: datetime = betterproto.message_field(13)
    cpool_name: str = betterproto.string_field(14)
    is_liquidated: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class Pool(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    module_name: str = betterproto.string_field(2)
    cpool_name: str = betterproto.string_field(3)
    asset_data: List["AssetDataPoolMapping"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class UserAssetLendBorrowMapping(betterproto.Message):
    owner: str = betterproto.string_field(1)
    lend_id: int = betterproto.uint64_field(2)
    """to check if poool id is needed"""

    pool_id: int = betterproto.uint64_field(3)
    borrow_id: List[int] = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class AssetDataPoolMapping(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    asset_transit_type: int = betterproto.uint64_field(2)
    """1 for main_asset, 2 for 1st transit_asset, 3 for 2nd transit_asset"""

    supply_cap: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ExtendedPair(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    asset_in: int = betterproto.uint64_field(2)
    asset_out: int = betterproto.uint64_field(3)
    is_inter_pool: bool = betterproto.bool_field(4)
    asset_out_pool_id: int = betterproto.uint64_field(5)
    min_usd_value_left: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class AssetToPairMapping(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    pair_id: List[int] = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class PoolAssetLbMapping(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    lend_ids: List[int] = betterproto.uint64_field(3)
    borrow_ids: List[int] = betterproto.uint64_field(4)
    total_borrowed: str = betterproto.string_field(5)
    total_stable_borrowed: str = betterproto.string_field(6)
    total_lend: str = betterproto.string_field(7)
    total_interest_accumulated: str = betterproto.string_field(8)
    lend_apr: str = betterproto.string_field(9)
    borrow_apr: str = betterproto.string_field(10)
    stable_borrow_apr: str = betterproto.string_field(11)
    utilisation_ratio: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class AssetRatesParams(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    u_optimal: str = betterproto.string_field(2)
    base: str = betterproto.string_field(3)
    slope1: str = betterproto.string_field(4)
    slope2: str = betterproto.string_field(5)
    enable_stable_borrow: bool = betterproto.bool_field(6)
    stable_base: str = betterproto.string_field(7)
    stable_slope1: str = betterproto.string_field(8)
    stable_slope2: str = betterproto.string_field(9)
    ltv: str = betterproto.string_field(10)
    liquidation_threshold: str = betterproto.string_field(11)
    liquidation_penalty: str = betterproto.string_field(12)
    liquidation_bonus: str = betterproto.string_field(13)
    reserve_factor: str = betterproto.string_field(14)
    c_asset_id: int = betterproto.uint64_field(15)


@dataclass(eq=False, repr=False)
class ReserveBuybackAssetData(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    reserve_amount: str = betterproto.string_field(2)
    buyback_amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AuctionParams(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    auction_duration_seconds: int = betterproto.uint64_field(2)
    buffer: str = betterproto.string_field(3)
    cusp: str = betterproto.string_field(4)
    step: str = betterproto.string_field(5)
    price_function_type: int = betterproto.uint64_field(6)
    dutch_id: int = betterproto.uint64_field(7)
    bid_duration_seconds: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class BorrowInterestTracker(betterproto.Message):
    borrowing_id: int = betterproto.uint64_field(1)
    reserve_pool_interest: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LendRewardsTracker(betterproto.Message):
    lending_id: int = betterproto.uint64_field(1)
    rewards_accumulated: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ModuleBalance(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    module_balance_stats: List["ModuleBalanceStats"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ModuleBalanceStats(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    balance: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ModBal(betterproto.Message):
    fund_module_balance: List["FundModBal"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReserveBal(betterproto.Message):
    fund_reserve_balance: List["FundReserveBal"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FundModBal(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)
    amount_in: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    deposit_time: datetime = betterproto.message_field(4)
    funder: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class FundReserveBal(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    amount_in: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)
    deposit_time: datetime = betterproto.message_field(3)
    funder: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class AllReserveStats(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    amount_out_from_reserve_to_lenders: str = betterproto.string_field(2)
    amount_out_from_reserve_for_auction: str = betterproto.string_field(3)
    amount_in_from_liq_penalty: str = betterproto.string_field(4)
    amount_in_from_repayments: str = betterproto.string_field(5)
    total_amount_out_to_lenders: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class AssetToPairSingleMapping(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    pair_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class PoolPairs(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    module_name: str = betterproto.string_field(2)
    cpool_name: str = betterproto.string_field(3)
    asset_data: List["AssetDataPoolMapping"] = betterproto.message_field(4)
    min_usd_value_left: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class PoolInterestData(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    lend_interest: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PoolInterest(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    pool_interest_data: List["PoolInterestData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PoolInterestDataB(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    borrow_interest: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PoolInterestB(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    pool_interest_data: List["PoolInterestDataB"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AssetRatesPoolPairs(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    u_optimal: str = betterproto.string_field(2)
    base: str = betterproto.string_field(3)
    slope1: str = betterproto.string_field(4)
    slope2: str = betterproto.string_field(5)
    enable_stable_borrow: bool = betterproto.bool_field(6)
    stable_base: str = betterproto.string_field(7)
    stable_slope1: str = betterproto.string_field(8)
    stable_slope2: str = betterproto.string_field(9)
    ltv: str = betterproto.string_field(10)
    liquidation_threshold: str = betterproto.string_field(11)
    liquidation_penalty: str = betterproto.string_field(12)
    liquidation_bonus: str = betterproto.string_field(13)
    reserve_factor: str = betterproto.string_field(14)
    c_asset_id: int = betterproto.uint64_field(15)
    module_name: str = betterproto.string_field(16)
    cpool_name: str = betterproto.string_field(17)
    asset_data: List["AssetDataPoolMapping"] = betterproto.message_field(18)
    min_usd_value_left: int = betterproto.uint64_field(19)


@dataclass(eq=False, repr=False)
class LendPairsProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    pairs: "ExtendedPair" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MultipleLendPairsProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    pairs: List["ExtendedPair"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddPoolsProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    pool: "Pool" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddAssetToPairProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    asset_to_pair_mapping: "AssetToPairMapping" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddMultipleAssetToPairProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    asset_to_pair_single_mapping: List[
        "AssetToPairSingleMapping"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddAssetRatesParams(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    asset_rates_params: "AssetRatesParams" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddAuctionParamsProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    auction_params: "AuctionParams" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddPoolPairsProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    pool_pairs: "PoolPairs" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddAssetRatesPoolPairsProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    asset_rates_pool_pairs: "AssetRatesPoolPairs" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryLendsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryLendsResponse(betterproto.Message):
    lends: List["LendAsset"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLendRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryLendResponse(betterproto.Message):
    lend: "LendAsset" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllLendByOwnerRequest(betterproto.Message):
    owner: str = betterproto.string_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllLendByOwnerResponse(betterproto.Message):
    lends: List["LendAsset"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllLendByOwnerAndPoolRequest(betterproto.Message):
    owner: str = betterproto.string_field(1)
    pool_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryAllLendByOwnerAndPoolResponse(betterproto.Message):
    lends: List["LendAsset"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryPairsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryPairsResponse(betterproto.Message):
    extended_pairs: List["ExtendedPair"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryPairRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryPairResponse(betterproto.Message):
    extended_pair: "ExtendedPair" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAssetRatesParamsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAssetRatesParamsResponse(betterproto.Message):
    asset_rates_params: List["AssetRatesParams"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAssetRatesParamRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryAssetRatesParamResponse(betterproto.Message):
    asset_ratesparams: "AssetRatesParams" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryPoolsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryPoolsResponse(betterproto.Message):
    pools: List["Pool"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryPoolRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryPoolResponse(betterproto.Message):
    pool: "Pool" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAssetToPairMappingsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAssetToPairMappingsResponse(betterproto.Message):
    asset_to_pair_mappings: List["AssetToPairMapping"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAssetToPairMappingRequest(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryAssetToPairMappingResponse(betterproto.Message):
    asset_to_pair_mapping: "AssetToPairMapping" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryBorrowsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryBorrowsResponse(betterproto.Message):
    borrows: List["BorrowAsset"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryBorrowRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryBorrowResponse(betterproto.Message):
    borrow: "BorrowAsset" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllBorrowByOwnerRequest(betterproto.Message):
    owner: str = betterproto.string_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllBorrowByOwnerResponse(betterproto.Message):
    borrows: List["BorrowAsset"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllBorrowByOwnerAndPoolRequest(betterproto.Message):
    owner: str = betterproto.string_field(1)
    pool_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryAllBorrowByOwnerAndPoolResponse(betterproto.Message):
    borrows: List["BorrowAsset"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryPoolAssetLbMappingRequest(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryPoolAssetLbMappingResponse(betterproto.Message):
    pool_asset_lb_mapping: "PoolAssetLbMapping" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryReserveBuybackAssetDataRequest(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryReserveBuybackAssetDataResponse(betterproto.Message):
    reserve_buyback_asset_data: "ReserveBuybackAssetData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAuctionParamRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryAuctionParamResponse(betterproto.Message):
    auction_params: "AuctionParams" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryModuleBalanceRequest(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryModuleBalanceResponse(betterproto.Message):
    module_balance: "ModuleBalance" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryFundModBalRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryFundModBalResponse(betterproto.Message):
    fund_mod_balance: "ModBal" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryFundReserveBalRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryFundReserveBalResponse(betterproto.Message):
    fund_reserve_balance: "ReserveBal" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllReserveStatsRequest(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryAllReserveStatsResponse(betterproto.Message):
    all_reserve_stats: "AllReserveStats" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryFundModBalByAssetPoolRequest(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryFundModBalByAssetPoolResponse(betterproto.Message):
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLendInterestRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryLendInterestResponse(betterproto.Message):
    pool_interest: List["PoolInterest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryBorrowInterestRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryBorrowInterestResponse(betterproto.Message):
    pool_interest: List["PoolInterestB"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    borrow_asset: List["BorrowAsset"] = betterproto.message_field(1)
    borrow_interest_tracker: List["BorrowInterestTracker"] = betterproto.message_field(
        2
    )
    lend_asset: List["LendAsset"] = betterproto.message_field(3)
    pool: List["Pool"] = betterproto.message_field(4)
    asset_to_pair_mapping: List["AssetToPairMapping"] = betterproto.message_field(5)
    pool_asset_lb_mapping: List["PoolAssetLbMapping"] = betterproto.message_field(6)
    lend_rewards_tracker: List["LendRewardsTracker"] = betterproto.message_field(7)
    user_asset_lend_borrow_mapping: List[
        "UserAssetLendBorrowMapping"
    ] = betterproto.message_field(8)
    reserve_buyback_asset_data: List[
        "ReserveBuybackAssetData"
    ] = betterproto.message_field(9)
    extended_pair: List["ExtendedPair"] = betterproto.message_field(10)
    auction_params: List["AuctionParams"] = betterproto.message_field(11)
    asset_rates_params: List["AssetRatesParams"] = betterproto.message_field(12)
    mod_bal: "ModBal" = betterproto.message_field(13)
    reserve_bal: "ReserveBal" = betterproto.message_field(14)
    all_reserve_stats: List["AllReserveStats"] = betterproto.message_field(15)


class MsgStub(betterproto.ServiceStub):
    async def lend(
        self,
        msg_lend: "MsgLend",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgLendResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/Lend",
            msg_lend,
            MsgLendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw(
        self,
        msg_withdraw: "MsgWithdraw",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgWithdrawResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/Withdraw",
            msg_withdraw,
            MsgWithdrawResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit(
        self,
        msg_deposit: "MsgDeposit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/Deposit",
            msg_deposit,
            MsgDepositResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def close_lend(
        self,
        msg_close_lend: "MsgCloseLend",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCloseLendResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/CloseLend",
            msg_close_lend,
            MsgCloseLendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def borrow(
        self,
        msg_borrow: "MsgBorrow",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgBorrowResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/Borrow",
            msg_borrow,
            MsgBorrowResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def repay(
        self,
        msg_repay: "MsgRepay",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRepayResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/Repay",
            msg_repay,
            MsgRepayResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit_borrow(
        self,
        msg_deposit_borrow: "MsgDepositBorrow",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositBorrowResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/DepositBorrow",
            msg_deposit_borrow,
            MsgDepositBorrowResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def draw(
        self,
        msg_draw: "MsgDraw",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDrawResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/Draw",
            msg_draw,
            MsgDrawResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def close_borrow(
        self,
        msg_close_borrow: "MsgCloseBorrow",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCloseBorrowResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/CloseBorrow",
            msg_close_borrow,
            MsgCloseBorrowResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def borrow_alternate(
        self,
        msg_borrow_alternate: "MsgBorrowAlternate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgBorrowAlternateResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/BorrowAlternate",
            msg_borrow_alternate,
            MsgBorrowAlternateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_module_accounts(
        self,
        msg_fund_module_accounts: "MsgFundModuleAccounts",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgFundModuleAccountsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/FundModuleAccounts",
            msg_fund_module_accounts,
            MsgFundModuleAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def calculate_interest_and_rewards(
        self,
        msg_calculate_interest_and_rewards: "MsgCalculateInterestAndRewards",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCalculateInterestAndRewardsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/CalculateInterestAndRewards",
            msg_calculate_interest_and_rewards,
            MsgCalculateInterestAndRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_reserve_accounts(
        self,
        msg_fund_reserve_accounts: "MsgFundReserveAccounts",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgFundReserveAccountsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Msg/FundReserveAccounts",
            msg_fund_reserve_accounts,
            MsgFundReserveAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def query_lends(
        self,
        query_lends_request: "QueryLendsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLendsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryLends",
            query_lends_request,
            QueryLendsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_lend(
        self,
        query_lend_request: "QueryLendRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLendResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryLend",
            query_lend_request,
            QueryLendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_lend_by_owner(
        self,
        query_all_lend_by_owner_request: "QueryAllLendByOwnerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllLendByOwnerResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAllLendByOwner",
            query_all_lend_by_owner_request,
            QueryAllLendByOwnerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_lend_by_owner_and_pool(
        self,
        query_all_lend_by_owner_and_pool_request: "QueryAllLendByOwnerAndPoolRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllLendByOwnerAndPoolResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAllLendByOwnerAndPool",
            query_all_lend_by_owner_and_pool_request,
            QueryAllLendByOwnerAndPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_pairs(
        self,
        query_pairs_request: "QueryPairsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPairsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryPairs",
            query_pairs_request,
            QueryPairsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_pair(
        self,
        query_pair_request: "QueryPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPairResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryPair",
            query_pair_request,
            QueryPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_asset_rates_params(
        self,
        query_asset_rates_params_request: "QueryAssetRatesParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAssetRatesParamsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAssetRatesParams",
            query_asset_rates_params_request,
            QueryAssetRatesParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_asset_rates_param(
        self,
        query_asset_rates_param_request: "QueryAssetRatesParamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAssetRatesParamResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAssetRatesParam",
            query_asset_rates_param_request,
            QueryAssetRatesParamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_pools(
        self,
        query_pools_request: "QueryPoolsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPoolsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryPools",
            query_pools_request,
            QueryPoolsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_pool(
        self,
        query_pool_request: "QueryPoolRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPoolResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryPool",
            query_pool_request,
            QueryPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_asset_to_pair_mappings(
        self,
        query_asset_to_pair_mappings_request: "QueryAssetToPairMappingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAssetToPairMappingsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAssetToPairMappings",
            query_asset_to_pair_mappings_request,
            QueryAssetToPairMappingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_asset_to_pair_mapping(
        self,
        query_asset_to_pair_mapping_request: "QueryAssetToPairMappingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAssetToPairMappingResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAssetToPairMapping",
            query_asset_to_pair_mapping_request,
            QueryAssetToPairMappingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_borrows(
        self,
        query_borrows_request: "QueryBorrowsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryBorrowsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryBorrows",
            query_borrows_request,
            QueryBorrowsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_borrow(
        self,
        query_borrow_request: "QueryBorrowRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryBorrowResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryBorrow",
            query_borrow_request,
            QueryBorrowResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_borrow_by_owner(
        self,
        query_all_borrow_by_owner_request: "QueryAllBorrowByOwnerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllBorrowByOwnerResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAllBorrowByOwner",
            query_all_borrow_by_owner_request,
            QueryAllBorrowByOwnerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_borrow_by_owner_and_pool(
        self,
        query_all_borrow_by_owner_and_pool_request: "QueryAllBorrowByOwnerAndPoolRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllBorrowByOwnerAndPoolResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAllBorrowByOwnerAndPool",
            query_all_borrow_by_owner_and_pool_request,
            QueryAllBorrowByOwnerAndPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_pool_asset_lb_mapping(
        self,
        query_pool_asset_lb_mapping_request:"QueryPoolAssetLbMappingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPoolAssetLbMappingResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryPoolAssetLBMapping",
            query_pool_asset_lb_mapping_request,
            QueryPoolAssetLbMappingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_reserve_buyback_asset_data(
        self,
        query_reserve_buyback_asset_data_request: "QueryReserveBuybackAssetDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryReserveBuybackAssetDataResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryReserveBuybackAssetData",
            query_reserve_buyback_asset_data_request,
            QueryReserveBuybackAssetDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_auction_params(
        self,
        query_auction_param_request: "QueryAuctionParamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAuctionParamResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAuctionParams",
            query_auction_param_request,
            QueryAuctionParamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_module_balance(
        self,
        query_module_balance_request: "QueryModuleBalanceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryModuleBalanceResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryModuleBalance",
            query_module_balance_request,
            QueryModuleBalanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_fund_mod_bal(
        self,
        query_fund_mod_bal_request: "QueryFundModBalRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFundModBalResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryFundModBal",
            query_fund_mod_bal_request,
            QueryFundModBalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_fund_reserve_bal(
        self,
        query_fund_reserve_bal_request: "QueryFundReserveBalRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFundReserveBalResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryFundReserveBal",
            query_fund_reserve_bal_request,
            QueryFundReserveBalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_reserve_stats(
        self,
        query_all_reserve_stats_request: "QueryAllReserveStatsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllReserveStatsResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryAllReserveStats",
            query_all_reserve_stats_request,
            QueryAllReserveStatsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_fund_mod_bal_by_asset_pool(
        self,
        query_fund_mod_bal_by_asset_pool_request: "QueryFundModBalByAssetPoolRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFundModBalByAssetPoolResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryFundModBalByAssetPool",
            query_fund_mod_bal_by_asset_pool_request,
            QueryFundModBalByAssetPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_lend_interest(
        self,
        query_lend_interest_request: "QueryLendInterestRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLendInterestResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryLendInterest",
            query_lend_interest_request,
            QueryLendInterestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_borrow_interest(
        self,
        query_borrow_interest_request: "QueryBorrowInterestRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryBorrowInterestResponse":
        return await self._unary_unary(
            "/comdex.lend.v1beta1.Query/QueryBorrowInterest",
            query_borrow_interest_request,
            QueryBorrowInterestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def lend(self, msg_lend: "MsgLend") -> "MsgLendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def withdraw(self, msg_withdraw: "MsgWithdraw") -> "MsgWithdrawResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit(self, msg_deposit: "MsgDeposit") -> "MsgDepositResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def close_lend(
        self, msg_close_lend: "MsgCloseLend"
    ) -> "MsgCloseLendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def borrow(self, msg_borrow: "MsgBorrow") -> "MsgBorrowResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def repay(self, msg_repay: "MsgRepay") -> "MsgRepayResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit_borrow(
        self, msg_deposit_borrow: "MsgDepositBorrow"
    ) -> "MsgDepositBorrowResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def draw(self, msg_draw: "MsgDraw") -> "MsgDrawResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def close_borrow(
        self, msg_close_borrow: "MsgCloseBorrow"
    ) -> "MsgCloseBorrowResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def borrow_alternate(
        self, msg_borrow_alternate: "MsgBorrowAlternate"
    ) -> "MsgBorrowAlternateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fund_module_accounts(
        self, msg_fund_module_accounts: "MsgFundModuleAccounts"
    ) -> "MsgFundModuleAccountsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def calculate_interest_and_rewards(
        self, msg_calculate_interest_and_rewards: "MsgCalculateInterestAndRewards"
    ) -> "MsgCalculateInterestAndRewardsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fund_reserve_accounts(
        self, msg_fund_reserve_accounts: "MsgFundReserveAccounts"
    ) -> "MsgFundReserveAccountsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_lend(
        self, stream: "grpclib.server.Stream[MsgLend, MsgLendResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.lend(request)
        await stream.send_message(response)

    async def __rpc_withdraw(
        self, stream: "grpclib.server.Stream[MsgWithdraw, MsgWithdrawResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.withdraw(request)
        await stream.send_message(response)

    async def __rpc_deposit(
        self, stream: "grpclib.server.Stream[MsgDeposit, MsgDepositResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.deposit(request)
        await stream.send_message(response)

    async def __rpc_close_lend(
        self, stream: "grpclib.server.Stream[MsgCloseLend, MsgCloseLendResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.close_lend(request)
        await stream.send_message(response)

    async def __rpc_borrow(
        self, stream: "grpclib.server.Stream[MsgBorrow, MsgBorrowResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.borrow(request)
        await stream.send_message(response)

    async def __rpc_repay(
        self, stream: "grpclib.server.Stream[MsgRepay, MsgRepayResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.repay(request)
        await stream.send_message(response)

    async def __rpc_deposit_borrow(
        self,
        stream: "grpclib.server.Stream[MsgDepositBorrow, MsgDepositBorrowResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deposit_borrow(request)
        await stream.send_message(response)

    async def __rpc_draw(
        self, stream: "grpclib.server.Stream[MsgDraw, MsgDrawResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.draw(request)
        await stream.send_message(response)

    async def __rpc_close_borrow(
        self, stream: "grpclib.server.Stream[MsgCloseBorrow, MsgCloseBorrowResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.close_borrow(request)
        await stream.send_message(response)

    async def __rpc_borrow_alternate(
        self,
        stream: "grpclib.server.Stream[MsgBorrowAlternate, MsgBorrowAlternateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.borrow_alternate(request)
        await stream.send_message(response)

    async def __rpc_fund_module_accounts(
        self,
        stream: "grpclib.server.Stream[MsgFundModuleAccounts, MsgFundModuleAccountsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fund_module_accounts(request)
        await stream.send_message(response)

    async def __rpc_calculate_interest_and_rewards(
        self,
        stream: "grpclib.server.Stream[MsgCalculateInterestAndRewards, MsgCalculateInterestAndRewardsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.calculate_interest_and_rewards(request)
        await stream.send_message(response)

    async def __rpc_fund_reserve_accounts(
        self,
        stream: "grpclib.server.Stream[MsgFundReserveAccounts, MsgFundReserveAccountsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fund_reserve_accounts(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.lend.v1beta1.Msg/Lend": grpclib.const.Handler(
                self.__rpc_lend,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgLend,
                MsgLendResponse,
            ),
            "/comdex.lend.v1beta1.Msg/Withdraw": grpclib.const.Handler(
                self.__rpc_withdraw,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgWithdraw,
                MsgWithdrawResponse,
            ),
            "/comdex.lend.v1beta1.Msg/Deposit": grpclib.const.Handler(
                self.__rpc_deposit,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeposit,
                MsgDepositResponse,
            ),
            "/comdex.lend.v1beta1.Msg/CloseLend": grpclib.const.Handler(
                self.__rpc_close_lend,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCloseLend,
                MsgCloseLendResponse,
            ),
            "/comdex.lend.v1beta1.Msg/Borrow": grpclib.const.Handler(
                self.__rpc_borrow,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgBorrow,
                MsgBorrowResponse,
            ),
            "/comdex.lend.v1beta1.Msg/Repay": grpclib.const.Handler(
                self.__rpc_repay,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRepay,
                MsgRepayResponse,
            ),
            "/comdex.lend.v1beta1.Msg/DepositBorrow": grpclib.const.Handler(
                self.__rpc_deposit_borrow,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDepositBorrow,
                MsgDepositBorrowResponse,
            ),
            "/comdex.lend.v1beta1.Msg/Draw": grpclib.const.Handler(
                self.__rpc_draw,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDraw,
                MsgDrawResponse,
            ),
            "/comdex.lend.v1beta1.Msg/CloseBorrow": grpclib.const.Handler(
                self.__rpc_close_borrow,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCloseBorrow,
                MsgCloseBorrowResponse,
            ),
            "/comdex.lend.v1beta1.Msg/BorrowAlternate": grpclib.const.Handler(
                self.__rpc_borrow_alternate,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgBorrowAlternate,
                MsgBorrowAlternateResponse,
            ),
            "/comdex.lend.v1beta1.Msg/FundModuleAccounts": grpclib.const.Handler(
                self.__rpc_fund_module_accounts,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgFundModuleAccounts,
                MsgFundModuleAccountsResponse,
            ),
            "/comdex.lend.v1beta1.Msg/CalculateInterestAndRewards": grpclib.const.Handler(
                self.__rpc_calculate_interest_and_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCalculateInterestAndRewards,
                MsgCalculateInterestAndRewardsResponse,
            ),
            "/comdex.lend.v1beta1.Msg/FundReserveAccounts": grpclib.const.Handler(
                self.__rpc_fund_reserve_accounts,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgFundReserveAccounts,
                MsgFundReserveAccountsResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def query_lends(
        self, query_lends_request: "QueryLendsRequest"
    ) -> "QueryLendsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_lend(
        self, query_lend_request: "QueryLendRequest"
    ) -> "QueryLendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_lend_by_owner(
        self, query_all_lend_by_owner_request: "QueryAllLendByOwnerRequest"
    ) -> "QueryAllLendByOwnerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_lend_by_owner_and_pool(
        self,
        query_all_lend_by_owner_and_pool_request: "QueryAllLendByOwnerAndPoolRequest",
    ) -> "QueryAllLendByOwnerAndPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_pairs(
        self, query_pairs_request: "QueryPairsRequest"
    ) -> "QueryPairsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_pair(
        self, query_pair_request: "QueryPairRequest"
    ) -> "QueryPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_asset_rates_params(
        self, query_asset_rates_params_request: "QueryAssetRatesParamsRequest"
    ) -> "QueryAssetRatesParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_asset_rates_param(
        self, query_asset_rates_param_request: "QueryAssetRatesParamRequest"
    ) -> "QueryAssetRatesParamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_pools(
        self, query_pools_request: "QueryPoolsRequest"
    ) -> "QueryPoolsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_pool(
        self, query_pool_request: "QueryPoolRequest"
    ) -> "QueryPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_asset_to_pair_mappings(
        self, query_asset_to_pair_mappings_request: "QueryAssetToPairMappingsRequest"
    ) -> "QueryAssetToPairMappingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_asset_to_pair_mapping(
        self, query_asset_to_pair_mapping_request: "QueryAssetToPairMappingRequest"
    ) -> "QueryAssetToPairMappingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_borrows(
        self, query_borrows_request: "QueryBorrowsRequest"
    ) -> "QueryBorrowsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_borrow(
        self, query_borrow_request: "QueryBorrowRequest"
    ) -> "QueryBorrowResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_borrow_by_owner(
        self, query_all_borrow_by_owner_request: "QueryAllBorrowByOwnerRequest"
    ) -> "QueryAllBorrowByOwnerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_borrow_by_owner_and_pool(
        self,
        query_all_borrow_by_owner_and_pool_request: "QueryAllBorrowByOwnerAndPoolRequest",
    ) -> "QueryAllBorrowByOwnerAndPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_pool_asset_lb_mapping(self) -> "QueryPoolAssetLbMappingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_reserve_buyback_asset_data(
        self,
        query_reserve_buyback_asset_data_request: "QueryReserveBuybackAssetDataRequest",
    ) -> "QueryReserveBuybackAssetDataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_auction_params(
        self, query_auction_param_request: "QueryAuctionParamRequest"
    ) -> "QueryAuctionParamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_module_balance(
        self, query_module_balance_request: "QueryModuleBalanceRequest"
    ) -> "QueryModuleBalanceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_fund_mod_bal(
        self, query_fund_mod_bal_request: "QueryFundModBalRequest"
    ) -> "QueryFundModBalResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_fund_reserve_bal(
        self, query_fund_reserve_bal_request: "QueryFundReserveBalRequest"
    ) -> "QueryFundReserveBalResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_reserve_stats(
        self, query_all_reserve_stats_request: "QueryAllReserveStatsRequest"
    ) -> "QueryAllReserveStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_fund_mod_bal_by_asset_pool(
        self,
        query_fund_mod_bal_by_asset_pool_request: "QueryFundModBalByAssetPoolRequest",
    ) -> "QueryFundModBalByAssetPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_lend_interest(
        self, query_lend_interest_request: "QueryLendInterestRequest"
    ) -> "QueryLendInterestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_borrow_interest(
        self, query_borrow_interest_request: "QueryBorrowInterestRequest"
    ) -> "QueryBorrowInterestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_lends(
        self, stream: "grpclib.server.Stream[QueryLendsRequest, QueryLendsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_lends(request)
        await stream.send_message(response)

    async def __rpc_query_lend(
        self, stream: "grpclib.server.Stream[QueryLendRequest, QueryLendResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_lend(request)
        await stream.send_message(response)

    async def __rpc_query_all_lend_by_owner(
        self,
        stream: "grpclib.server.Stream[QueryAllLendByOwnerRequest, QueryAllLendByOwnerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_lend_by_owner(request)
        await stream.send_message(response)

    async def __rpc_query_all_lend_by_owner_and_pool(
        self,
        stream: "grpclib.server.Stream[QueryAllLendByOwnerAndPoolRequest, QueryAllLendByOwnerAndPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_lend_by_owner_and_pool(request)
        await stream.send_message(response)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_query_pairs(
        self, stream: "grpclib.server.Stream[QueryPairsRequest, QueryPairsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_pairs(request)
        await stream.send_message(response)

    async def __rpc_query_pair(
        self, stream: "grpclib.server.Stream[QueryPairRequest, QueryPairResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_pair(request)
        await stream.send_message(response)

    async def __rpc_query_asset_rates_params(
        self,
        stream: "grpclib.server.Stream[QueryAssetRatesParamsRequest, QueryAssetRatesParamsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_asset_rates_params(request)
        await stream.send_message(response)

    async def __rpc_query_asset_rates_param(
        self,
        stream: "grpclib.server.Stream[QueryAssetRatesParamRequest, QueryAssetRatesParamResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_asset_rates_param(request)
        await stream.send_message(response)

    async def __rpc_query_pools(
        self, stream: "grpclib.server.Stream[QueryPoolsRequest, QueryPoolsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_pools(request)
        await stream.send_message(response)

    async def __rpc_query_pool(
        self, stream: "grpclib.server.Stream[QueryPoolRequest, QueryPoolResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_pool(request)
        await stream.send_message(response)

    async def __rpc_query_asset_to_pair_mappings(
        self,
        stream: "grpclib.server.Stream[QueryAssetToPairMappingsRequest, QueryAssetToPairMappingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_asset_to_pair_mappings(request)
        await stream.send_message(response)

    async def __rpc_query_asset_to_pair_mapping(
        self,
        stream: "grpclib.server.Stream[QueryAssetToPairMappingRequest, QueryAssetToPairMappingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_asset_to_pair_mapping(request)
        await stream.send_message(response)

    async def __rpc_query_borrows(
        self, stream: "grpclib.server.Stream[QueryBorrowsRequest, QueryBorrowsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_borrows(request)
        await stream.send_message(response)

    async def __rpc_query_borrow(
        self, stream: "grpclib.server.Stream[QueryBorrowRequest, QueryBorrowResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_borrow(request)
        await stream.send_message(response)

    async def __rpc_query_all_borrow_by_owner(
        self,
        stream: "grpclib.server.Stream[QueryAllBorrowByOwnerRequest, QueryAllBorrowByOwnerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_borrow_by_owner(request)
        await stream.send_message(response)

    async def __rpc_query_all_borrow_by_owner_and_pool(
        self,
        stream: "grpclib.server.Stream[QueryAllBorrowByOwnerAndPoolRequest, QueryAllBorrowByOwnerAndPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_borrow_by_owner_and_pool(request)
        await stream.send_message(response)

    async def __rpc_query_pool_asset_lb_mapping(
        self,
        stream: "grpclib.server.Stream[QueryPoolAssetLbMappingRequest, QueryPoolAssetLbMappingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_pool_asset_lb_mapping(request)
        await stream.send_message(response)

    async def __rpc_query_reserve_buyback_asset_data(
        self,
        stream: "grpclib.server.Stream[QueryReserveBuybackAssetDataRequest, QueryReserveBuybackAssetDataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_reserve_buyback_asset_data(request)
        await stream.send_message(response)

    async def __rpc_query_auction_params(
        self,
        stream: "grpclib.server.Stream[QueryAuctionParamRequest, QueryAuctionParamResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_auction_params(request)
        await stream.send_message(response)

    async def __rpc_query_module_balance(
        self,
        stream: "grpclib.server.Stream[QueryModuleBalanceRequest, QueryModuleBalanceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_module_balance(request)
        await stream.send_message(response)

    async def __rpc_query_fund_mod_bal(
        self,
        stream: "grpclib.server.Stream[QueryFundModBalRequest, QueryFundModBalResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_fund_mod_bal(request)
        await stream.send_message(response)

    async def __rpc_query_fund_reserve_bal(
        self,
        stream: "grpclib.server.Stream[QueryFundReserveBalRequest, QueryFundReserveBalResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_fund_reserve_bal(request)
        await stream.send_message(response)

    async def __rpc_query_all_reserve_stats(
        self,
        stream: "grpclib.server.Stream[QueryAllReserveStatsRequest, QueryAllReserveStatsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_reserve_stats(request)
        await stream.send_message(response)

    async def __rpc_query_fund_mod_bal_by_asset_pool(
        self,
        stream: "grpclib.server.Stream[QueryFundModBalByAssetPoolRequest, QueryFundModBalByAssetPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_fund_mod_bal_by_asset_pool(request)
        await stream.send_message(response)

    async def __rpc_query_lend_interest(
        self,
        stream: "grpclib.server.Stream[QueryLendInterestRequest, QueryLendInterestResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_lend_interest(request)
        await stream.send_message(response)

    async def __rpc_query_borrow_interest(
        self,
        stream: "grpclib.server.Stream[QueryBorrowInterestRequest, QueryBorrowInterestResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_borrow_interest(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.lend.v1beta1.Query/QueryLends": grpclib.const.Handler(
                self.__rpc_query_lends,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLendsRequest,
                QueryLendsResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryLend": grpclib.const.Handler(
                self.__rpc_query_lend,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLendRequest,
                QueryLendResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAllLendByOwner": grpclib.const.Handler(
                self.__rpc_query_all_lend_by_owner,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllLendByOwnerRequest,
                QueryAllLendByOwnerResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAllLendByOwnerAndPool": grpclib.const.Handler(
                self.__rpc_query_all_lend_by_owner_and_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllLendByOwnerAndPoolRequest,
                QueryAllLendByOwnerAndPoolResponse,
            ),
            "/comdex.lend.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryPairs": grpclib.const.Handler(
                self.__rpc_query_pairs,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPairsRequest,
                QueryPairsResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryPair": grpclib.const.Handler(
                self.__rpc_query_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPairRequest,
                QueryPairResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAssetRatesParams": grpclib.const.Handler(
                self.__rpc_query_asset_rates_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAssetRatesParamsRequest,
                QueryAssetRatesParamsResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAssetRatesParam": grpclib.const.Handler(
                self.__rpc_query_asset_rates_param,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAssetRatesParamRequest,
                QueryAssetRatesParamResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryPools": grpclib.const.Handler(
                self.__rpc_query_pools,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPoolsRequest,
                QueryPoolsResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryPool": grpclib.const.Handler(
                self.__rpc_query_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPoolRequest,
                QueryPoolResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAssetToPairMappings": grpclib.const.Handler(
                self.__rpc_query_asset_to_pair_mappings,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAssetToPairMappingsRequest,
                QueryAssetToPairMappingsResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAssetToPairMapping": grpclib.const.Handler(
                self.__rpc_query_asset_to_pair_mapping,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAssetToPairMappingRequest,
                QueryAssetToPairMappingResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryBorrows": grpclib.const.Handler(
                self.__rpc_query_borrows,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryBorrowsRequest,
                QueryBorrowsResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryBorrow": grpclib.const.Handler(
                self.__rpc_query_borrow,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryBorrowRequest,
                QueryBorrowResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAllBorrowByOwner": grpclib.const.Handler(
                self.__rpc_query_all_borrow_by_owner,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllBorrowByOwnerRequest,
                QueryAllBorrowByOwnerResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAllBorrowByOwnerAndPool": grpclib.const.Handler(
                self.__rpc_query_all_borrow_by_owner_and_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllBorrowByOwnerAndPoolRequest,
                QueryAllBorrowByOwnerAndPoolResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryPoolAssetLBMapping": grpclib.const.Handler(
                self.__rpc_query_pool_asset_lb_mapping,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPoolAssetLbMappingRequest,
                QueryPoolAssetLbMappingResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryReserveBuybackAssetData": grpclib.const.Handler(
                self.__rpc_query_reserve_buyback_asset_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryReserveBuybackAssetDataRequest,
                QueryReserveBuybackAssetDataResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAuctionParams": grpclib.const.Handler(
                self.__rpc_query_auction_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAuctionParamRequest,
                QueryAuctionParamResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryModuleBalance": grpclib.const.Handler(
                self.__rpc_query_module_balance,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryModuleBalanceRequest,
                QueryModuleBalanceResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryFundModBal": grpclib.const.Handler(
                self.__rpc_query_fund_mod_bal,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFundModBalRequest,
                QueryFundModBalResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryFundReserveBal": grpclib.const.Handler(
                self.__rpc_query_fund_reserve_bal,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFundReserveBalRequest,
                QueryFundReserveBalResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryAllReserveStats": grpclib.const.Handler(
                self.__rpc_query_all_reserve_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllReserveStatsRequest,
                QueryAllReserveStatsResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryFundModBalByAssetPool": grpclib.const.Handler(
                self.__rpc_query_fund_mod_bal_by_asset_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFundModBalByAssetPoolRequest,
                QueryFundModBalByAssetPoolResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryLendInterest": grpclib.const.Handler(
                self.__rpc_query_lend_interest,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLendInterestRequest,
                QueryLendInterestResponse,
            ),
            "/comdex.lend.v1beta1.Query/QueryBorrowInterest": grpclib.const.Handler(
                self.__rpc_query_borrow_interest,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryBorrowInterestRequest,
                QueryBorrowInterestResponse,
            ),
        }
