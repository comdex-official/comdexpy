# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/locker/v1beta1/events.proto, comdex/locker/v1beta1/genesis.proto, comdex/locker/v1beta1/locker.proto, comdex/locker/v1beta1/params.proto, comdex/locker/v1beta1/query.proto, comdex/locker/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__
from ...asset import v1beta1 as __asset_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgCreateLockerRequest(betterproto.Message):
    depositor: str = betterproto.string_field(1)
    amount: str = betterproto.string_field(2)
    asset_id: int = betterproto.uint64_field(3)
    app_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgCreateLockerResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgAddWhiteListedAssetRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    asset_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgAddWhiteListedAssetResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDepositAssetRequest(betterproto.Message):
    depositor: str = betterproto.string_field(1)
    locker_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)
    asset_id: int = betterproto.uint64_field(4)
    app_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class MsgDepositAssetResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgWithdrawAssetRequest(betterproto.Message):
    depositor: str = betterproto.string_field(1)
    locker_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)
    asset_id: int = betterproto.uint64_field(4)
    app_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class MsgWithdrawAssetResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCloseLockerRequest(betterproto.Message):
    depositor: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    asset_id: int = betterproto.uint64_field(3)
    locker_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgCloseLockerResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgLockerRewardCalcRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    locker_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgLockerRewardCalcResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Locker(betterproto.Message):
    """
    locker_id will be the key which will be derived from the LockerLookUpTable
    """

    locker_id: int = betterproto.uint64_field(1)
    depositor: str = betterproto.string_field(2)
    returns_accumulated: str = betterproto.string_field(3)
    net_balance: str = betterproto.string_field(4)
    created_at: datetime = betterproto.message_field(5)
    asset_deposit_id: int = betterproto.uint64_field(6)
    is_locked: bool = betterproto.bool_field(7)
    app_id: int = betterproto.uint64_field(8)
    block_height: int = betterproto.int64_field(9)
    block_time: datetime = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class UserAppAssetLockerMapping(betterproto.Message):
    owner: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    asset_id: int = betterproto.uint64_field(3)
    locker_id: int = betterproto.uint64_field(4)
    user_data: List["UserTxData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class UserTxData(betterproto.Message):
    tx_type: str = betterproto.string_field(1)
    amount: str = betterproto.string_field(2)
    balance: str = betterproto.string_field(3)
    tx_time: datetime = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class LockerLookupTableData(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    locker_ids: List[int] = betterproto.uint64_field(3)
    deposited_amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class LockerProductAssetMapping(betterproto.Message):
    """Key is app_mapping_id"""

    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class LockedDepositedAmountDataMap(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    deposited_amount: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LockerTotalRewardsByAssetAppWise(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    total_rewards: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryLockerInfoRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryLockerInfoResponse(betterproto.Message):
    locker_info: "Locker" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLockersByAppToAssetIdRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryLockersByAppToAssetIdResponse(betterproto.Message):
    locker_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockerInfoByAppIdRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockerInfoByAppIdResponse(betterproto.Message):
    locker_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTotalDepositByAppAndAssetIdRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryTotalDepositByAppAndAssetIdResponse(betterproto.Message):
    total_deposit: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryOwnerLockerByAppIDbyOwnerRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    owner: str = betterproto.string_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryOwnerLockerByAppIDbyOwnerResponse(betterproto.Message):
    locker_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryOwnerLockerOfAllAppsByOwnerRequest(betterproto.Message):
    owner: str = betterproto.string_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryOwnerLockerOfAllAppsByOwnerResponse(betterproto.Message):
    locker_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    owner: str = betterproto.string_field(2)
    asset_id: int = betterproto.uint64_field(3)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse(betterproto.Message):
    user_tx_data: List["UserTxData"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryOwnerLockerByAppToAssetIDbyOwnerRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    owner: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryOwnerLockerByAppToAssetIDbyOwnerResponse(betterproto.Message):
    locker_info: "Locker" = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockerByAppByOwnerRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    owner: str = betterproto.string_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryLockerByAppByOwnerResponse(betterproto.Message):
    locker_info: List["Locker"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockerCountByAppIdRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryLockerCountByAppIdResponse(betterproto.Message):
    total_count: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryLockerCountByAppToAssetIdRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryLockerCountByAppToAssetIdResponse(betterproto.Message):
    total_count: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryWhiteListedAssetIDsByAppIdRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryWhiteListedAssetIDsByAppIdResponse(betterproto.Message):
    asset_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryWhiteListedAssetByAllAppsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryWhiteListedAssetByAllAppsResponse(betterproto.Message):
    product_to_all_asset: List["AppToAllAsset"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class AppToAllAsset(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    assets: List["__asset_v1_beta1__.Asset"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryLockerLookupTableByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockerLookupTableByAppResponse(betterproto.Message):
    token_to_locker_mapping: List["LockerLookupTableData"] = betterproto.message_field(
        1
    )
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockerLookupTableByAppAndAssetIdRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryLockerLookupTableByAppAndAssetIdResponse(betterproto.Message):
    token_to_locker_mapping: "LockerLookupTableData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLockerTotalDepositedByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockerTotalDepositedByAppResponse(betterproto.Message):
    locked_deposited_amount_data_map: List[
        "LockedDepositedAmountDataMap"
    ] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryLockerTotalRewardsByAssetAppWiseRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryLockerTotalRewardsByAssetAppWiseResponse(betterproto.Message):
    total_rewards: "LockerTotalRewardsByAssetAppWise" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    lockers: List["Locker"] = betterproto.message_field(1)
    locker_product_asset_mapping: List[
        "LockerProductAssetMapping"
    ] = betterproto.message_field(2)
    locker_total_rewards_by_asset_app_wise: List[
        "LockerTotalRewardsByAssetAppWise"
    ] = betterproto.message_field(3)
    locker_lookup_table: List["LockerLookupTableData"] = betterproto.message_field(4)
    user_locker_asset_mapping: List[
        "UserAppAssetLockerMapping"
    ] = betterproto.message_field(5)
    params: "Params" = betterproto.message_field(6)


class MsgStub(betterproto.ServiceStub):
    async def msg_create_locker(
        self,
        msg_create_locker_request: "MsgCreateLockerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateLockerResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Msg/MsgCreateLocker",
            msg_create_locker_request,
            MsgCreateLockerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_deposit_asset(
        self,
        msg_deposit_asset_request: "MsgDepositAssetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositAssetResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Msg/MsgDepositAsset",
            msg_deposit_asset_request,
            MsgDepositAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_withdraw_asset(
        self,
        msg_withdraw_asset_request: "MsgWithdrawAssetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgWithdrawAssetResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Msg/MsgWithdrawAsset",
            msg_withdraw_asset_request,
            MsgWithdrawAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_close_locker(
        self,
        msg_close_locker_request: "MsgCloseLockerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCloseLockerResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Msg/MsgCloseLocker",
            msg_close_locker_request,
            MsgCloseLockerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_locker_reward_calc(
        self,
        msg_locker_reward_calc_request: "MsgLockerRewardCalcRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgLockerRewardCalcResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Msg/MsgLockerRewardCalc",
            msg_locker_reward_calc_request,
            MsgLockerRewardCalcResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def query_locker_info(
        self,
        query_locker_info_request: "QueryLockerInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerInfoResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerInfo",
            query_locker_info_request,
            QueryLockerInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_lockers_by_app_to_asset_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockersByAppToAssetIdResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockersByAppToAssetID",
            query_lockers_by_app_to_asset_id_request,
            QueryLockersByAppToAssetIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locker_info_by_app_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerInfoByAppIdResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerInfoByAppID",
            query_locker_info_by_app_id_request,
            QueryLockerInfoByAppIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_total_deposit_by_app_and_asset_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTotalDepositByAppAndAssetIdResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryTotalDepositByAppAndAssetID",
            query_total_deposit_by_app_and_asset_id_request,
            QueryTotalDepositByAppAndAssetIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_owner_locker_by_app_i_dby_owner(
        self,
        query_owner_locker_by_app_i_dby_owner_request: "QueryOwnerLockerByAppIDbyOwnerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOwnerLockerByAppIDbyOwnerResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryOwnerLockerByAppIDbyOwner",
            query_owner_locker_by_app_i_dby_owner_request,
            QueryOwnerLockerByAppIDbyOwnerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_owner_locker_of_all_apps_by_owner(
        self,
        query_owner_locker_of_all_apps_by_owner_request: "QueryOwnerLockerOfAllAppsByOwnerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOwnerLockerOfAllAppsByOwnerResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryOwnerLockerOfAllAppsByOwner",
            query_owner_locker_of_all_apps_by_owner_request,
            QueryOwnerLockerOfAllAppsByOwnerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_owner_tx_details_locker_of_app_by_owner_by_asset(
        self,
        query_owner_tx_details_locker_of_app_by_owner_by_asset_request: "QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryOwnerTxDetailsLockerOfAppByOwnerByAsset",
            query_owner_tx_details_locker_of_app_by_owner_by_asset_request,
            QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_owner_locker_by_app_to_asset_i_dby_owner(
        self,
        query_owner_locker_by_app_to_asset_i_dby_owner_request: "QueryOwnerLockerByAppToAssetIDbyOwnerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOwnerLockerByAppToAssetIDbyOwnerResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryOwnerLockerByAppToAssetIDbyOwner",
            query_owner_locker_by_app_to_asset_i_dby_owner_request,
            QueryOwnerLockerByAppToAssetIDbyOwnerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locker_by_app_by_owner(
        self,
        query_locker_by_app_by_owner_request: "QueryLockerByAppByOwnerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerByAppByOwnerResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerByAppByOwner",
            query_locker_by_app_by_owner_request,
            QueryLockerByAppByOwnerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locker_count_by_app_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerCountByAppIdResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerCountByAppID",
            query_locker_count_by_app_id_request,
            QueryLockerCountByAppIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locker_count_by_app_to_asset_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerCountByAppToAssetIdResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerCountByAppToAssetID",
            query_locker_count_by_app_to_asset_id_request,
            QueryLockerCountByAppToAssetIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_white_listed_asset_i_ds_by_app_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWhiteListedAssetIDsByAppIdResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetIDsByAppID",
            query_white_listed_asset_i_ds_by_app_id_request,
            QueryWhiteListedAssetIDsByAppIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_white_listed_asset_by_all_apps(
        self,
        query_white_listed_asset_by_all_apps_request: "QueryWhiteListedAssetByAllAppsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWhiteListedAssetByAllAppsResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetByAllApps",
            query_white_listed_asset_by_all_apps_request,
            QueryWhiteListedAssetByAllAppsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locker_lookup_table_by_app(
        self,
        query_locker_lookup_table_by_app_request: "QueryLockerLookupTableByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerLookupTableByAppResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByApp",
            query_locker_lookup_table_by_app_request,
            QueryLockerLookupTableByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locker_lookup_table_by_app_and_asset_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerLookupTableByAppAndAssetIdResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByAppAndAssetID",
            query_locker_lookup_table_by_app_and_asset_id_request,
            QueryLockerLookupTableByAppAndAssetIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locker_total_rewards_by_asset_app_wise(
        self,
        query_locker_total_rewards_by_asset_app_wise_request: "QueryLockerTotalRewardsByAssetAppWiseRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerTotalRewardsByAssetAppWiseResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerTotalRewardsByAssetAppWise",
            query_locker_total_rewards_by_asset_app_wise_request,
            QueryLockerTotalRewardsByAssetAppWiseResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_locker_total_deposited_by_app(
        self,
        query_locker_total_deposited_by_app_request: "QueryLockerTotalDepositedByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLockerTotalDepositedByAppResponse":
        return await self._unary_unary(
            "/comdex.locker.v1beta1.Query/QueryLockerTotalDepositedByApp",
            query_locker_total_deposited_by_app_request,
            QueryLockerTotalDepositedByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def msg_create_locker(
        self, msg_create_locker_request: "MsgCreateLockerRequest"
    ) -> "MsgCreateLockerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_deposit_asset(
        self, msg_deposit_asset_request: "MsgDepositAssetRequest"
    ) -> "MsgDepositAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_withdraw_asset(
        self, msg_withdraw_asset_request: "MsgWithdrawAssetRequest"
    ) -> "MsgWithdrawAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_close_locker(
        self, msg_close_locker_request: "MsgCloseLockerRequest"
    ) -> "MsgCloseLockerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_locker_reward_calc(
        self, msg_locker_reward_calc_request: "MsgLockerRewardCalcRequest"
    ) -> "MsgLockerRewardCalcResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_msg_create_locker(
        self,
        stream: "grpclib.server.Stream[MsgCreateLockerRequest, MsgCreateLockerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_create_locker(request)
        await stream.send_message(response)

    async def __rpc_msg_deposit_asset(
        self,
        stream: "grpclib.server.Stream[MsgDepositAssetRequest, MsgDepositAssetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_deposit_asset(request)
        await stream.send_message(response)

    async def __rpc_msg_withdraw_asset(
        self,
        stream: "grpclib.server.Stream[MsgWithdrawAssetRequest, MsgWithdrawAssetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_withdraw_asset(request)
        await stream.send_message(response)

    async def __rpc_msg_close_locker(
        self,
        stream: "grpclib.server.Stream[MsgCloseLockerRequest, MsgCloseLockerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_close_locker(request)
        await stream.send_message(response)

    async def __rpc_msg_locker_reward_calc(
        self,
        stream: "grpclib.server.Stream[MsgLockerRewardCalcRequest, MsgLockerRewardCalcResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_locker_reward_calc(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.locker.v1beta1.Msg/MsgCreateLocker": grpclib.const.Handler(
                self.__rpc_msg_create_locker,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateLockerRequest,
                MsgCreateLockerResponse,
            ),
            "/comdex.locker.v1beta1.Msg/MsgDepositAsset": grpclib.const.Handler(
                self.__rpc_msg_deposit_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDepositAssetRequest,
                MsgDepositAssetResponse,
            ),
            "/comdex.locker.v1beta1.Msg/MsgWithdrawAsset": grpclib.const.Handler(
                self.__rpc_msg_withdraw_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgWithdrawAssetRequest,
                MsgWithdrawAssetResponse,
            ),
            "/comdex.locker.v1beta1.Msg/MsgCloseLocker": grpclib.const.Handler(
                self.__rpc_msg_close_locker,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCloseLockerRequest,
                MsgCloseLockerResponse,
            ),
            "/comdex.locker.v1beta1.Msg/MsgLockerRewardCalc": grpclib.const.Handler(
                self.__rpc_msg_locker_reward_calc,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgLockerRewardCalcRequest,
                MsgLockerRewardCalcResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def query_locker_info(
        self, query_locker_info_request: "QueryLockerInfoRequest"
    ) -> "QueryLockerInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_lockers_by_app_to_asset_id(
        self,
    ) -> "QueryLockersByAppToAssetIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locker_info_by_app_id(self) -> "QueryLockerInfoByAppIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_total_deposit_by_app_and_asset_id(
        self,
    ) -> "QueryTotalDepositByAppAndAssetIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_owner_locker_by_app_i_dby_owner(
        self,
        query_owner_locker_by_app_i_dby_owner_request: "QueryOwnerLockerByAppIDbyOwnerRequest",
    ) -> "QueryOwnerLockerByAppIDbyOwnerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_owner_locker_of_all_apps_by_owner(
        self,
        query_owner_locker_of_all_apps_by_owner_request: "QueryOwnerLockerOfAllAppsByOwnerRequest",
    ) -> "QueryOwnerLockerOfAllAppsByOwnerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_owner_tx_details_locker_of_app_by_owner_by_asset(
        self,
        query_owner_tx_details_locker_of_app_by_owner_by_asset_request: "QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest",
    ) -> "QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_owner_locker_by_app_to_asset_i_dby_owner(
        self,
        query_owner_locker_by_app_to_asset_i_dby_owner_request: "QueryOwnerLockerByAppToAssetIDbyOwnerRequest",
    ) -> "QueryOwnerLockerByAppToAssetIDbyOwnerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locker_by_app_by_owner(
        self, query_locker_by_app_by_owner_request: "QueryLockerByAppByOwnerRequest"
    ) -> "QueryLockerByAppByOwnerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locker_count_by_app_id(self) -> "QueryLockerCountByAppIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locker_count_by_app_to_asset_id(
        self,
    ) -> "QueryLockerCountByAppToAssetIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_white_listed_asset_i_ds_by_app_id(
        self,
    ) -> "QueryWhiteListedAssetIDsByAppIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_white_listed_asset_by_all_apps(
        self,
        query_white_listed_asset_by_all_apps_request: "QueryWhiteListedAssetByAllAppsRequest",
    ) -> "QueryWhiteListedAssetByAllAppsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locker_lookup_table_by_app(
        self,
        query_locker_lookup_table_by_app_request: "QueryLockerLookupTableByAppRequest",
    ) -> "QueryLockerLookupTableByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locker_lookup_table_by_app_and_asset_id(
        self,
    ) -> "QueryLockerLookupTableByAppAndAssetIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locker_total_rewards_by_asset_app_wise(
        self,
        query_locker_total_rewards_by_asset_app_wise_request: "QueryLockerTotalRewardsByAssetAppWiseRequest",
    ) -> "QueryLockerTotalRewardsByAssetAppWiseResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_locker_total_deposited_by_app(
        self,
        query_locker_total_deposited_by_app_request: "QueryLockerTotalDepositedByAppRequest",
    ) -> "QueryLockerTotalDepositedByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_locker_info(
        self,
        stream: "grpclib.server.Stream[QueryLockerInfoRequest, QueryLockerInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_info(request)
        await stream.send_message(response)

    async def __rpc_query_lockers_by_app_to_asset_id(
        self,
        stream: "grpclib.server.Stream[QueryLockersByAppToAssetIdRequest, QueryLockersByAppToAssetIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_lockers_by_app_to_asset_id(request)
        await stream.send_message(response)

    async def __rpc_query_locker_info_by_app_id(
        self,
        stream: "grpclib.server.Stream[QueryLockerInfoByAppIdRequest, QueryLockerInfoByAppIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_info_by_app_id(request)
        await stream.send_message(response)

    async def __rpc_query_total_deposit_by_app_and_asset_id(
        self,
        stream: "grpclib.server.Stream[QueryTotalDepositByAppAndAssetIdRequest, QueryTotalDepositByAppAndAssetIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_total_deposit_by_app_and_asset_id(request)
        await stream.send_message(response)

    async def __rpc_query_owner_locker_by_app_i_dby_owner(
        self,
        stream: "grpclib.server.Stream[QueryOwnerLockerByAppIDbyOwnerRequest, QueryOwnerLockerByAppIDbyOwnerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_owner_locker_by_app_i_dby_owner(request)
        await stream.send_message(response)

    async def __rpc_query_owner_locker_of_all_apps_by_owner(
        self,
        stream: "grpclib.server.Stream[QueryOwnerLockerOfAllAppsByOwnerRequest, QueryOwnerLockerOfAllAppsByOwnerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_owner_locker_of_all_apps_by_owner(request)
        await stream.send_message(response)

    async def __rpc_query_owner_tx_details_locker_of_app_by_owner_by_asset(
        self,
        stream: "grpclib.server.Stream[QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest, QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_owner_tx_details_locker_of_app_by_owner_by_asset(
            request
        )
        await stream.send_message(response)

    async def __rpc_query_owner_locker_by_app_to_asset_i_dby_owner(
        self,
        stream: "grpclib.server.Stream[QueryOwnerLockerByAppToAssetIDbyOwnerRequest, QueryOwnerLockerByAppToAssetIDbyOwnerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_owner_locker_by_app_to_asset_i_dby_owner(request)
        await stream.send_message(response)

    async def __rpc_query_locker_by_app_by_owner(
        self,
        stream: "grpclib.server.Stream[QueryLockerByAppByOwnerRequest, QueryLockerByAppByOwnerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_by_app_by_owner(request)
        await stream.send_message(response)

    async def __rpc_query_locker_count_by_app_id(
        self,
        stream: "grpclib.server.Stream[QueryLockerCountByAppIdRequest, QueryLockerCountByAppIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_count_by_app_id(request)
        await stream.send_message(response)

    async def __rpc_query_locker_count_by_app_to_asset_id(
        self,
        stream: "grpclib.server.Stream[QueryLockerCountByAppToAssetIdRequest, QueryLockerCountByAppToAssetIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_count_by_app_to_asset_id(request)
        await stream.send_message(response)

    async def __rpc_query_white_listed_asset_i_ds_by_app_id(
        self,
        stream: "grpclib.server.Stream[QueryWhiteListedAssetIDsByAppIdRequest, QueryWhiteListedAssetIDsByAppIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_white_listed_asset_i_ds_by_app_id(request)
        await stream.send_message(response)

    async def __rpc_query_white_listed_asset_by_all_apps(
        self,
        stream: "grpclib.server.Stream[QueryWhiteListedAssetByAllAppsRequest, QueryWhiteListedAssetByAllAppsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_white_listed_asset_by_all_apps(request)
        await stream.send_message(response)

    async def __rpc_query_locker_lookup_table_by_app(
        self,
        stream: "grpclib.server.Stream[QueryLockerLookupTableByAppRequest, QueryLockerLookupTableByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_lookup_table_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_locker_lookup_table_by_app_and_asset_id(
        self,
        stream: "grpclib.server.Stream[QueryLockerLookupTableByAppAndAssetIdRequest, QueryLockerLookupTableByAppAndAssetIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_lookup_table_by_app_and_asset_id(request)
        await stream.send_message(response)

    async def __rpc_query_locker_total_rewards_by_asset_app_wise(
        self,
        stream: "grpclib.server.Stream[QueryLockerTotalRewardsByAssetAppWiseRequest, QueryLockerTotalRewardsByAssetAppWiseResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_total_rewards_by_asset_app_wise(request)
        await stream.send_message(response)

    async def __rpc_query_locker_total_deposited_by_app(
        self,
        stream: "grpclib.server.Stream[QueryLockerTotalDepositedByAppRequest, QueryLockerTotalDepositedByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_locker_total_deposited_by_app(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.locker.v1beta1.Query/QueryLockerInfo": grpclib.const.Handler(
                self.__rpc_query_locker_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerInfoRequest,
                QueryLockerInfoResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockersByAppToAssetID": grpclib.const.Handler(
                self.__rpc_query_lockers_by_app_to_asset_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockersByAppToAssetIdRequest,
                QueryLockersByAppToAssetIdResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockerInfoByAppID": grpclib.const.Handler(
                self.__rpc_query_locker_info_by_app_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerInfoByAppIdRequest,
                QueryLockerInfoByAppIdResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryTotalDepositByAppAndAssetID": grpclib.const.Handler(
                self.__rpc_query_total_deposit_by_app_and_asset_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTotalDepositByAppAndAssetIdRequest,
                QueryTotalDepositByAppAndAssetIdResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryOwnerLockerByAppIDbyOwner": grpclib.const.Handler(
                self.__rpc_query_owner_locker_by_app_i_dby_owner,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOwnerLockerByAppIDbyOwnerRequest,
                QueryOwnerLockerByAppIDbyOwnerResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryOwnerLockerOfAllAppsByOwner": grpclib.const.Handler(
                self.__rpc_query_owner_locker_of_all_apps_by_owner,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOwnerLockerOfAllAppsByOwnerRequest,
                QueryOwnerLockerOfAllAppsByOwnerResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryOwnerTxDetailsLockerOfAppByOwnerByAsset": grpclib.const.Handler(
                self.__rpc_query_owner_tx_details_locker_of_app_by_owner_by_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest,
                QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryOwnerLockerByAppToAssetIDbyOwner": grpclib.const.Handler(
                self.__rpc_query_owner_locker_by_app_to_asset_i_dby_owner,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOwnerLockerByAppToAssetIDbyOwnerRequest,
                QueryOwnerLockerByAppToAssetIDbyOwnerResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockerByAppByOwner": grpclib.const.Handler(
                self.__rpc_query_locker_by_app_by_owner,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerByAppByOwnerRequest,
                QueryLockerByAppByOwnerResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockerCountByAppID": grpclib.const.Handler(
                self.__rpc_query_locker_count_by_app_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerCountByAppIdRequest,
                QueryLockerCountByAppIdResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockerCountByAppToAssetID": grpclib.const.Handler(
                self.__rpc_query_locker_count_by_app_to_asset_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerCountByAppToAssetIdRequest,
                QueryLockerCountByAppToAssetIdResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetIDsByAppID": grpclib.const.Handler(
                self.__rpc_query_white_listed_asset_i_ds_by_app_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWhiteListedAssetIDsByAppIdRequest,
                QueryWhiteListedAssetIDsByAppIdResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetByAllApps": grpclib.const.Handler(
                self.__rpc_query_white_listed_asset_by_all_apps,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWhiteListedAssetByAllAppsRequest,
                QueryWhiteListedAssetByAllAppsResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByApp": grpclib.const.Handler(
                self.__rpc_query_locker_lookup_table_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerLookupTableByAppRequest,
                QueryLockerLookupTableByAppResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByAppAndAssetID": grpclib.const.Handler(
                self.__rpc_query_locker_lookup_table_by_app_and_asset_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerLookupTableByAppAndAssetIdRequest,
                QueryLockerLookupTableByAppAndAssetIdResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockerTotalRewardsByAssetAppWise": grpclib.const.Handler(
                self.__rpc_query_locker_total_rewards_by_asset_app_wise,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerTotalRewardsByAssetAppWiseRequest,
                QueryLockerTotalRewardsByAssetAppWiseResponse,
            ),
            "/comdex.locker.v1beta1.Query/QueryLockerTotalDepositedByApp": grpclib.const.Handler(
                self.__rpc_query_locker_total_deposited_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLockerTotalDepositedByAppRequest,
                QueryLockerTotalDepositedByAppResponse,
            ),
        }
