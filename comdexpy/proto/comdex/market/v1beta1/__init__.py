# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/market/v1beta1/genesis.proto, comdex/market/v1beta1/gov.proto, comdex/market/v1beta1/market.proto, comdex/market/v1beta1/params.proto, comdex/market/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class TimeWeightedAverage(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    script_id: int = betterproto.uint64_field(2)
    twa: int = betterproto.uint64_field(3)
    current_index: int = betterproto.uint64_field(4)
    is_price_active: bool = betterproto.bool_field(5)
    price_value: List[int] = betterproto.uint64_field(6)
    discarded_height_diff: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class QueryMarketsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryMarketsResponse(betterproto.Message):
    time_weighted_average: List["TimeWeightedAverage"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryMarketRequest(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryMarketResponse(betterproto.Message):
    time_weighted_average: "TimeWeightedAverage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    time_weighted_average: List["TimeWeightedAverage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    pass


class QueryStub(betterproto.ServiceStub):
    async def query_markets(
        self,
        query_markets_request: "QueryMarketsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryMarketsResponse":
        return await self._unary_unary(
            "/comdex.market.v1beta1.Query/QueryMarkets",
            query_markets_request,
            QueryMarketsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_market(
        self,
        query_market_request: "QueryMarketRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryMarketResponse":
        return await self._unary_unary(
            "/comdex.market.v1beta1.Query/QueryMarket",
            query_market_request,
            QueryMarketResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def query_markets(
        self, query_markets_request: "QueryMarketsRequest"
    ) -> "QueryMarketsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_market(
        self, query_market_request: "QueryMarketRequest"
    ) -> "QueryMarketResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_markets(
        self, stream: "grpclib.server.Stream[QueryMarketsRequest, QueryMarketsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_markets(request)
        await stream.send_message(response)

    async def __rpc_query_market(
        self, stream: "grpclib.server.Stream[QueryMarketRequest, QueryMarketResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_market(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.market.v1beta1.Query/QueryMarkets": grpclib.const.Handler(
                self.__rpc_query_markets,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryMarketsRequest,
                QueryMarketsResponse,
            ),
            "/comdex.market.v1beta1.Query/QueryMarket": grpclib.const.Handler(
                self.__rpc_query_market,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryMarketRequest,
                QueryMarketResponse,
            ),
        }
