# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/esm/v1beta1/esm.proto, comdex/esm/v1beta1/genesis.proto, comdex/esm/v1beta1/params.proto, comdex/esm/v1beta1/query.proto, comdex/esm/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class EsmTriggerParams(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    target_value: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)
    cool_off_period: int = betterproto.uint64_field(3)
    assets_rates: List["DebtAssetsRates"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CurrentDepositStats(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    balance: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EsmStatus(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    executor: str = betterproto.string_field(2)
    status: bool = betterproto.bool_field(3)
    start_time: datetime = betterproto.message_field(4)
    end_time: datetime = betterproto.message_field(5)
    vault_redemption_status: bool = betterproto.bool_field(6)
    snapshot_status: bool = betterproto.bool_field(7)
    stable_vault_redemption_status: bool = betterproto.bool_field(8)
    collector_transaction: bool = betterproto.bool_field(9)
    share_calculation: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class KillSwitchParams(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    breaker_enable: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class UsersDepositMapping(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    depositor: str = betterproto.string_field(2)
    deposits: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class DataAfterCoolOff(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    collateral_total_amount: str = betterproto.string_field(2)
    debt_total_amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AssetToAmount(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)
    share: str = betterproto.string_field(4)
    debt_token_worth: str = betterproto.string_field(5)
    is_collateral: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class DebtAssetsRates(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    rates: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class MsgDepositEsm(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    depositor: str = betterproto.string_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgExecuteEsm(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    depositor: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgKillRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    kill_switch_params: "KillSwitchParams" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgCollateralRedemptionRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)
    from_: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgDepositEsmResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgExecuteEsmResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgKillResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCollateralRedemptionResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    admin: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryEsmTriggerParamsRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryEsmTriggerParamsResponse(betterproto.Message):
    esm_trigger_params: "EsmTriggerParams" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryEsmStatusRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryEsmStatusResponse(betterproto.Message):
    esm_status: "EsmStatus" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryCurrentDepositStatsRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryCurrentDepositStatsResponse(betterproto.Message):
    current_deposit_stats: "CurrentDepositStats" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryUsersDepositMappingRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    depositor: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryUsersDepositMappingResponse(betterproto.Message):
    users_deposit_mapping: "UsersDepositMapping" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDataAfterCoolOffRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryDataAfterCoolOffResponse(betterproto.Message):
    data_after_cool_off: "DataAfterCoolOff" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuerySnapshotPriceRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QuerySnapshotPriceResponse(betterproto.Message):
    price: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryAssetDataAfterCoolOffRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryAssetDataAfterCoolOffResponse(betterproto.Message):
    asset_to_amount: List["AssetToAmount"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    e_sm_trigger_params: List["EsmTriggerParams"] = betterproto.message_field(1)
    current_deposit_stats: List["CurrentDepositStats"] = betterproto.message_field(2)
    e_sm_status: List["EsmStatus"] = betterproto.message_field(3)
    kill_switch_params: List["KillSwitchParams"] = betterproto.message_field(4)
    users_deposit_mapping: List["UsersDepositMapping"] = betterproto.message_field(5)
    data_after_cool_off: List["DataAfterCoolOff"] = betterproto.message_field(7)
    params: "Params" = betterproto.message_field(10)


class MsgStub(betterproto.ServiceStub):
    async def deposit_esm(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositEsmResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Msg/DepositESM",
            msg_deposit_esm,
            MsgDepositEsmResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def execute_esm(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgExecuteEsmResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Msg/ExecuteESM",
            msg_execute_esm,
            MsgExecuteEsmResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_kill_switch(
        self,
        msg_kill_request: "MsgKillRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgKillResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Msg/MsgKillSwitch",
            msg_kill_request,
            MsgKillResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_collateral_redemption(
        self,
        msg_collateral_redemption_request: "MsgCollateralRedemptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCollateralRedemptionResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Msg/MsgCollateralRedemption",
            msg_collateral_redemption_request,
            MsgCollateralRedemptionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_esm_trigger_params(
        self,
        query_esm_trigger_params_request:"QueryEsmTriggerParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryEsmTriggerParamsResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Query/QueryESMTriggerParams",
            query_esm_trigger_params_request,
            QueryEsmTriggerParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_esm_status(
        self,
        query_esm_status_request:"QueryEsmStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryEsmStatusResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Query/QueryESMStatus",
            query_esm_status_request,
            QueryEsmStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_current_deposit_stats(
        self,
        query_current_deposit_stats_request: "QueryCurrentDepositStatsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCurrentDepositStatsResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Query/QueryCurrentDepositStats",
            query_current_deposit_stats_request,
            QueryCurrentDepositStatsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_users_deposit_mapping(
        self,
        query_users_deposit_mapping_request: "QueryUsersDepositMappingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryUsersDepositMappingResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Query/QueryUsersDepositMapping",
            query_users_deposit_mapping_request,
            QueryUsersDepositMappingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_data_after_cool_off(
        self,
        query_data_after_cool_off_request: "QueryDataAfterCoolOffRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDataAfterCoolOffResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Query/QueryDataAfterCoolOff",
            query_data_after_cool_off_request,
            QueryDataAfterCoolOffResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_snapshot_price(
        self,
        query_snapshot_price_request: "QuerySnapshotPriceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySnapshotPriceResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Query/QuerySnapshotPrice",
            query_snapshot_price_request,
            QuerySnapshotPriceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_asset_data_after_cool_off(
        self,
        query_asset_data_after_cool_off_request: "QueryAssetDataAfterCoolOffRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAssetDataAfterCoolOffResponse":
        return await self._unary_unary(
            "/comdex.esm.v1beta1.Query/QueryAssetDataAfterCoolOff",
            query_asset_data_after_cool_off_request,
            QueryAssetDataAfterCoolOffResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def deposit_esm(self) -> "MsgDepositEsmResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def execute_esm(self) -> "MsgExecuteEsmResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_kill_switch(
        self, msg_kill_request: "MsgKillRequest"
    ) -> "MsgKillResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_collateral_redemption(
        self, msg_collateral_redemption_request: "MsgCollateralRedemptionRequest"
    ) -> "MsgCollateralRedemptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_deposit_esm(
        self, stream: "grpclib.server.Stream[MsgDepositEsm, MsgDepositEsmResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.deposit_esm(request)
        await stream.send_message(response)

    async def __rpc_execute_esm(
        self, stream: "grpclib.server.Stream[MsgExecuteEsm, MsgExecuteEsmResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_esm(request)
        await stream.send_message(response)

    async def __rpc_msg_kill_switch(
        self, stream: "grpclib.server.Stream[MsgKillRequest, MsgKillResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_kill_switch(request)
        await stream.send_message(response)

    async def __rpc_msg_collateral_redemption(
        self,
        stream: "grpclib.server.Stream[MsgCollateralRedemptionRequest, MsgCollateralRedemptionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_collateral_redemption(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.esm.v1beta1.Msg/DepositESM": grpclib.const.Handler(
                self.__rpc_deposit_esm,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDepositEsm,
                MsgDepositEsmResponse,
            ),
            "/comdex.esm.v1beta1.Msg/ExecuteESM": grpclib.const.Handler(
                self.__rpc_execute_esm,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgExecuteEsm,
                MsgExecuteEsmResponse,
            ),
            "/comdex.esm.v1beta1.Msg/MsgKillSwitch": grpclib.const.Handler(
                self.__rpc_msg_kill_switch,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgKillRequest,
                MsgKillResponse,
            ),
            "/comdex.esm.v1beta1.Msg/MsgCollateralRedemption": grpclib.const.Handler(
                self.__rpc_msg_collateral_redemption,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCollateralRedemptionRequest,
                MsgCollateralRedemptionResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_esm_trigger_params(self) -> "QueryEsmTriggerParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_esm_status(self) -> "QueryEsmStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_current_deposit_stats(
        self, query_current_deposit_stats_request: "QueryCurrentDepositStatsRequest"
    ) -> "QueryCurrentDepositStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_users_deposit_mapping(
        self, query_users_deposit_mapping_request: "QueryUsersDepositMappingRequest"
    ) -> "QueryUsersDepositMappingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_data_after_cool_off(
        self, query_data_after_cool_off_request: "QueryDataAfterCoolOffRequest"
    ) -> "QueryDataAfterCoolOffResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_snapshot_price(
        self, query_snapshot_price_request: "QuerySnapshotPriceRequest"
    ) -> "QuerySnapshotPriceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_asset_data_after_cool_off(
        self,
        query_asset_data_after_cool_off_request: "QueryAssetDataAfterCoolOffRequest",
    ) -> "QueryAssetDataAfterCoolOffResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_query_esm_trigger_params(
        self,
        stream: "grpclib.server.Stream[QueryEsmTriggerParamsRequest, QueryEsmTriggerParamsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_esm_trigger_params(request)
        await stream.send_message(response)

    async def __rpc_query_esm_status(
        self,
        stream: "grpclib.server.Stream[QueryEsmStatusRequest, QueryEsmStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_esm_status(request)
        await stream.send_message(response)

    async def __rpc_query_current_deposit_stats(
        self,
        stream: "grpclib.server.Stream[QueryCurrentDepositStatsRequest, QueryCurrentDepositStatsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_current_deposit_stats(request)
        await stream.send_message(response)

    async def __rpc_query_users_deposit_mapping(
        self,
        stream: "grpclib.server.Stream[QueryUsersDepositMappingRequest, QueryUsersDepositMappingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_users_deposit_mapping(request)
        await stream.send_message(response)

    async def __rpc_query_data_after_cool_off(
        self,
        stream: "grpclib.server.Stream[QueryDataAfterCoolOffRequest, QueryDataAfterCoolOffResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_data_after_cool_off(request)
        await stream.send_message(response)

    async def __rpc_query_snapshot_price(
        self,
        stream: "grpclib.server.Stream[QuerySnapshotPriceRequest, QuerySnapshotPriceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_snapshot_price(request)
        await stream.send_message(response)

    async def __rpc_query_asset_data_after_cool_off(
        self,
        stream: "grpclib.server.Stream[QueryAssetDataAfterCoolOffRequest, QueryAssetDataAfterCoolOffResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_asset_data_after_cool_off(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.esm.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/comdex.esm.v1beta1.Query/QueryESMTriggerParams": grpclib.const.Handler(
                self.__rpc_query_esm_trigger_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryEsmTriggerParamsRequest,
                QueryEsmTriggerParamsResponse,
            ),
            "/comdex.esm.v1beta1.Query/QueryESMStatus": grpclib.const.Handler(
                self.__rpc_query_esm_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryEsmStatusRequest,
                QueryEsmStatusResponse,
            ),
            "/comdex.esm.v1beta1.Query/QueryCurrentDepositStats": grpclib.const.Handler(
                self.__rpc_query_current_deposit_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCurrentDepositStatsRequest,
                QueryCurrentDepositStatsResponse,
            ),
            "/comdex.esm.v1beta1.Query/QueryUsersDepositMapping": grpclib.const.Handler(
                self.__rpc_query_users_deposit_mapping,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryUsersDepositMappingRequest,
                QueryUsersDepositMappingResponse,
            ),
            "/comdex.esm.v1beta1.Query/QueryDataAfterCoolOff": grpclib.const.Handler(
                self.__rpc_query_data_after_cool_off,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDataAfterCoolOffRequest,
                QueryDataAfterCoolOffResponse,
            ),
            "/comdex.esm.v1beta1.Query/QuerySnapshotPrice": grpclib.const.Handler(
                self.__rpc_query_snapshot_price,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySnapshotPriceRequest,
                QuerySnapshotPriceResponse,
            ),
            "/comdex.esm.v1beta1.Query/QueryAssetDataAfterCoolOff": grpclib.const.Handler(
                self.__rpc_query_asset_data_after_cool_off,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAssetDataAfterCoolOffRequest,
                QueryAssetDataAfterCoolOffResponse,
            ),
        }
