# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/vault/v1beta1/events.proto, comdex/vault/v1beta1/genesis.proto, comdex/vault/v1beta1/query.proto, comdex/vault/v1beta1/tx.proto, comdex/vault/v1beta1/vault.proto
# plugin: python-betterproto
from dataclasses import dataclass

from datetime import datetime

from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__



if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgCreateRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    amount_in: str = betterproto.string_field(4)
    amount_out: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MsgCreateResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDepositRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    user_vault_id: int = betterproto.uint64_field(4)
    amount: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MsgDepositResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgWithdrawRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    user_vault_id: int = betterproto.uint64_field(4)
    amount: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MsgWithdrawResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDrawRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    user_vault_id: int = betterproto.uint64_field(4)
    amount: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MsgDrawResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRepayRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    user_vault_id: int = betterproto.uint64_field(4)
    amount: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MsgRepayResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCloseRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    user_vault_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgCloseResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDepositAndDrawRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    user_vault_id: int = betterproto.uint64_field(4)
    amount: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MsgDepositAndDrawResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCreateStableMintRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgCreateStableMintResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDepositStableMintRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    amount: str = betterproto.string_field(4)
    stable_vault_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class MsgDepositStableMintResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgWithdrawStableMintRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    amount: str = betterproto.string_field(4)
    stable_vault_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class MsgWithdrawStableMintResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgVaultInterestCalcRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    user_vault_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgVaultInterestCalcResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EventCreateVault(betterproto.Message):
    sender: str = betterproto.string_field(1)
    collateral_type: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EventDepositCollateral(betterproto.Message):
    owner: str = betterproto.string_field(1)
    collateral_type: str = betterproto.string_field(2)
    collateral: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EventWithdrawCollateral(betterproto.Message):
    owner: str = betterproto.string_field(1)
    collateral_type: str = betterproto.string_field(2)
    collateral: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EventDrawDebt(betterproto.Message):
    owner: str = betterproto.string_field(1)
    collateral_type: str = betterproto.string_field(2)
    debt: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EventRepayDebt(betterproto.Message):
    owner: str = betterproto.string_field(1)
    collateral_type: str = betterproto.string_field(2)
    debt: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EventCloseVault(betterproto.Message):
    owner: str = betterproto.string_field(1)
    collateral_type: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Vault(betterproto.Message):
    """app_vault_type_id will be the key for  the KVStore for this value."""

    id: int = betterproto.uint64_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_vault_id: int = betterproto.uint64_field(3)
    owner: str = betterproto.string_field(4)
    amount_in: str = betterproto.string_field(5)
    amount_out: str = betterproto.string_field(6)
    created_at: datetime = betterproto.message_field(7)
    interest_accumulated: str = betterproto.string_field(8)
    closing_fee_accumulated: str = betterproto.string_field(9)
    block_height: int = betterproto.int64_field(10)
    block_time: datetime = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class OwnerAppExtendedPairVaultMappingData(betterproto.Message):
    owner: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    extended_pair_id: int = betterproto.uint64_field(3)
    vault_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class AppExtendedPairVaultMappingData(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)
    vault_ids: List[int] = betterproto.uint64_field(3)
    token_minted_amount: str = betterproto.string_field(4)
    collateral_locked_amount: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class TvlLockedDataMap(betterproto.Message):
    asset_denom: str = betterproto.string_field(1)
    collateral_locked_amount: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MintedDataMap(betterproto.Message):
    asset_denom: str = betterproto.string_field(1)
    minted_amount: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class StableMintVault(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    amount_in: str = betterproto.string_field(2)
    amount_out: str = betterproto.string_field(3)
    app_id: int = betterproto.uint64_field(4)
    extended_pair_vault_id: int = betterproto.uint64_field(5)
    created_at: datetime = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class PairStatisticData(betterproto.Message):
    asset_in_denom: str = betterproto.string_field(1)
    asset_out_denom: str = betterproto.string_field(2)
    collateral_amount: str = betterproto.string_field(3)
    minted_amount: str = betterproto.string_field(4)
    extended_pair_vault_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class StableMintVaultRewards(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    stable_extended_pair_id: int = betterproto.uint64_field(2)
    user: str = betterproto.string_field(3)
    block_height: int = betterproto.uint64_field(4)
    amount: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class VaultInfo(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)
    owner: str = betterproto.string_field(3)
    collateral: str = betterproto.string_field(4)
    debt: str = betterproto.string_field(5)
    collateralization_ratio: str = betterproto.string_field(6)
    extended_pair_name: str = betterproto.string_field(7)
    interest_rate: str = betterproto.string_field(8)
    asset_in_denom: str = betterproto.string_field(9)
    asset_out_denom: str = betterproto.string_field(10)
    min_cr: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class QueryVaultRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryVaultResponse(betterproto.Message):
    vault: "Vault" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryVaultInfoByVaultIdRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryVaultInfoByVaultIdResponse(betterproto.Message):
    vaults_info: "VaultInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryVaultInfoOfOwnerByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    owner: str = betterproto.string_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryVaultInfoOfOwnerByAppResponse(betterproto.Message):
    vaults_info: List["VaultInfo"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllVaultsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllVaultsResponse(betterproto.Message):
    vault: List["Vault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllVaultsByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllVaultsByAppResponse(betterproto.Message):
    vault: List["Vault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllVaultsByAppAndExtendedPairRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryAllVaultsByAppAndExtendedPairResponse(betterproto.Message):
    vault: List["Vault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryVaultIdOfOwnerByExtendedPairAndAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    owner: str = betterproto.string_field(2)
    extended_pair_id: int = betterproto.uint64_field(3)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryVaultIdOfOwnerByExtendedPairAndAppResponse(betterproto.Message):
    vault_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryVaultIdsByAppInAllExtendedPairsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryVaultIdsByAppInAllExtendedPairsResponse(betterproto.Message):
    vault_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllVaultIdsByAnOwnerRequest(betterproto.Message):
    owner: str = betterproto.string_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllVaultIdsByAnOwnerResponse(betterproto.Message):
    vault_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTokenMintedByAppAndExtendedPairRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryTokenMintedByAppAndExtendedPairResponse(betterproto.Message):
    token_minted: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryTokenMintedAssetWiseByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTokenMintedAssetWiseByAppResponse(betterproto.Message):
    minted_data: List["MintedDataMap"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryVaultCountByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryVaultCountByAppResponse(betterproto.Message):
    vault_count: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryVaultCountByAppAndExtendedPairRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryVaultCountByAppAndExtendedPairResponse(betterproto.Message):
    vault_count: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTotalValueLockedByAppAndExtendedPairRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryTotalValueLockedByAppAndExtendedPairResponse(betterproto.Message):
    value_locked: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryExtendedPairIDsByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryExtendedPairIDsByAppResponse(betterproto.Message):
    extended_pair_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryStableVaultByVaultIdRequest(betterproto.Message):
    stable_vault_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryStableVaultByVaultIdResponse(betterproto.Message):
    stable_mint_vault: "StableMintVault" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryStableVaultByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryStableVaultByAppResponse(betterproto.Message):
    stable_mint_vault: List["StableMintVault"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryStableVaultByAppAndExtendedPairRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryStableVaultByAppAndExtendedPairResponse(betterproto.Message):
    stable_mint_vault: "StableMintVault" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryExtendedPairVaultMappingByAppAndExtendedPairRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryExtendedPairVaultMappingByAppAndExtendedPairResponse(betterproto.Message):
    extended_pair_vault_mapping: "AppExtendedPairVaultMappingData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryExtendedPairVaultMappingByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryExtendedPairVaultMappingByAppResponse(betterproto.Message):
    extended_pair_vault_mapping: List[
        "AppExtendedPairVaultMappingData"
    ] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTvlByAppOfAllExtendedPairsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTvlByAppOfAllExtendedPairsResponse(betterproto.Message):
    tvldata: List["TvlLockedDataMap"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTvlByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTvlByAppResponse(betterproto.Message):
    collateral_locked: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryUserMyPositionByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    owner: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryUserMyPositionByAppResponse(betterproto.Message):
    collateral_locked: str = betterproto.string_field(1)
    total_due: str = betterproto.string_field(2)
    available_to_borrow: str = betterproto.string_field(3)
    average_cr_ratio: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class QueryUserExtendedPairTotalDataRequest(betterproto.Message):
    owner: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryUserExtendedPairTotalDataResponse(betterproto.Message):
    user_total_data: List[
        "OwnerAppExtendedPairVaultMappingData"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryPairsLockedAndMintedStatisticByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryPairsLockedAndMintedStatisticByAppResponse(betterproto.Message):
    pair_statistic_data: List["PairStatisticData"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllStableMintVaultRewardsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllStableMintVaultRewardsResponse(betterproto.Message):
    stable_mint_vault_rewards: List[
        "StableMintVaultRewards"
    ] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    vaults: List["Vault"] = betterproto.message_field(1)
    stable_mint_vault: List["StableMintVault"] = betterproto.message_field(2)
    app_extended_pair_vault_mapping: List[
        "AppExtendedPairVaultMappingData"
    ] = betterproto.message_field(3)
    user_vault_asset_mapping: List[
        "OwnerAppExtendedPairVaultMappingData"
    ] = betterproto.message_field(4)
    length_of_vaults: int = betterproto.uint64_field(5)


class MsgStub(betterproto.ServiceStub):
    async def msg_create(
        self,
        msg_create_request: "MsgCreateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgCreate",
            msg_create_request,
            MsgCreateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_deposit(
        self,
        msg_deposit_request: "MsgDepositRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgDeposit",
            msg_deposit_request,
            MsgDepositResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_withdraw(
        self,
        msg_withdraw_request: "MsgWithdrawRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgWithdrawResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgWithdraw",
            msg_withdraw_request,
            MsgWithdrawResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_draw(
        self,
        msg_draw_request: "MsgDrawRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDrawResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgDraw",
            msg_draw_request,
            MsgDrawResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_repay(
        self,
        msg_repay_request: "MsgRepayRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRepayResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgRepay",
            msg_repay_request,
            MsgRepayResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_close(
        self,
        msg_close_request: "MsgCloseRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCloseResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgClose",
            msg_close_request,
            MsgCloseResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_deposit_and_draw(
        self,
        msg_deposit_and_draw_request: "MsgDepositAndDrawRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositAndDrawResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgDepositAndDraw",
            msg_deposit_and_draw_request,
            MsgDepositAndDrawResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_create_stable_mint(
        self,
        msg_create_stable_mint_request: "MsgCreateStableMintRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateStableMintResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgCreateStableMint",
            msg_create_stable_mint_request,
            MsgCreateStableMintResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_deposit_stable_mint(
        self,
        msg_deposit_stable_mint_request: "MsgDepositStableMintRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositStableMintResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgDepositStableMint",
            msg_deposit_stable_mint_request,
            MsgDepositStableMintResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_withdraw_stable_mint(
        self,
        msg_withdraw_stable_mint_request: "MsgWithdrawStableMintRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgWithdrawStableMintResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgWithdrawStableMint",
            msg_withdraw_stable_mint_request,
            MsgWithdrawStableMintResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_vault_interest_calc(
        self,
        msg_vault_interest_calc_request: "MsgVaultInterestCalcRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgVaultInterestCalcResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Msg/MsgVaultInterestCalc",
            msg_vault_interest_calc_request,
            MsgVaultInterestCalcResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def query_vault(
        self,
        query_vault_request: "QueryVaultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVaultResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryVault",
            query_vault_request,
            QueryVaultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_user_extended_pair_total_data(
        self,
        query_user_extended_pair_total_data_request: "QueryUserExtendedPairTotalDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryUserExtendedPairTotalDataResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryUserExtendedPairTotalData",
            query_user_extended_pair_total_data_request,
            QueryUserExtendedPairTotalDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_vault_info_by_vault_id(
        self,
        query_vault_info_by_vault_id_request:"QueryVaultInfoByVaultIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVaultInfoByVaultIdResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryVaultInfoByVaultID",
            query_vault_info_by_vault_id_request,
            QueryVaultInfoByVaultIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_vault_info_of_owner_by_app(
        self,
        query_vault_info_of_owner_by_app_request: "QueryVaultInfoOfOwnerByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVaultInfoOfOwnerByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryVaultInfoOfOwnerByApp",
            query_vault_info_of_owner_by_app_request,
            QueryVaultInfoOfOwnerByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_vaults(
        self,
        query_all_vaults_request: "QueryAllVaultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllVaultsResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryAllVaults",
            query_all_vaults_request,
            QueryAllVaultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_vaults_by_app(
        self,
        query_all_vaults_by_app_request: "QueryAllVaultsByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllVaultsByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryAllVaultsByApp",
            query_all_vaults_by_app_request,
            QueryAllVaultsByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_vaults_by_app_and_extended_pair(
        self,
        query_all_vaults_by_app_and_extended_pair_request: "QueryAllVaultsByAppAndExtendedPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllVaultsByAppAndExtendedPairResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryAllVaultsByAppAndExtendedPair",
            query_all_vaults_by_app_and_extended_pair_request,
            QueryAllVaultsByAppAndExtendedPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_vault_id_of_owner_by_extended_pair_and_app(
        self,
        query_vault_id_of_owner_by_extended_pair_and_app_request:"QueryVaultIdOfOwnerByExtendedPairAndAppResponse",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVaultIdOfOwnerByExtendedPairAndAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryVaultIDOfOwnerByExtendedPairAndApp",
            query_vault_id_of_owner_by_extended_pair_and_app_request,
            QueryVaultIdOfOwnerByExtendedPairAndAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_vault_ids_by_app_in_all_extended_pairs(
        self,
        query_vault_ids_by_app_in_all_extended_pairs_request: "QueryVaultIdsByAppInAllExtendedPairsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVaultIdsByAppInAllExtendedPairsResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryVaultIdsByAppInAllExtendedPairs",
            query_vault_ids_by_app_in_all_extended_pairs_request,
            QueryVaultIdsByAppInAllExtendedPairsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_vault_ids_by_an_owner(
        self,
        query_all_vault_ids_by_an_owner_request: "QueryAllVaultIdsByAnOwnerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllVaultIdsByAnOwnerResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryAllVaultIdsByAnOwner",
            query_all_vault_ids_by_an_owner_request,
            QueryAllVaultIdsByAnOwnerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_token_minted_by_app_and_extended_pair(
        self,
        query_token_minted_by_app_and_extended_pair_request: "QueryTokenMintedByAppAndExtendedPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTokenMintedByAppAndExtendedPairResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryTokenMintedByAppAndExtendedPair",
            query_token_minted_by_app_and_extended_pair_request,
            QueryTokenMintedByAppAndExtendedPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_token_minted_asset_wise_by_app(
        self,
        query_token_minted_asset_wise_by_app_request: "QueryTokenMintedAssetWiseByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTokenMintedAssetWiseByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryTokenMintedAssetWiseByApp",
            query_token_minted_asset_wise_by_app_request,
            QueryTokenMintedAssetWiseByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_vault_count_by_app(
        self,
        query_vault_count_by_app_request: "QueryVaultCountByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVaultCountByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryVaultCountByApp",
            query_vault_count_by_app_request,
            QueryVaultCountByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_vault_count_by_app_and_extended_pair(
        self,
        query_vault_count_by_app_and_extended_pair_request: "QueryVaultCountByAppAndExtendedPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVaultCountByAppAndExtendedPairResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryVaultCountByAppAndExtendedPair",
            query_vault_count_by_app_and_extended_pair_request,
            QueryVaultCountByAppAndExtendedPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_total_value_locked_by_app_and_extended_pair(
        self,
        query_total_value_locked_by_app_and_extended_pair_request: "QueryTotalValueLockedByAppAndExtendedPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTotalValueLockedByAppAndExtendedPairResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryTotalValueLockedByAppAndExtendedPair",
            query_total_value_locked_by_app_and_extended_pair_request,
            QueryTotalValueLockedByAppAndExtendedPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_extended_pair_i_ds_by_app(
        self,
        query_extended_pair_i_ds_by_app_request: "QueryExtendedPairIDsByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExtendedPairIDsByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryExtendedPairIDsByApp",
            query_extended_pair_i_ds_by_app_request,
            QueryExtendedPairIDsByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_stable_vault_by_vault_id(
        self,
        query_stable_vault_by_vault_id_request: "QueryStableVaultByVaultIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStableVaultByVaultIdResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryStableVaultByVaultID",
            query_stable_vault_by_vault_id_request,
            QueryStableVaultByVaultIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_stable_vault_by_app(
        self,
        query_stable_vault_by_app_request: "QueryStableVaultByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStableVaultByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryStableVaultByApp",
            query_stable_vault_by_app_request,
            QueryStableVaultByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_stable_vault_by_app_and_extended_pair(
        self,
        query_stable_vault_by_app_and_extended_pair_request: "QueryStableVaultByAppAndExtendedPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStableVaultByAppAndExtendedPairResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryStableVaultByAppAndExtendedPair",
            query_stable_vault_by_app_and_extended_pair_request,
            QueryStableVaultByAppAndExtendedPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_extended_pair_vault_mapping_by_app_and_extended_pair(
        self,
        query_extended_pair_vault_mapping_by_app_and_extended_pair_request: "QueryExtendedPairVaultMappingByAppAndExtendedPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExtendedPairVaultMappingByAppAndExtendedPairResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByAppAndExtendedPair",
            query_extended_pair_vault_mapping_by_app_and_extended_pair_request,
            QueryExtendedPairVaultMappingByAppAndExtendedPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_extended_pair_vault_mapping_by_app(
        self,
        query_extended_pair_vault_mapping_by_app_request: "QueryExtendedPairVaultMappingByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExtendedPairVaultMappingByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByApp",
            query_extended_pair_vault_mapping_by_app_request,
            QueryExtendedPairVaultMappingByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_tvl_by_app_of_all_extended_pairs(
        self,
        query_tvl_by_app_of_all_extended_pairs_request: "QueryTvlByAppOfAllExtendedPairsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTvlByAppOfAllExtendedPairsResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryTVLByAppOfAllExtendedPairs",
            query_tvl_by_app_of_all_extended_pairs_request,
            QueryTvlByAppOfAllExtendedPairsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_tvl_by_app(
        self,
        query_tvl_by_app_request: "QueryTvlByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTvlByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryTVLByApp",
            query_tvl_by_app_request,
            QueryTvlByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_user_my_position_by_app(
        self,
        query_user_my_position_by_app_request: "QueryUserMyPositionByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryUserMyPositionByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryUserMyPositionByApp",
            query_user_my_position_by_app_request,
            QueryUserMyPositionByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_pairs_locked_and_minted_statistic_by_app(
        self,
        query_pairs_locked_and_minted_statistic_by_app_request: "QueryPairsLockedAndMintedStatisticByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPairsLockedAndMintedStatisticByAppResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryPairsLockedAndMintedStatisticByApp",
            query_pairs_locked_and_minted_statistic_by_app_request,
            QueryPairsLockedAndMintedStatisticByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_stable_mint_vault_rewards(
        self,
        query_all_stable_mint_vault_rewards_request: "QueryAllStableMintVaultRewardsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllStableMintVaultRewardsResponse":
        return await self._unary_unary(
            "/comdex.vault.v1beta1.Query/QueryAllStableMintVaultRewards",
            query_all_stable_mint_vault_rewards_request,
            QueryAllStableMintVaultRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def msg_create(
        self, msg_create_request: "MsgCreateRequest"
    ) -> "MsgCreateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_deposit(
        self, msg_deposit_request: "MsgDepositRequest"
    ) -> "MsgDepositResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_withdraw(
        self, msg_withdraw_request: "MsgWithdrawRequest"
    ) -> "MsgWithdrawResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_draw(self, msg_draw_request: "MsgDrawRequest") -> "MsgDrawResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_repay(
        self, msg_repay_request: "MsgRepayRequest"
    ) -> "MsgRepayResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_close(
        self, msg_close_request: "MsgCloseRequest"
    ) -> "MsgCloseResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_deposit_and_draw(
        self, msg_deposit_and_draw_request: "MsgDepositAndDrawRequest"
    ) -> "MsgDepositAndDrawResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_create_stable_mint(
        self, msg_create_stable_mint_request: "MsgCreateStableMintRequest"
    ) -> "MsgCreateStableMintResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_deposit_stable_mint(
        self, msg_deposit_stable_mint_request: "MsgDepositStableMintRequest"
    ) -> "MsgDepositStableMintResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_withdraw_stable_mint(
        self, msg_withdraw_stable_mint_request: "MsgWithdrawStableMintRequest"
    ) -> "MsgWithdrawStableMintResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_vault_interest_calc(
        self, msg_vault_interest_calc_request: "MsgVaultInterestCalcRequest"
    ) -> "MsgVaultInterestCalcResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_msg_create(
        self, stream: "grpclib.server.Stream[MsgCreateRequest, MsgCreateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_create(request)
        await stream.send_message(response)

    async def __rpc_msg_deposit(
        self, stream: "grpclib.server.Stream[MsgDepositRequest, MsgDepositResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_deposit(request)
        await stream.send_message(response)

    async def __rpc_msg_withdraw(
        self, stream: "grpclib.server.Stream[MsgWithdrawRequest, MsgWithdrawResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_withdraw(request)
        await stream.send_message(response)

    async def __rpc_msg_draw(
        self, stream: "grpclib.server.Stream[MsgDrawRequest, MsgDrawResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_draw(request)
        await stream.send_message(response)

    async def __rpc_msg_repay(
        self, stream: "grpclib.server.Stream[MsgRepayRequest, MsgRepayResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_repay(request)
        await stream.send_message(response)

    async def __rpc_msg_close(
        self, stream: "grpclib.server.Stream[MsgCloseRequest, MsgCloseResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_close(request)
        await stream.send_message(response)

    async def __rpc_msg_deposit_and_draw(
        self,
        stream: "grpclib.server.Stream[MsgDepositAndDrawRequest, MsgDepositAndDrawResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_deposit_and_draw(request)
        await stream.send_message(response)

    async def __rpc_msg_create_stable_mint(
        self,
        stream: "grpclib.server.Stream[MsgCreateStableMintRequest, MsgCreateStableMintResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_create_stable_mint(request)
        await stream.send_message(response)

    async def __rpc_msg_deposit_stable_mint(
        self,
        stream: "grpclib.server.Stream[MsgDepositStableMintRequest, MsgDepositStableMintResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_deposit_stable_mint(request)
        await stream.send_message(response)

    async def __rpc_msg_withdraw_stable_mint(
        self,
        stream: "grpclib.server.Stream[MsgWithdrawStableMintRequest, MsgWithdrawStableMintResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_withdraw_stable_mint(request)
        await stream.send_message(response)

    async def __rpc_msg_vault_interest_calc(
        self,
        stream: "grpclib.server.Stream[MsgVaultInterestCalcRequest, MsgVaultInterestCalcResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_vault_interest_calc(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.vault.v1beta1.Msg/MsgCreate": grpclib.const.Handler(
                self.__rpc_msg_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateRequest,
                MsgCreateResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgDeposit": grpclib.const.Handler(
                self.__rpc_msg_deposit,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDepositRequest,
                MsgDepositResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgWithdraw": grpclib.const.Handler(
                self.__rpc_msg_withdraw,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgWithdrawRequest,
                MsgWithdrawResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgDraw": grpclib.const.Handler(
                self.__rpc_msg_draw,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDrawRequest,
                MsgDrawResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgRepay": grpclib.const.Handler(
                self.__rpc_msg_repay,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRepayRequest,
                MsgRepayResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgClose": grpclib.const.Handler(
                self.__rpc_msg_close,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCloseRequest,
                MsgCloseResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgDepositAndDraw": grpclib.const.Handler(
                self.__rpc_msg_deposit_and_draw,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDepositAndDrawRequest,
                MsgDepositAndDrawResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgCreateStableMint": grpclib.const.Handler(
                self.__rpc_msg_create_stable_mint,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateStableMintRequest,
                MsgCreateStableMintResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgDepositStableMint": grpclib.const.Handler(
                self.__rpc_msg_deposit_stable_mint,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDepositStableMintRequest,
                MsgDepositStableMintResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgWithdrawStableMint": grpclib.const.Handler(
                self.__rpc_msg_withdraw_stable_mint,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgWithdrawStableMintRequest,
                MsgWithdrawStableMintResponse,
            ),
            "/comdex.vault.v1beta1.Msg/MsgVaultInterestCalc": grpclib.const.Handler(
                self.__rpc_msg_vault_interest_calc,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgVaultInterestCalcRequest,
                MsgVaultInterestCalcResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def query_vault(
        self, query_vault_request: "QueryVaultRequest"
    ) -> "QueryVaultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_user_extended_pair_total_data(
        self,
        query_user_extended_pair_total_data_request: "QueryUserExtendedPairTotalDataRequest",
    ) -> "QueryUserExtendedPairTotalDataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_vault_info_by_vault_id(self) -> "QueryVaultInfoByVaultIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_vault_info_of_owner_by_app(
        self,
        query_vault_info_of_owner_by_app_request: "QueryVaultInfoOfOwnerByAppRequest",
    ) -> "QueryVaultInfoOfOwnerByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_vaults(
        self, query_all_vaults_request: "QueryAllVaultsRequest"
    ) -> "QueryAllVaultsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_vaults_by_app(
        self, query_all_vaults_by_app_request: "QueryAllVaultsByAppRequest"
    ) -> "QueryAllVaultsByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_vaults_by_app_and_extended_pair(
        self,
        query_all_vaults_by_app_and_extended_pair_request: "QueryAllVaultsByAppAndExtendedPairRequest",
    ) -> "QueryAllVaultsByAppAndExtendedPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_vault_id_of_owner_by_extended_pair_and_app(
        self,
    ) -> "QueryVaultIdOfOwnerByExtendedPairAndAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_vault_ids_by_app_in_all_extended_pairs(
        self,
        query_vault_ids_by_app_in_all_extended_pairs_request: "QueryVaultIdsByAppInAllExtendedPairsRequest",
    ) -> "QueryVaultIdsByAppInAllExtendedPairsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_vault_ids_by_an_owner(
        self,
        query_all_vault_ids_by_an_owner_request: "QueryAllVaultIdsByAnOwnerRequest",
    ) -> "QueryAllVaultIdsByAnOwnerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_token_minted_by_app_and_extended_pair(
        self,
        query_token_minted_by_app_and_extended_pair_request: "QueryTokenMintedByAppAndExtendedPairRequest",
    ) -> "QueryTokenMintedByAppAndExtendedPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_token_minted_asset_wise_by_app(
        self,
        query_token_minted_asset_wise_by_app_request: "QueryTokenMintedAssetWiseByAppRequest",
    ) -> "QueryTokenMintedAssetWiseByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_vault_count_by_app(
        self, query_vault_count_by_app_request: "QueryVaultCountByAppRequest"
    ) -> "QueryVaultCountByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_vault_count_by_app_and_extended_pair(
        self,
        query_vault_count_by_app_and_extended_pair_request: "QueryVaultCountByAppAndExtendedPairRequest",
    ) -> "QueryVaultCountByAppAndExtendedPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_total_value_locked_by_app_and_extended_pair(
        self,
        query_total_value_locked_by_app_and_extended_pair_request: "QueryTotalValueLockedByAppAndExtendedPairRequest",
    ) -> "QueryTotalValueLockedByAppAndExtendedPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_extended_pair_i_ds_by_app(
        self,
        query_extended_pair_i_ds_by_app_request: "QueryExtendedPairIDsByAppRequest",
    ) -> "QueryExtendedPairIDsByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_stable_vault_by_vault_id(
        self,
    ) -> "QueryStableVaultByVaultIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_stable_vault_by_app(
        self, query_stable_vault_by_app_request: "QueryStableVaultByAppRequest"
    ) -> "QueryStableVaultByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_stable_vault_by_app_and_extended_pair(
        self,
        query_stable_vault_by_app_and_extended_pair_request: "QueryStableVaultByAppAndExtendedPairRequest",
    ) -> "QueryStableVaultByAppAndExtendedPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_extended_pair_vault_mapping_by_app_and_extended_pair(
        self,
        query_extended_pair_vault_mapping_by_app_and_extended_pair_request: "QueryExtendedPairVaultMappingByAppAndExtendedPairRequest",
    ) -> "QueryExtendedPairVaultMappingByAppAndExtendedPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_extended_pair_vault_mapping_by_app(
        self,
        query_extended_pair_vault_mapping_by_app_request: "QueryExtendedPairVaultMappingByAppRequest",
    ) -> "QueryExtendedPairVaultMappingByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_tvl_by_app_of_all_extended_pairs(
        self,
    ) -> "QueryTvlByAppOfAllExtendedPairsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_tvl_by_app(self) -> "QueryTvlByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_user_my_position_by_app(
        self, query_user_my_position_by_app_request: "QueryUserMyPositionByAppRequest"
    ) -> "QueryUserMyPositionByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_pairs_locked_and_minted_statistic_by_app(
        self,
        query_pairs_locked_and_minted_statistic_by_app_request: "QueryPairsLockedAndMintedStatisticByAppRequest",
    ) -> "QueryPairsLockedAndMintedStatisticByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_stable_mint_vault_rewards(
        self,
        query_all_stable_mint_vault_rewards_request: "QueryAllStableMintVaultRewardsRequest",
    ) -> "QueryAllStableMintVaultRewardsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_vault(
        self, stream: "grpclib.server.Stream[QueryVaultRequest, QueryVaultResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_vault(request)
        await stream.send_message(response)

    async def __rpc_query_user_extended_pair_total_data(
        self,
        stream: "grpclib.server.Stream[QueryUserExtendedPairTotalDataRequest, QueryUserExtendedPairTotalDataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_user_extended_pair_total_data(request)
        await stream.send_message(response)

    async def __rpc_query_vault_info_by_vault_id(
        self,
        stream: "grpclib.server.Stream[QueryVaultInfoByVaultIdRequest, QueryVaultInfoByVaultIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_vault_info_by_vault_id(request)
        await stream.send_message(response)

    async def __rpc_query_vault_info_of_owner_by_app(
        self,
        stream: "grpclib.server.Stream[QueryVaultInfoOfOwnerByAppRequest, QueryVaultInfoOfOwnerByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_vault_info_of_owner_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_all_vaults(
        self,
        stream: "grpclib.server.Stream[QueryAllVaultsRequest, QueryAllVaultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_vaults(request)
        await stream.send_message(response)

    async def __rpc_query_all_vaults_by_app(
        self,
        stream: "grpclib.server.Stream[QueryAllVaultsByAppRequest, QueryAllVaultsByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_vaults_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_all_vaults_by_app_and_extended_pair(
        self,
        stream: "grpclib.server.Stream[QueryAllVaultsByAppAndExtendedPairRequest, QueryAllVaultsByAppAndExtendedPairResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_vaults_by_app_and_extended_pair(request)
        await stream.send_message(response)

    async def __rpc_query_vault_id_of_owner_by_extended_pair_and_app(
        self,
        stream: "grpclib.server.Stream[QueryVaultIdOfOwnerByExtendedPairAndAppRequest, QueryVaultIdOfOwnerByExtendedPairAndAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_vault_id_of_owner_by_extended_pair_and_app(request)
        await stream.send_message(response)

    async def __rpc_query_vault_ids_by_app_in_all_extended_pairs(
        self,
        stream: "grpclib.server.Stream[QueryVaultIdsByAppInAllExtendedPairsRequest, QueryVaultIdsByAppInAllExtendedPairsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_vault_ids_by_app_in_all_extended_pairs(request)
        await stream.send_message(response)

    async def __rpc_query_all_vault_ids_by_an_owner(
        self,
        stream: "grpclib.server.Stream[QueryAllVaultIdsByAnOwnerRequest, QueryAllVaultIdsByAnOwnerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_vault_ids_by_an_owner(request)
        await stream.send_message(response)

    async def __rpc_query_token_minted_by_app_and_extended_pair(
        self,
        stream: "grpclib.server.Stream[QueryTokenMintedByAppAndExtendedPairRequest, QueryTokenMintedByAppAndExtendedPairResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_token_minted_by_app_and_extended_pair(request)
        await stream.send_message(response)

    async def __rpc_query_token_minted_asset_wise_by_app(
        self,
        stream: "grpclib.server.Stream[QueryTokenMintedAssetWiseByAppRequest, QueryTokenMintedAssetWiseByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_token_minted_asset_wise_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_vault_count_by_app(
        self,
        stream: "grpclib.server.Stream[QueryVaultCountByAppRequest, QueryVaultCountByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_vault_count_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_vault_count_by_app_and_extended_pair(
        self,
        stream: "grpclib.server.Stream[QueryVaultCountByAppAndExtendedPairRequest, QueryVaultCountByAppAndExtendedPairResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_vault_count_by_app_and_extended_pair(request)
        await stream.send_message(response)

    async def __rpc_query_total_value_locked_by_app_and_extended_pair(
        self,
        stream: "grpclib.server.Stream[QueryTotalValueLockedByAppAndExtendedPairRequest, QueryTotalValueLockedByAppAndExtendedPairResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_total_value_locked_by_app_and_extended_pair(request)
        await stream.send_message(response)

    async def __rpc_query_extended_pair_i_ds_by_app(
        self,
        stream: "grpclib.server.Stream[QueryExtendedPairIDsByAppRequest, QueryExtendedPairIDsByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_extended_pair_i_ds_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_stable_vault_by_vault_id(
        self,
        stream: "grpclib.server.Stream[QueryStableVaultByVaultIdRequest, QueryStableVaultByVaultIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_stable_vault_by_vault_id(request)
        await stream.send_message(response)

    async def __rpc_query_stable_vault_by_app(
        self,
        stream: "grpclib.server.Stream[QueryStableVaultByAppRequest, QueryStableVaultByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_stable_vault_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_stable_vault_by_app_and_extended_pair(
        self,
        stream: "grpclib.server.Stream[QueryStableVaultByAppAndExtendedPairRequest, QueryStableVaultByAppAndExtendedPairResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_stable_vault_by_app_and_extended_pair(request)
        await stream.send_message(response)

    async def __rpc_query_extended_pair_vault_mapping_by_app_and_extended_pair(
        self,
        stream: "grpclib.server.Stream[QueryExtendedPairVaultMappingByAppAndExtendedPairRequest, QueryExtendedPairVaultMappingByAppAndExtendedPairResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = (
            await self.query_extended_pair_vault_mapping_by_app_and_extended_pair(
                request
            )
        )
        await stream.send_message(response)

    async def __rpc_query_extended_pair_vault_mapping_by_app(
        self,
        stream: "grpclib.server.Stream[QueryExtendedPairVaultMappingByAppRequest, QueryExtendedPairVaultMappingByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_extended_pair_vault_mapping_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_tvl_by_app_of_all_extended_pairs(
        self,
        stream: "grpclib.server.Stream[QueryTvlByAppOfAllExtendedPairsRequest, QueryTvlByAppOfAllExtendedPairsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_tvl_by_app_of_all_extended_pairs(request)
        await stream.send_message(response)

    async def __rpc_query_tvl_by_app(
        self,
        stream: "grpclib.server.Stream[QueryTvlByAppRequest, QueryTvlByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_tvl_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_user_my_position_by_app(
        self,
        stream: "grpclib.server.Stream[QueryUserMyPositionByAppRequest, QueryUserMyPositionByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_user_my_position_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_pairs_locked_and_minted_statistic_by_app(
        self,
        stream: "grpclib.server.Stream[QueryPairsLockedAndMintedStatisticByAppRequest, QueryPairsLockedAndMintedStatisticByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_pairs_locked_and_minted_statistic_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_all_stable_mint_vault_rewards(
        self,
        stream: "grpclib.server.Stream[QueryAllStableMintVaultRewardsRequest, QueryAllStableMintVaultRewardsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_stable_mint_vault_rewards(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.vault.v1beta1.Query/QueryVault": grpclib.const.Handler(
                self.__rpc_query_vault,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVaultRequest,
                QueryVaultResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryUserExtendedPairTotalData": grpclib.const.Handler(
                self.__rpc_query_user_extended_pair_total_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryUserExtendedPairTotalDataRequest,
                QueryUserExtendedPairTotalDataResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryVaultInfoByVaultID": grpclib.const.Handler(
                self.__rpc_query_vault_info_by_vault_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVaultInfoByVaultIdRequest,
                QueryVaultInfoByVaultIdResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryVaultInfoOfOwnerByApp": grpclib.const.Handler(
                self.__rpc_query_vault_info_of_owner_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVaultInfoOfOwnerByAppRequest,
                QueryVaultInfoOfOwnerByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryAllVaults": grpclib.const.Handler(
                self.__rpc_query_all_vaults,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllVaultsRequest,
                QueryAllVaultsResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryAllVaultsByApp": grpclib.const.Handler(
                self.__rpc_query_all_vaults_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllVaultsByAppRequest,
                QueryAllVaultsByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryAllVaultsByAppAndExtendedPair": grpclib.const.Handler(
                self.__rpc_query_all_vaults_by_app_and_extended_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllVaultsByAppAndExtendedPairRequest,
                QueryAllVaultsByAppAndExtendedPairResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryVaultIDOfOwnerByExtendedPairAndApp": grpclib.const.Handler(
                self.__rpc_query_vault_id_of_owner_by_extended_pair_and_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVaultIdOfOwnerByExtendedPairAndAppRequest,
                QueryVaultIdOfOwnerByExtendedPairAndAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryVaultIdsByAppInAllExtendedPairs": grpclib.const.Handler(
                self.__rpc_query_vault_ids_by_app_in_all_extended_pairs,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVaultIdsByAppInAllExtendedPairsRequest,
                QueryVaultIdsByAppInAllExtendedPairsResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryAllVaultIdsByAnOwner": grpclib.const.Handler(
                self.__rpc_query_all_vault_ids_by_an_owner,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllVaultIdsByAnOwnerRequest,
                QueryAllVaultIdsByAnOwnerResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryTokenMintedByAppAndExtendedPair": grpclib.const.Handler(
                self.__rpc_query_token_minted_by_app_and_extended_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTokenMintedByAppAndExtendedPairRequest,
                QueryTokenMintedByAppAndExtendedPairResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryTokenMintedAssetWiseByApp": grpclib.const.Handler(
                self.__rpc_query_token_minted_asset_wise_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTokenMintedAssetWiseByAppRequest,
                QueryTokenMintedAssetWiseByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryVaultCountByApp": grpclib.const.Handler(
                self.__rpc_query_vault_count_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVaultCountByAppRequest,
                QueryVaultCountByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryVaultCountByAppAndExtendedPair": grpclib.const.Handler(
                self.__rpc_query_vault_count_by_app_and_extended_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVaultCountByAppAndExtendedPairRequest,
                QueryVaultCountByAppAndExtendedPairResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryTotalValueLockedByAppAndExtendedPair": grpclib.const.Handler(
                self.__rpc_query_total_value_locked_by_app_and_extended_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTotalValueLockedByAppAndExtendedPairRequest,
                QueryTotalValueLockedByAppAndExtendedPairResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryExtendedPairIDsByApp": grpclib.const.Handler(
                self.__rpc_query_extended_pair_i_ds_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExtendedPairIDsByAppRequest,
                QueryExtendedPairIDsByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryStableVaultByVaultID": grpclib.const.Handler(
                self.__rpc_query_stable_vault_by_vault_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStableVaultByVaultIdRequest,
                QueryStableVaultByVaultIdResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryStableVaultByApp": grpclib.const.Handler(
                self.__rpc_query_stable_vault_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStableVaultByAppRequest,
                QueryStableVaultByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryStableVaultByAppAndExtendedPair": grpclib.const.Handler(
                self.__rpc_query_stable_vault_by_app_and_extended_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStableVaultByAppAndExtendedPairRequest,
                QueryStableVaultByAppAndExtendedPairResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByAppAndExtendedPair": grpclib.const.Handler(
                self.__rpc_query_extended_pair_vault_mapping_by_app_and_extended_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExtendedPairVaultMappingByAppAndExtendedPairRequest,
                QueryExtendedPairVaultMappingByAppAndExtendedPairResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryExtendedPairVaultMappingByApp": grpclib.const.Handler(
                self.__rpc_query_extended_pair_vault_mapping_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExtendedPairVaultMappingByAppRequest,
                QueryExtendedPairVaultMappingByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryTVLByAppOfAllExtendedPairs": grpclib.const.Handler(
                self.__rpc_query_tvl_by_app_of_all_extended_pairs,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTvlByAppOfAllExtendedPairsRequest,
                QueryTvlByAppOfAllExtendedPairsResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryTVLByApp": grpclib.const.Handler(
                self.__rpc_query_tvl_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTvlByAppRequest,
                QueryTvlByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryUserMyPositionByApp": grpclib.const.Handler(
                self.__rpc_query_user_my_position_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryUserMyPositionByAppRequest,
                QueryUserMyPositionByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryPairsLockedAndMintedStatisticByApp": grpclib.const.Handler(
                self.__rpc_query_pairs_locked_and_minted_statistic_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPairsLockedAndMintedStatisticByAppRequest,
                QueryPairsLockedAndMintedStatisticByAppResponse,
            ),
            "/comdex.vault.v1beta1.Query/QueryAllStableMintVaultRewards": grpclib.const.Handler(
                self.__rpc_query_all_stable_mint_vault_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllStableMintVaultRewardsRequest,
                QueryAllStableMintVaultRewardsResponse,
            ),
        }
