# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/tokenmint/v1beta1/genesis.proto, comdex/tokenmint/v1beta1/mint.proto, comdex/tokenmint/v1beta1/params.proto, comdex/tokenmint/v1beta1/query.proto, comdex/tokenmint/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgMintNewTokensRequest(betterproto.Message):
    """
    Will become governance proposal- will trigger token minting & sending
    """

    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    asset_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgMintNewTokensResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TokenMint(betterproto.Message):
    """app_vault_type_id will be the key for  the KVStore for this value."""

    app_id: int = betterproto.uint64_field(1)
    minted_tokens: List["MintedTokens"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MintedTokens(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    genesis_supply: str = betterproto.string_field(2)
    created_at: datetime = betterproto.message_field(3)
    current_supply: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class QueryAllTokenMintedForAllAppsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllTokenMintedForAllAppsResponse(betterproto.Message):
    token_mint: List["TokenMint"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTokenMintedByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTokenMintedByAppResponse(betterproto.Message):
    token_mint: "TokenMint" = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryTokenMintedByAppAndAssetRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryTokenMintedByAppAndAssetResponse(betterproto.Message):
    minted_tokens: "MintedTokens" = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    token_mint: List["TokenMint"] = betterproto.message_field(1)
    params: "Params" = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    async def msg_mint_new_tokens(
        self,
        msg_mint_new_tokens_request: "MsgMintNewTokensRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgMintNewTokensResponse":
        return await self._unary_unary(
            "/comdex.tokenmint.v1beta1.Msg/MsgMintNewTokens",
            msg_mint_new_tokens_request,
            MsgMintNewTokensResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def query_all_token_minted_for_all_apps(
        self,
        query_all_token_minted_for_all_apps_request: "QueryAllTokenMintedForAllAppsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllTokenMintedForAllAppsResponse":
        return await self._unary_unary(
            "/comdex.tokenmint.v1beta1.Query/QueryAllTokenMintedForAllApps",
            query_all_token_minted_for_all_apps_request,
            QueryAllTokenMintedForAllAppsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_token_minted_by_app(
        self,
        query_token_minted_by_app_request: "QueryTokenMintedByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTokenMintedByAppResponse":
        return await self._unary_unary(
            "/comdex.tokenmint.v1beta1.Query/QueryTokenMintedByApp",
            query_token_minted_by_app_request,
            QueryTokenMintedByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_token_minted_by_app_and_asset(
        self,
        query_token_minted_by_app_and_asset_request: "QueryTokenMintedByAppAndAssetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTokenMintedByAppAndAssetResponse":
        return await self._unary_unary(
            "/comdex.tokenmint.v1beta1.Query/QueryTokenMintedByAppAndAsset",
            query_token_minted_by_app_and_asset_request,
            QueryTokenMintedByAppAndAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def msg_mint_new_tokens(
        self, msg_mint_new_tokens_request: "MsgMintNewTokensRequest"
    ) -> "MsgMintNewTokensResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_msg_mint_new_tokens(
        self,
        stream: "grpclib.server.Stream[MsgMintNewTokensRequest, MsgMintNewTokensResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_mint_new_tokens(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.tokenmint.v1beta1.Msg/MsgMintNewTokens": grpclib.const.Handler(
                self.__rpc_msg_mint_new_tokens,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgMintNewTokensRequest,
                MsgMintNewTokensResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def query_all_token_minted_for_all_apps(
        self,
        query_all_token_minted_for_all_apps_request: "QueryAllTokenMintedForAllAppsRequest",
    ) -> "QueryAllTokenMintedForAllAppsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_token_minted_by_app(
        self, query_token_minted_by_app_request: "QueryTokenMintedByAppRequest"
    ) -> "QueryTokenMintedByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_token_minted_by_app_and_asset(
        self,
        query_token_minted_by_app_and_asset_request: "QueryTokenMintedByAppAndAssetRequest",
    ) -> "QueryTokenMintedByAppAndAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_all_token_minted_for_all_apps(
        self,
        stream: "grpclib.server.Stream[QueryAllTokenMintedForAllAppsRequest, QueryAllTokenMintedForAllAppsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_token_minted_for_all_apps(request)
        await stream.send_message(response)

    async def __rpc_query_token_minted_by_app(
        self,
        stream: "grpclib.server.Stream[QueryTokenMintedByAppRequest, QueryTokenMintedByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_token_minted_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_token_minted_by_app_and_asset(
        self,
        stream: "grpclib.server.Stream[QueryTokenMintedByAppAndAssetRequest, QueryTokenMintedByAppAndAssetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_token_minted_by_app_and_asset(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.tokenmint.v1beta1.Query/QueryAllTokenMintedForAllApps": grpclib.const.Handler(
                self.__rpc_query_all_token_minted_for_all_apps,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllTokenMintedForAllAppsRequest,
                QueryAllTokenMintedForAllAppsResponse,
            ),
            "/comdex.tokenmint.v1beta1.Query/QueryTokenMintedByApp": grpclib.const.Handler(
                self.__rpc_query_token_minted_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTokenMintedByAppRequest,
                QueryTokenMintedByAppResponse,
            ),
            "/comdex.tokenmint.v1beta1.Query/QueryTokenMintedByAppAndAsset": grpclib.const.Handler(
                self.__rpc_query_token_minted_by_app_and_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTokenMintedByAppAndAssetRequest,
                QueryTokenMintedByAppAndAssetResponse,
            ),
        }
