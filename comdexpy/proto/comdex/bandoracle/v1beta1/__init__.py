# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/bandoracle/v1beta1/fetch_price.proto, comdex/bandoracle/v1beta1/genesis.proto, comdex/bandoracle/v1beta1/gov.proto, comdex/bandoracle/v1beta1/packet.proto, comdex/bandoracle/v1beta1/params.proto, comdex/bandoracle/v1beta1/query.proto, comdex/bandoracle/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class FetchPriceCallData(betterproto.Message):
    symbols: List[str] = betterproto.string_field(1)
    multiplier: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class FetchPriceResult(betterproto.Message):
    rates: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class Market(betterproto.Message):
    symbol: str = betterproto.string_field(1)
    script_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class DiscardData(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    discard_bool: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MsgFetchPriceData(betterproto.Message):
    creator: str = betterproto.string_field(1)
    oracle_script_id: int = betterproto.uint64_field(2)
    source_channel: str = betterproto.string_field(3)
    calldata: "FetchPriceCallData" = betterproto.message_field(4)
    ask_count: int = betterproto.uint64_field(5)
    min_count: int = betterproto.uint64_field(6)
    fee_limit: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(7)
    request_key: str = betterproto.string_field(8)
    prepare_gas: int = betterproto.uint64_field(9)
    execute_gas: int = betterproto.uint64_field(10)
    client_id: str = betterproto.string_field(11)
    twa_batch_size: int = betterproto.uint64_field(12)
    accepted_height_diff: int = betterproto.int64_field(13)


@dataclass(eq=False, repr=False)
class MsgFetchPriceDataResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FetchPriceProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    fetch_price: "MsgFetchPriceData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BandoraclePacketData(betterproto.Message):
    no_data: "NoData" = betterproto.message_field(1, group="packet")


@dataclass(eq=False, repr=False)
class NoData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryFetchPriceRequest(betterproto.Message):
    request_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryFetchPriceResponse(betterproto.Message):
    result: "FetchPriceResult" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLastFetchPriceIdRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryLastFetchPriceIdResponse(betterproto.Message):
    request_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryFetchPriceDataRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryFetchPriceDataResponse(betterproto.Message):
    msg_fetch_price_data: "MsgFetchPriceData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDiscardDataRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryDiscardDataResponse(betterproto.Message):
    discard_data: "DiscardData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    params: "Params" = betterproto.message_field(1)
    port_id: str = betterproto.string_field(2)
    flag: bool = betterproto.bool_field(3)


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/comdex.bandoracle.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_price_result(
        self,
        query_fetch_price_request: "QueryFetchPriceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFetchPriceResponse":
        return await self._unary_unary(
            "/comdex.bandoracle.v1beta1.Query/FetchPriceResult",
            query_fetch_price_request,
            QueryFetchPriceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def last_fetch_price_id(
        self,
        query_last_fetch_price_id_request: "QueryLastFetchPriceIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLastFetchPriceIdResponse":
        return await self._unary_unary(
            "/comdex.bandoracle.v1beta1.Query/LastFetchPriceID",
            query_last_fetch_price_id_request,
            QueryLastFetchPriceIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_price_data(
        self,
        query_fetch_price_data_request: "QueryFetchPriceDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFetchPriceDataResponse":
        return await self._unary_unary(
            "/comdex.bandoracle.v1beta1.Query/FetchPriceData",
            query_fetch_price_data_request,
            QueryFetchPriceDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def discard_data(
        self,
        query_discard_data_request: "QueryDiscardDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDiscardDataResponse":
        return await self._unary_unary(
            "/comdex.bandoracle.v1beta1.Query/DiscardData",
            query_discard_data_request,
            QueryDiscardDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_price_result(
        self, query_fetch_price_request: "QueryFetchPriceRequest"
    ) -> "QueryFetchPriceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def last_fetch_price_id(
        self, query_last_fetch_price_id_request: "QueryLastFetchPriceIdRequest"
    ) -> "QueryLastFetchPriceIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_price_data(
        self, query_fetch_price_data_request: "QueryFetchPriceDataRequest"
    ) -> "QueryFetchPriceDataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def discard_data(
        self, query_discard_data_request: "QueryDiscardDataRequest"
    ) -> "QueryDiscardDataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_fetch_price_result(
        self,
        stream: "grpclib.server.Stream[QueryFetchPriceRequest, QueryFetchPriceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_price_result(request)
        await stream.send_message(response)

    async def __rpc_last_fetch_price_id(
        self,
        stream: "grpclib.server.Stream[QueryLastFetchPriceIdRequest, QueryLastFetchPriceIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.last_fetch_price_id(request)
        await stream.send_message(response)

    async def __rpc_fetch_price_data(
        self,
        stream: "grpclib.server.Stream[QueryFetchPriceDataRequest, QueryFetchPriceDataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_price_data(request)
        await stream.send_message(response)

    async def __rpc_discard_data(
        self,
        stream: "grpclib.server.Stream[QueryDiscardDataRequest, QueryDiscardDataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.discard_data(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.bandoracle.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/comdex.bandoracle.v1beta1.Query/FetchPriceResult": grpclib.const.Handler(
                self.__rpc_fetch_price_result,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFetchPriceRequest,
                QueryFetchPriceResponse,
            ),
            "/comdex.bandoracle.v1beta1.Query/LastFetchPriceID": grpclib.const.Handler(
                self.__rpc_last_fetch_price_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLastFetchPriceIdRequest,
                QueryLastFetchPriceIdResponse,
            ),
            "/comdex.bandoracle.v1beta1.Query/FetchPriceData": grpclib.const.Handler(
                self.__rpc_fetch_price_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFetchPriceDataRequest,
                QueryFetchPriceDataResponse,
            ),
            "/comdex.bandoracle.v1beta1.Query/DiscardData": grpclib.const.Handler(
                self.__rpc_discard_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDiscardDataRequest,
                QueryDiscardDataResponse,
            ),
        }
