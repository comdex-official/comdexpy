# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/liquidity/v1beta1/genesis.proto, comdex/liquidity/v1beta1/gov.proto, comdex/liquidity/v1beta1/liquidity.proto, comdex/liquidity/v1beta1/params.proto, comdex/liquidity/v1beta1/query.proto, comdex/liquidity/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta
)

from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__ 


assert ___cosmos_base_v1_beta1__
assert ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class PoolType(betterproto.Enum):
    """PoolType enumerates pool types."""

    POOL_TYPE_UNSPECIFIED = 0
    """POOL_TYPE_UNSPECIFIED specifies unknown pool type"""

    POOL_TYPE_BASIC = 1
    """POOL_TYPE_BASIC specifies the basic pool type"""

    POOL_TYPE_RANGED = 2
    """POOL_TYPE_RANGED specifies the ranged pool type"""


class OrderType(betterproto.Enum):
    """OrderType enumerates order types."""

    ORDER_TYPE_UNSPECIFIED = 0
    """ORDER_TYPE_UNSPECIFIED specifies unknown order type."""

    ORDER_TYPE_LIMIT = 1
    """ORDER_TYPE_LIMIT specifies limit order type."""

    ORDER_TYPE_MARKET = 2
    """ORDER_TYPE_MARKET specifies market order type."""

    ORDER_TYPE_MM = 3
    """ORDER_TYPE_MM specifies MM(market making) order type."""


class OrderDirection(betterproto.Enum):
    """OrderDirection enumerates order directions."""

    ORDER_DIRECTION_UNSPECIFIED = 0
    """ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction"""

    ORDER_DIRECTION_BUY = 1
    """
    ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order
    direction
    """

    ORDER_DIRECTION_SELL = 2
    """
    ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order
    direction
    """


class RequestStatus(betterproto.Enum):
    """RequestStatus enumerates request statuses."""

    REQUEST_STATUS_UNSPECIFIED = 0
    """REQUEST_STATUS_UNSPECIFIED specifies unknown request status"""

    REQUEST_STATUS_NOT_EXECUTED = 1
    """
    REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
    """

    REQUEST_STATUS_SUCCEEDED = 2
    """REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded"""

    REQUEST_STATUS_FAILED = 3
    """REQUEST_STATUS_FAILED indicates the request is failed"""


class OrderStatus(betterproto.Enum):
    """OrderStatus enumerates order statuses."""

    ORDER_STATUS_UNSPECIFIED = 0
    """ORDER_STATUS_UNSPECIFIED specifies unknown order status"""

    ORDER_STATUS_NOT_EXECUTED = 1
    """
    ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
    """

    ORDER_STATUS_NOT_MATCHED = 2
    """
    ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no
    match
    """

    ORDER_STATUS_PARTIALLY_MATCHED = 3
    """
    ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially
    matched
    """

    ORDER_STATUS_COMPLETED = 4
    """
    ORDER_STATUS_COMPLETED indicates the order has been fully matched and
    completed
    """

    ORDER_STATUS_CANCELED = 5
    """ORDER_STATUS_CANCELED indicates the order has been canceled"""

    ORDER_STATUS_EXPIRED = 6
    """ORDER_STATUS_EXPIRED indicates the order has been expired"""


class AddressType(betterproto.Enum):
    """AddressType enumerates the available types of a address."""

    ADDRESS_TYPE_32_BYTES = 0
    """the 32 bytes length address type of ADR 028."""

    ADDRESS_TYPE_20_BYTES = 1
    """the default 20 bytes length address type."""


@dataclass(eq=False, repr=False)
class Pair(betterproto.Message):
    """Pair defines a coin pair."""

    id: int = betterproto.uint64_field(1)
    base_coin_denom: str = betterproto.string_field(2)
    quote_coin_denom: str = betterproto.string_field(3)
    escrow_address: str = betterproto.string_field(4)
    last_order_id: int = betterproto.uint64_field(5)
    last_price: str = betterproto.string_field(6)
    current_batch_id: int = betterproto.uint64_field(7)
    swap_fee_collector_address: str = betterproto.string_field(8)
    app_id: int = betterproto.uint64_field(9)


@dataclass(eq=False, repr=False)
class Pool(betterproto.Message):
    """Pool defines a basic liquidity pool with no min-price and max-price."""

    id: int = betterproto.uint64_field(1)
    pair_id: int = betterproto.uint64_field(2)
    reserve_address: str = betterproto.string_field(3)
    pool_coin_denom: str = betterproto.string_field(4)
    last_deposit_request_id: int = betterproto.uint64_field(5)
    last_withdraw_request_id: int = betterproto.uint64_field(6)
    disabled: bool = betterproto.bool_field(7)
    app_id: int = betterproto.uint64_field(8)
    type: "PoolType" = betterproto.enum_field(9)
    creator: str = betterproto.string_field(10)
    min_price: str = betterproto.string_field(11)
    max_price: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class DepositRequest(betterproto.Message):
    """DepositRequest defines a deposit request."""

    id: int = betterproto.uint64_field(1)
    """id specifies the id for the request"""

    pool_id: int = betterproto.uint64_field(2)
    """pool_id specifies the pool id"""

    msg_height: int = betterproto.int64_field(3)
    """
    msg_height specifies the block height when the request is stored for the
    batch execution
    """

    depositor: str = betterproto.string_field(4)
    """
    depositor specifies the bech32-encoded address that makes a deposit to the
    pool
    """

    deposit_coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(5)
    """deposit_coins specifies the amount of coins to deposit."""

    accepted_coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(
        6
    )
    """accepted_coins specifies the amount of coins that are accepted."""

    minted_pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(7)
    status: "RequestStatus" = betterproto.enum_field(8)
    app_id: int = betterproto.uint64_field(9)


@dataclass(eq=False, repr=False)
class WithdrawRequest(betterproto.Message):
    """WithdrawRequest defines a withdraw request."""

    id: int = betterproto.uint64_field(1)
    """id specifies the id for the request"""

    pool_id: int = betterproto.uint64_field(2)
    """pool_id specifies the pool id"""

    msg_height: int = betterproto.int64_field(3)
    """
    msg_height specifies the block height when the request is stored for the
    batch execution
    """

    withdrawer: str = betterproto.string_field(4)
    """
    withdrawer specifies the bech32-encoded address that withdraws pool coin
    from the pool
    """

    pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(5)
    """
    pool_coin specifies the pool coin that is a proof of liquidity provider for
    the pool
    """

    withdrawn_coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(
        6
    )
    """withdrawn_coins specifies the amount of coins that are withdrawn."""

    status: "RequestStatus" = betterproto.enum_field(7)
    app_id: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class Order(betterproto.Message):
    """Order defines an order."""

    id: int = betterproto.uint64_field(1)
    """id specifies the id for the request"""

    pair_id: int = betterproto.uint64_field(2)
    """pair_id specifies the pair id"""

    msg_height: int = betterproto.int64_field(3)
    """
    msg_height specifies the block height when the request is stored for the
    batch execution
    """

    orderer: str = betterproto.string_field(4)
    """orderer specifies the bech32-encoded address that makes an order"""

    direction: "OrderDirection" = betterproto.enum_field(5)
    """direction specifies the order direction; either buy or sell"""

    offer_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(6)
    remaining_offer_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(
        7
    )
    """remaining_offer_coin specifies the remaining offer coin"""

    received_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(8)
    """received_coin specifies the received coin after the swap"""

    price: str = betterproto.string_field(9)
    """price specifies the price that an orderer is willing to swap"""

    amount: str = betterproto.string_field(10)
    open_amount: str = betterproto.string_field(11)
    batch_id: int = betterproto.uint64_field(12)
    """batch_id specifies the pair's batch id when the request is stored"""

    expire_at: datetime = betterproto.message_field(13)
    status: "OrderStatus" = betterproto.enum_field(14)
    app_id: int = betterproto.uint64_field(15)
    type: "OrderType" = betterproto.enum_field(16)
    """type specifies the typo of the order"""


@dataclass(eq=False, repr=False)
class MmOrderIndex(betterproto.Message):
    """
    MMOrderIndex defines an index type to quickly find market making orders
    from an orderer.
    """

    orderer: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    pair_id: int = betterproto.uint64_field(3)
    order_ids: List[int] = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class ActiveFarmer(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)
    farmer: str = betterproto.string_field(3)
    farmed_pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class QueuedCoin(betterproto.Message):
    farmed_pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    created_at: datetime = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueuedFarmer(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)
    farmer: str = betterproto.string_field(3)
    queud_coins: List["QueuedCoin"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MsgCreatePair(betterproto.Message):
    """MsgCreatePair defines an SDK message for creating a pair."""

    creator: str = betterproto.string_field(1)
    """
    creator specifies the bech32-encoded address that is the pair creator.
    """

    base_coin_denom: str = betterproto.string_field(2)
    """base_coin_denom specifies the base coin denom of the pair."""

    quote_coin_denom: str = betterproto.string_field(3)
    """quote_coin_denom specifies the quote coin denom of the pair."""

    app_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgCreatePairResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCreatePool(betterproto.Message):
    """MsgCreatePool defines an SDK message for creating a pool."""

    creator: str = betterproto.string_field(1)
    """
    creator specifies the bech32-encoded address that is the pool creator
    """

    pair_id: int = betterproto.uint64_field(2)
    """pair_id specifies the pair id."""

    deposit_coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)
    """deposit_coins specifies the amount of coins to deposit."""

    app_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgCreatePoolResponse(betterproto.Message):
    """MsgCreatePoolResponse defines the Msg/CreatePool response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgCreateRangedPool(betterproto.Message):
    """
    MsgCreateRangedPool defines an SDK message for creating a ranged pool.
    """

    creator: str = betterproto.string_field(1)
    """
    creator specifies the bech32-encoded address that is the pool creator
    """

    app_id: int = betterproto.uint64_field(2)
    pair_id: int = betterproto.uint64_field(3)
    """pair_id specifies the pair id."""

    deposit_coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(4)
    """deposit_coins specifies the amount of coins to deposit."""

    min_price: str = betterproto.string_field(5)
    max_price: str = betterproto.string_field(6)
    initial_price: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class MsgCreateRangedPoolResponse(betterproto.Message):
    """
    MsgCreateRangedPoolResponse defines the Msg/CreateRangedPool response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgDeposit(betterproto.Message):
    """MsgDeposit defines an SDK message for depositing coins to the pool"""

    depositor: str = betterproto.string_field(1)
    """
    depositor specifies the bech32-encoded address that makes a deposit to the
    pool
    """

    pool_id: int = betterproto.uint64_field(2)
    """pool_id specifies the pool id"""

    deposit_coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)
    """deposit_coins specifies the amount of coins to deposit."""

    app_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgDepositResponse(betterproto.Message):
    """MsgDepositResponse defines the Msg/Deposit response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgWithdraw(betterproto.Message):
    """
    MsgWithdraw defines an SDK message for withdrawing pool coin from the pool
    """

    withdrawer: str = betterproto.string_field(1)
    """
    withdrawer specifies the bech32-encoded address that withdraws pool coin
    from the pool
    """

    pool_id: int = betterproto.uint64_field(2)
    """pool_id specifies the pool id"""

    pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    """
    pool_coin specifies the pool coin that is a proof of liquidity provider for
    the pool
    """

    app_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgWithdrawResponse(betterproto.Message):
    """MsgWithdrawResponse defines the Msg/Withdraw response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgLimitOrder(betterproto.Message):
    """MsgLimitOrder defines an SDK message for making a limit order"""

    orderer: str = betterproto.string_field(1)
    """orderer specifies the bech32-encoded address that makes an order"""

    pair_id: int = betterproto.uint64_field(2)
    """pair_id specifies the pair id"""

    direction: "OrderDirection" = betterproto.enum_field(3)
    """direction specifies the order direction(buy or sell)"""

    offer_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    """offer_coin specifies the amount of coin the orderer offers"""

    demand_coin_denom: str = betterproto.string_field(5)
    """demand_coin_denom specifies the demand coin denom"""

    price: str = betterproto.string_field(6)
    """price specifies the order price"""

    amount: str = betterproto.string_field(7)
    """
    amount specifies the amount of base coin the orderer wants to buy or sell
    """

    order_lifespan: timedelta = betterproto.message_field(8)
    """order_lifespan specifies the order lifespan"""

    app_id: int = betterproto.uint64_field(9)


@dataclass(eq=False, repr=False)
class MsgLimitOrderResponse(betterproto.Message):
    """MsgLimitOrderResponse defines the Msg/LimitOrder response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgMarketOrder(betterproto.Message):
    """MsgMarketOrder defines an SDK message for making a market order"""

    orderer: str = betterproto.string_field(1)
    """orderer specifies the bech32-encoded address that makes an order"""

    pair_id: int = betterproto.uint64_field(2)
    """pair_id specifies the pair id"""

    direction: "OrderDirection" = betterproto.enum_field(3)
    """direction specifies the order direction(buy or sell)"""

    offer_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    """offer_coin specifies the amount of coin the orderer offers"""

    demand_coin_denom: str = betterproto.string_field(5)
    """demand_coin_denom specifies the demand coin denom"""

    amount: str = betterproto.string_field(6)
    """
    amount specifies the amount of base coin the orderer wants to buy or sell
    """

    order_lifespan: timedelta = betterproto.message_field(7)
    """order_lifespan specifies the order lifespan"""

    app_id: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class MsgMarketOrderResponse(betterproto.Message):
    """MsgMarketOrderResponse defines the Msg/MarketOrder response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgMmOrder(betterproto.Message):
    """
    MsgMMOrder defines an SDK message for making a MM(market making) order.
    """

    orderer: str = betterproto.string_field(1)
    """orderer specifies the bech32-encoded address that makes an order"""

    app_id: int = betterproto.uint64_field(2)
    pair_id: int = betterproto.uint64_field(3)
    """pair_id specifies the pair id"""

    max_sell_price: str = betterproto.string_field(4)
    """max_sell_price specifies the maximum sell price"""

    min_sell_price: str = betterproto.string_field(5)
    """min_sell_price specifies the minimum sell price"""

    sell_amount: str = betterproto.string_field(6)
    """sell_amount specifies the total amount of base coin of sell orders"""

    max_buy_price: str = betterproto.string_field(7)
    """max_buy_price specifies the maximum buy price"""

    min_buy_price: str = betterproto.string_field(8)
    """min_buy_price specifies the minimum buy price"""

    buy_amount: str = betterproto.string_field(9)
    """buy_amount specifies the total amount of base coin of buy orders"""

    order_lifespan: timedelta = betterproto.message_field(10)
    """order_lifespan specifies the order lifespan"""


@dataclass(eq=False, repr=False)
class MsgMmOrderResponse(betterproto.Message):
    """MsgMMOrderResponse defines the Msg/MMOrder response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgCancelOrder(betterproto.Message):
    """MsgCancelOrder defines an SDK message for cancelling an order"""

    orderer: str = betterproto.string_field(1)
    """orderer specifies the bech32-encoded address that makes an order"""

    pair_id: int = betterproto.uint64_field(2)
    """pair_id specifies the pair id"""

    order_id: int = betterproto.uint64_field(3)
    """order_id specifies the order id"""

    app_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgCancelOrderResponse(betterproto.Message):
    """MsgCancelOrderResponse defines the Msg/CancelOrder response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgCancelAllOrders(betterproto.Message):
    """MsgCancelAllOrders defines an SDK message for cancelling all orders"""

    orderer: str = betterproto.string_field(1)
    """orderer specifies the bech32-encoded address that makes an order"""

    pair_ids: List[int] = betterproto.uint64_field(2)
    """pair_ids specifies pair ids to cancel orders"""

    app_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgCancelAllOrdersResponse(betterproto.Message):
    """
    MsgCancelAllOrdersResponse defines the Msg/CancelAllOrders response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgCancelMmOrder(betterproto.Message):
    """
    MsgCancelMMOrder defines an SDK message for cancelling all market making
    orders
    """

    orderer: str = betterproto.string_field(1)
    """orderer specifies the bech32-encoded address that makes an order"""

    app_id: int = betterproto.uint64_field(2)
    pair_id: int = betterproto.uint64_field(3)
    """pair_id specifies the pair id to cancel orders"""


@dataclass(eq=False, repr=False)
class MsgCancelMmOrderResponse(betterproto.Message):
    """
    MsgCancelMMOrderResponse defines the Msg/CancelMMOrder response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgFarm(betterproto.Message):
    """
    MsgFarm defines a SDK message for farming coins (i.e without bonding) for
    incentivisation.
    """

    app_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)
    farmer: str = betterproto.string_field(3)
    farming_pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MsgFarmResponse(betterproto.Message):
    """MsgFarmResponse  defines the Msg/MsgFarmResponse response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgUnfarm(betterproto.Message):
    """
    MsgUnfarm defines a SDK message for performing unfarm of the farmed coins
    """

    app_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)
    farmer: str = betterproto.string_field(3)
    unfarming_pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MsgUnfarmResponse(betterproto.Message):
    """MsgUnfarmResponse defines the Msg/MsgUnfarmResponse response type."""

    pass


@dataclass(eq=False, repr=False)
class UpdateGenericParamsProposal(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    keys: List[str] = betterproto.string_field(2)
    values: List[str] = betterproto.string_field(3)
    title: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CreateNewLiquidityPairProposal(betterproto.Message):
    from_: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    base_coin_denom: str = betterproto.string_field(3)
    quote_coin_denom: str = betterproto.string_field(4)
    title: str = betterproto.string_field(5)
    description: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the liquidity module."""

    pass


@dataclass(eq=False, repr=False)
class GenericParams(betterproto.Message):
    """Params defines the parameters for the liquidity module."""

    batch_size: int = betterproto.uint64_field(1)
    tick_precision: int = betterproto.uint64_field(2)
    fee_collector_address: str = betterproto.string_field(3)
    dust_collector_address: str = betterproto.string_field(4)
    min_initial_pool_coin_supply: str = betterproto.string_field(5)
    pair_creation_fee: List[
        "___cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(6)
    pool_creation_fee: List[
        "___cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(7)
    min_initial_deposit_amount: str = betterproto.string_field(8)
    max_price_limit_ratio: str = betterproto.string_field(9)
    max_order_lifespan: timedelta = betterproto.message_field(10)
    swap_fee_rate: str = betterproto.string_field(11)
    withdraw_fee_rate: str = betterproto.string_field(12)
    deposit_extra_gas: int = betterproto.uint64_field(13)
    withdraw_extra_gas: int = betterproto.uint64_field(14)
    order_extra_gas: int = betterproto.uint64_field(15)
    swap_fee_distr_denom: str = betterproto.string_field(16)
    swap_fee_burn_rate: str = betterproto.string_field(17)
    app_id: int = betterproto.uint64_field(18)
    max_num_market_making_order_ticks: int = betterproto.uint64_field(19)
    max_num_active_pools_per_pair: int = betterproto.uint64_field(20)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGenericParamsRequest(betterproto.Message):
    """
    QueryGenericParamsRequest is request type for the Query/GenericParams RPC
    method.
    """

    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryGenericParamsResponse(betterproto.Message):
    """
    QueryGenericParamsResponse is response type for the Query/GenericParams RPC
    method.
    """

    params: "GenericParams" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryPoolsRequest(betterproto.Message):
    """QueryPoolsRequest is request type for the Query/Pools RPC method."""

    pair_id: int = betterproto.uint64_field(1)
    disabled: str = betterproto.string_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )
    app_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class QueryPoolsResponse(betterproto.Message):
    """QueryPoolsResponse is response type for the Query/Pools RPC method."""

    pools: List["PoolResponse"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryPoolRequest(betterproto.Message):
    """QueryPoolRequest is request type for the Query/Pool RPC method."""

    pool_id: int = betterproto.uint64_field(1)
    app_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryPoolResponse(betterproto.Message):
    """QueryPoolResponse is response type for the Query/Pool RPC method."""

    pool: "PoolResponse" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryPoolByReserveAddressRequest(betterproto.Message):
    """
    QueryPoolByReserveAddressRequest is request type for the
    Query/PoolByReserveAddress RPC method.
    """

    reserve_address: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryPoolByPoolCoinDenomRequest(betterproto.Message):
    """
    QueryPoolByPoolCoinDenomRequest is request type for the
    Query/PoolByPoolCoinDenom RPC method.
    """

    pool_coin_denom: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryPairsRequest(betterproto.Message):
    """QueryPairsRequest is request type for the Query/Pairs RPC method."""

    denoms: List[str] = betterproto.string_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    app_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryPairsResponse(betterproto.Message):
    """QueryPairsResponse is response type for the Query/Pairs RPC method."""

    pairs: List["Pair"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryPairRequest(betterproto.Message):
    """QueryPairRequest is request type for the Query/Pair RPC method."""

    pair_id: int = betterproto.uint64_field(1)
    app_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryPairResponse(betterproto.Message):
    """QueryPairResponse is response type for the Query/Pair RPC method."""

    pair: "Pair" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDepositRequestsRequest(betterproto.Message):
    """
    QueryDepositRequestsRequest is request type for the Query/DepositRequests
    RPC method.
    """

    pool_id: int = betterproto.uint64_field(1)
    app_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryDepositRequestsResponse(betterproto.Message):
    """
    QueryDepositRequestsResponse is response type for the Query/DepositRequests
    RPC method.
    """

    deposit_requests: List["DepositRequest"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryDepositRequestRequest(betterproto.Message):
    """
    QueryDepositRequestRequest is request type for the Query/DepositRequest RPC
    method.
    """

    pool_id: int = betterproto.uint64_field(1)
    id: int = betterproto.uint64_field(2)
    app_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryDepositRequestResponse(betterproto.Message):
    """
    QueryDepositRequestResponse is response type for the Query/DepositRequest
    RPC method.
    """

    deposit_request: "DepositRequest" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryWithdrawRequestsRequest(betterproto.Message):
    """
    QueryWithdrawRequestsRequest is request type for the Query/WithdrawRequests
    RPC method.
    """

    pool_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    app_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryWithdrawRequestsResponse(betterproto.Message):
    """
    QueryWithdrawRequestsResponse is response type for the
    Query/WithdrawRequests RPC method.
    """

    withdraw_requests: List["WithdrawRequest"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryWithdrawRequestRequest(betterproto.Message):
    """
    QueryWithdrawRequestRequest is request type for the Query/WithdrawRequest
    RPC method.
    """

    pool_id: int = betterproto.uint64_field(1)
    id: int = betterproto.uint64_field(2)
    app_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryWithdrawRequestResponse(betterproto.Message):
    """
    QueryWithdrawRequestResponse is response type for the Query/WithdrawRequest
    RPC method.
    """

    withdraw_request: "WithdrawRequest" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOrdersRequest(betterproto.Message):
    """QueryOrdersRequest is request type for the Query/Orders RPC method."""

    pair_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    app_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryOrdersResponse(betterproto.Message):
    """
    QueryOrdersResponse is response type for the Query/Orders RPC method.
    """

    orders: List["Order"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryOrderRequest(betterproto.Message):
    """QueryOrderRequest is request type for the Query/Order RPC method."""

    pair_id: int = betterproto.uint64_field(1)
    id: int = betterproto.uint64_field(2)
    app_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryOrderResponse(betterproto.Message):
    """QueryOrderResponse is response type for the Query/Order RPC method."""

    order: "Order" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOrdersByOrdererRequest(betterproto.Message):
    """
    QueryOrdersByOrdererRequest is request type for the Query/OrdersByOrderer
    RPC method.
    """

    orderer: str = betterproto.string_field(1)
    pair_id: int = betterproto.uint64_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )
    app_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class PoolResponse(betterproto.Message):
    """PoolResponse defines a custom pool response message."""

    id: int = betterproto.uint64_field(1)
    pair_id: int = betterproto.uint64_field(2)
    reserve_address: str = betterproto.string_field(3)
    pool_coin_denom: str = betterproto.string_field(4)
    balances: "PoolBalances" = betterproto.message_field(5)
    last_deposit_request_id: int = betterproto.uint64_field(6)
    last_withdraw_request_id: int = betterproto.uint64_field(7)
    app_id: int = betterproto.uint64_field(8)
    type: "PoolType" = betterproto.enum_field(9)
    creator: str = betterproto.string_field(10)
    pool_coin_supply: str = betterproto.string_field(11)
    min_price: str = betterproto.string_field(12)
    max_price: str = betterproto.string_field(13)
    price: str = betterproto.string_field(14)
    disabled: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class PoolBalances(betterproto.Message):
    base_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    quote_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryFarmerRequest(betterproto.Message):
    """QueryFarmerRequest is request type for the Query/Farmer RPC method."""

    app_id: int = betterproto.uint64_field(1)
    pool_id: int = betterproto.uint64_field(2)
    farmer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueuedPoolCoin(betterproto.Message):
    pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    deque_at: datetime = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryFarmerResponse(betterproto.Message):
    """
    QueryFarmerResponse is response type for the Query/Farmer RPC method.
    """

    active_pool_coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    queued_pool_coin: List["QueuedPoolCoin"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryDeserializePoolCoinRequest(betterproto.Message):
    """
    QueryDeserializePoolCoinRequest is request type for the
    Query/DeserializePoolCoin RPC method.
    """

    pool_id: int = betterproto.uint64_field(1)
    pool_coin_amount: int = betterproto.uint64_field(2)
    app_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryDeserializePoolCoinResponse(betterproto.Message):
    """
    QueryDeserializePoolCoinResponse is response type for the
    Query/DeserializePoolCoin RPC method.
    """

    coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryPoolsIncentivesRequest(betterproto.Message):
    """
    QueryPoolsIncentivesRequest is request type for the Query/PoolsIncentives
    RPC method.
    """

    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class PoolIncentive(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    master_pool: bool = betterproto.bool_field(2)
    child_pool_ids: List[int] = betterproto.uint64_field(3)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    distributed_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(5)
    total_epochs: int = betterproto.uint64_field(6)
    filled_epochs: int = betterproto.uint64_field(7)
    epoch_duration: timedelta = betterproto.message_field(8)
    next_distribution: datetime = betterproto.message_field(9)
    is_swap_fee: bool = betterproto.bool_field(10)
    app_id: int = betterproto.uint64_field(11)


@dataclass(eq=False, repr=False)
class QueryPoolIncentivesResponse(betterproto.Message):
    """
    QueryPoolIncentivesResponse is response type for the Query/PoolsIncentives
    RPC method.
    """

    pool_incentives: List["PoolIncentive"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryFarmedPoolCoinRequest(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    app_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryFarmedPoolCoinResponse(betterproto.Message):
    coin: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOrderBooksRequest(betterproto.Message):
    """
    QueryOrderBooksRequest is request type for the Query/OrderBooks RPC method.
    """

    app_id: int = betterproto.uint64_field(1)
    pair_ids: List[int] = betterproto.uint64_field(2)
    price_unit_powers: List[int] = betterproto.uint32_field(3)
    num_ticks: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class QueryOrderBooksResponse(betterproto.Message):
    """
    QueryOrderBooksResponse is response type for Query/OrderBooks RPC method.
    """

    pairs: List["OrderBookPairResponse"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class OrderBookPairResponse(betterproto.Message):
    pair_id: int = betterproto.uint64_field(1)
    base_price: str = betterproto.string_field(2)
    order_books: List["OrderBookResponse"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class OrderBookResponse(betterproto.Message):
    price_unit: str = betterproto.string_field(1)
    sells: List["OrderBookTickResponse"] = betterproto.message_field(2)
    buys: List["OrderBookTickResponse"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class OrderBookTickResponse(betterproto.Message):
    price: str = betterproto.string_field(1)
    user_order_amount: str = betterproto.string_field(2)
    pool_order_amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class TotalActiveAndQueuedPoolCoins(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    total_active_pool_coin: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(2)
    )
    total_queued_pool_coin: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryAllFarmedPoolCoinsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryAllFarmedPoolCoinsResponse(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    total_active_and_queued_coins: List[
        "TotalActiveAndQueuedPoolCoins"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AppGenesisState(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    generic_params: "GenericParams" = betterproto.message_field(2)
    last_pair_id: int = betterproto.uint64_field(3)
    last_pool_id: int = betterproto.uint64_field(4)
    pairs: List["Pair"] = betterproto.message_field(5)
    pools: List["Pool"] = betterproto.message_field(6)
    deposit_requests: List["DepositRequest"] = betterproto.message_field(7)
    withdraw_requests: List["WithdrawRequest"] = betterproto.message_field(8)
    orders: List["Order"] = betterproto.message_field(9)
    active_farmers: List["ActiveFarmer"] = betterproto.message_field(10)
    queued_farmers: List["QueuedFarmer"] = betterproto.message_field(11)
    market_making_order_indexes: List["MmOrderIndex"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the liquidity module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    app_genesis_state: List["AppGenesisState"] = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    async def create_pair(
        self,
        msg_create_pair: "MsgCreatePair",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreatePairResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/CreatePair",
            msg_create_pair,
            MsgCreatePairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_pool(
        self,
        msg_create_pool: "MsgCreatePool",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreatePoolResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/CreatePool",
            msg_create_pool,
            MsgCreatePoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_ranged_pool(
        self,
        msg_create_ranged_pool: "MsgCreateRangedPool",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateRangedPoolResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/CreateRangedPool",
            msg_create_ranged_pool,
            MsgCreateRangedPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit(
        self,
        msg_deposit: "MsgDeposit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/Deposit",
            msg_deposit,
            MsgDepositResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw(
        self,
        msg_withdraw: "MsgWithdraw",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgWithdrawResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/Withdraw",
            msg_withdraw,
            MsgWithdrawResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def limit_order(
        self,
        msg_limit_order: "MsgLimitOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgLimitOrderResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/LimitOrder",
            msg_limit_order,
            MsgLimitOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def market_order(
        self,
        msg_market_order: "MsgMarketOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgMarketOrderResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/MarketOrder",
            msg_market_order,
            MsgMarketOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def mm_order(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgMmOrderResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/MMOrder",
            msg_mm_order,
            MsgMmOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_order(
        self,
        msg_cancel_order: "MsgCancelOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCancelOrderResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/CancelOrder",
            msg_cancel_order,
            MsgCancelOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_all_orders(
        self,
        msg_cancel_all_orders: "MsgCancelAllOrders",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCancelAllOrdersResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/CancelAllOrders",
            msg_cancel_all_orders,
            MsgCancelAllOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_mm_order(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCancelMmOrderResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/CancelMMOrder",
            msg_cancel_mm_order,
            MsgCancelMmOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def farm(
        self,
        msg_farm: "MsgFarm",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgFarmResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/Farm",
            msg_farm,
            MsgFarmResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unfarm(
        self,
        msg_unfarm: "MsgUnfarm",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUnfarmResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Msg/Unfarm",
            msg_unfarm,
            MsgUnfarmResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def generic_params(
        self,
        query_generic_params_request: "QueryGenericParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGenericParamsResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/GenericParams",
            query_generic_params_request,
            QueryGenericParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pools(
        self,
        query_pools_request: "QueryPoolsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPoolsResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/Pools",
            query_pools_request,
            QueryPoolsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pool(
        self,
        query_pool_request: "QueryPoolRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPoolResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/Pool",
            query_pool_request,
            QueryPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pool_by_reserve_address(
        self,
        query_pool_by_reserve_address_request: "QueryPoolByReserveAddressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPoolResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/PoolByReserveAddress",
            query_pool_by_reserve_address_request,
            QueryPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pool_by_pool_coin_denom(
        self,
        query_pool_by_pool_coin_denom_request: "QueryPoolByPoolCoinDenomRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPoolResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/PoolByPoolCoinDenom",
            query_pool_by_pool_coin_denom_request,
            QueryPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pairs(
        self,
        query_pairs_request: "QueryPairsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPairsResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/Pairs",
            query_pairs_request,
            QueryPairsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pair(
        self,
        query_pair_request: "QueryPairRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPairResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/Pair",
            query_pair_request,
            QueryPairResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit_requests(
        self,
        query_deposit_requests_request: "QueryDepositRequestsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDepositRequestsResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/DepositRequests",
            query_deposit_requests_request,
            QueryDepositRequestsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit_request(
        self,
        query_deposit_request_request: "QueryDepositRequestRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDepositRequestResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/DepositRequest",
            query_deposit_request_request,
            QueryDepositRequestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw_requests(
        self,
        query_withdraw_requests_request: "QueryWithdrawRequestsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWithdrawRequestsResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/WithdrawRequests",
            query_withdraw_requests_request,
            QueryWithdrawRequestsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw_request(
        self,
        query_withdraw_request_request: "QueryWithdrawRequestRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWithdrawRequestResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/WithdrawRequest",
            query_withdraw_request_request,
            QueryWithdrawRequestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def orders(
        self,
        query_orders_request: "QueryOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOrdersResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/Orders",
            query_orders_request,
            QueryOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def order(
        self,
        query_order_request: "QueryOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOrderResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/Order",
            query_order_request,
            QueryOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def orders_by_orderer(
        self,
        query_orders_by_orderer_request: "QueryOrdersByOrdererRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOrdersResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/OrdersByOrderer",
            query_orders_by_orderer_request,
            QueryOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def farmer(
        self,
        query_farmer_request: "QueryFarmerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFarmerResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/Farmer",
            query_farmer_request,
            QueryFarmerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deserialize_pool_coin(
        self,
        query_deserialize_pool_coin_request: "QueryDeserializePoolCoinRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDeserializePoolCoinResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/DeserializePoolCoin",
            query_deserialize_pool_coin_request,
            QueryDeserializePoolCoinResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pool_incentives(
        self,
        query_pools_incentives_request: "QueryPoolsIncentivesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPoolIncentivesResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/PoolIncentives",
            query_pools_incentives_request,
            QueryPoolIncentivesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def farmed_pool_coin(
        self,
        query_farmed_pool_coin_request: "QueryFarmedPoolCoinRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFarmedPoolCoinResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/FarmedPoolCoin",
            query_farmed_pool_coin_request,
            QueryFarmedPoolCoinResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def total_active_and_queued_pool_coin(
        self,
        query_all_farmed_pool_coins_request: "QueryAllFarmedPoolCoinsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllFarmedPoolCoinsResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/TotalActiveAndQueuedPoolCoin",
            query_all_farmed_pool_coins_request,
            QueryAllFarmedPoolCoinsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def order_books(
        self,
        query_order_books_request: "QueryOrderBooksRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOrderBooksResponse":
        return await self._unary_unary(
            "/comdex.liquidity.v1beta1.Query/OrderBooks",
            query_order_books_request,
            QueryOrderBooksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def create_pair(
        self, msg_create_pair: "MsgCreatePair"
    ) -> "MsgCreatePairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_pool(
        self, msg_create_pool: "MsgCreatePool"
    ) -> "MsgCreatePoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_ranged_pool(
        self, msg_create_ranged_pool: "MsgCreateRangedPool"
    ) -> "MsgCreateRangedPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit(self, msg_deposit: "MsgDeposit") -> "MsgDepositResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def withdraw(self, msg_withdraw: "MsgWithdraw") -> "MsgWithdrawResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def limit_order(
        self, msg_limit_order: "MsgLimitOrder"
    ) -> "MsgLimitOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def market_order(
        self, msg_market_order: "MsgMarketOrder"
    ) -> "MsgMarketOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def mm_order(self) -> "MsgMmOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_order(
        self, msg_cancel_order: "MsgCancelOrder"
    ) -> "MsgCancelOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_all_orders(
        self, msg_cancel_all_orders: "MsgCancelAllOrders"
    ) -> "MsgCancelAllOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_mm_order(self) -> "MsgCancelMmOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def farm(self, msg_farm: "MsgFarm") -> "MsgFarmResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unfarm(self, msg_unfarm: "MsgUnfarm") -> "MsgUnfarmResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_pair(
        self, stream: "grpclib.server.Stream[MsgCreatePair, MsgCreatePairResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_pair(request)
        await stream.send_message(response)

    async def __rpc_create_pool(
        self, stream: "grpclib.server.Stream[MsgCreatePool, MsgCreatePoolResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_pool(request)
        await stream.send_message(response)

    async def __rpc_create_ranged_pool(
        self,
        stream: "grpclib.server.Stream[MsgCreateRangedPool, MsgCreateRangedPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_ranged_pool(request)
        await stream.send_message(response)

    async def __rpc_deposit(
        self, stream: "grpclib.server.Stream[MsgDeposit, MsgDepositResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.deposit(request)
        await stream.send_message(response)

    async def __rpc_withdraw(
        self, stream: "grpclib.server.Stream[MsgWithdraw, MsgWithdrawResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.withdraw(request)
        await stream.send_message(response)

    async def __rpc_limit_order(
        self, stream: "grpclib.server.Stream[MsgLimitOrder, MsgLimitOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.limit_order(request)
        await stream.send_message(response)

    async def __rpc_market_order(
        self, stream: "grpclib.server.Stream[MsgMarketOrder, MsgMarketOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.market_order(request)
        await stream.send_message(response)

    async def __rpc_mm_order(
        self, stream: "grpclib.server.Stream[MsgMmOrder, MsgMmOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.mm_order(request)
        await stream.send_message(response)

    async def __rpc_cancel_order(
        self, stream: "grpclib.server.Stream[MsgCancelOrder, MsgCancelOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_order(request)
        await stream.send_message(response)

    async def __rpc_cancel_all_orders(
        self,
        stream: "grpclib.server.Stream[MsgCancelAllOrders, MsgCancelAllOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_all_orders(request)
        await stream.send_message(response)

    async def __rpc_cancel_mm_order(
        self,
        stream: "grpclib.server.Stream[MsgCancelMmOrder, MsgCancelMmOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_mm_order(request)
        await stream.send_message(response)

    async def __rpc_farm(
        self, stream: "grpclib.server.Stream[MsgFarm, MsgFarmResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.farm(request)
        await stream.send_message(response)

    async def __rpc_unfarm(
        self, stream: "grpclib.server.Stream[MsgUnfarm, MsgUnfarmResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unfarm(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.liquidity.v1beta1.Msg/CreatePair": grpclib.const.Handler(
                self.__rpc_create_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreatePair,
                MsgCreatePairResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/CreatePool": grpclib.const.Handler(
                self.__rpc_create_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreatePool,
                MsgCreatePoolResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/CreateRangedPool": grpclib.const.Handler(
                self.__rpc_create_ranged_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateRangedPool,
                MsgCreateRangedPoolResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/Deposit": grpclib.const.Handler(
                self.__rpc_deposit,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeposit,
                MsgDepositResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/Withdraw": grpclib.const.Handler(
                self.__rpc_withdraw,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgWithdraw,
                MsgWithdrawResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/LimitOrder": grpclib.const.Handler(
                self.__rpc_limit_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgLimitOrder,
                MsgLimitOrderResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/MarketOrder": grpclib.const.Handler(
                self.__rpc_market_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgMarketOrder,
                MsgMarketOrderResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/MMOrder": grpclib.const.Handler(
                self.__rpc_mm_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgMmOrder,
                MsgMmOrderResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/CancelOrder": grpclib.const.Handler(
                self.__rpc_cancel_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCancelOrder,
                MsgCancelOrderResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/CancelAllOrders": grpclib.const.Handler(
                self.__rpc_cancel_all_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCancelAllOrders,
                MsgCancelAllOrdersResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/CancelMMOrder": grpclib.const.Handler(
                self.__rpc_cancel_mm_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCancelMmOrder,
                MsgCancelMmOrderResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/Farm": grpclib.const.Handler(
                self.__rpc_farm,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgFarm,
                MsgFarmResponse,
            ),
            "/comdex.liquidity.v1beta1.Msg/Unfarm": grpclib.const.Handler(
                self.__rpc_unfarm,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUnfarm,
                MsgUnfarmResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def generic_params(
        self, query_generic_params_request: "QueryGenericParamsRequest"
    ) -> "QueryGenericParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pools(
        self, query_pools_request: "QueryPoolsRequest"
    ) -> "QueryPoolsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pool(self, query_pool_request: "QueryPoolRequest") -> "QueryPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pool_by_reserve_address(
        self, query_pool_by_reserve_address_request: "QueryPoolByReserveAddressRequest"
    ) -> "QueryPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pool_by_pool_coin_denom(
        self, query_pool_by_pool_coin_denom_request: "QueryPoolByPoolCoinDenomRequest"
    ) -> "QueryPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pairs(
        self, query_pairs_request: "QueryPairsRequest"
    ) -> "QueryPairsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pair(self, query_pair_request: "QueryPairRequest") -> "QueryPairResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit_requests(
        self, query_deposit_requests_request: "QueryDepositRequestsRequest"
    ) -> "QueryDepositRequestsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit_request(
        self, query_deposit_request_request: "QueryDepositRequestRequest"
    ) -> "QueryDepositRequestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def withdraw_requests(
        self, query_withdraw_requests_request: "QueryWithdrawRequestsRequest"
    ) -> "QueryWithdrawRequestsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def withdraw_request(
        self, query_withdraw_request_request: "QueryWithdrawRequestRequest"
    ) -> "QueryWithdrawRequestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def orders(
        self, query_orders_request: "QueryOrdersRequest"
    ) -> "QueryOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def order(
        self, query_order_request: "QueryOrderRequest"
    ) -> "QueryOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def orders_by_orderer(
        self, query_orders_by_orderer_request: "QueryOrdersByOrdererRequest"
    ) -> "QueryOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def farmer(
        self, query_farmer_request: "QueryFarmerRequest"
    ) -> "QueryFarmerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deserialize_pool_coin(
        self, query_deserialize_pool_coin_request: "QueryDeserializePoolCoinRequest"
    ) -> "QueryDeserializePoolCoinResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pool_incentives(
        self, query_pools_incentives_request: "QueryPoolsIncentivesRequest"
    ) -> "QueryPoolIncentivesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def farmed_pool_coin(
        self, query_farmed_pool_coin_request: "QueryFarmedPoolCoinRequest"
    ) -> "QueryFarmedPoolCoinResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def total_active_and_queued_pool_coin(
        self, query_all_farmed_pool_coins_request: "QueryAllFarmedPoolCoinsRequest"
    ) -> "QueryAllFarmedPoolCoinsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def order_books(
        self, query_order_books_request: "QueryOrderBooksRequest"
    ) -> "QueryOrderBooksResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_generic_params(
        self,
        stream: "grpclib.server.Stream[QueryGenericParamsRequest, QueryGenericParamsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.generic_params(request)
        await stream.send_message(response)

    async def __rpc_pools(
        self, stream: "grpclib.server.Stream[QueryPoolsRequest, QueryPoolsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.pools(request)
        await stream.send_message(response)

    async def __rpc_pool(
        self, stream: "grpclib.server.Stream[QueryPoolRequest, QueryPoolResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.pool(request)
        await stream.send_message(response)

    async def __rpc_pool_by_reserve_address(
        self,
        stream: "grpclib.server.Stream[QueryPoolByReserveAddressRequest, QueryPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pool_by_reserve_address(request)
        await stream.send_message(response)

    async def __rpc_pool_by_pool_coin_denom(
        self,
        stream: "grpclib.server.Stream[QueryPoolByPoolCoinDenomRequest, QueryPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pool_by_pool_coin_denom(request)
        await stream.send_message(response)

    async def __rpc_pairs(
        self, stream: "grpclib.server.Stream[QueryPairsRequest, QueryPairsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.pairs(request)
        await stream.send_message(response)

    async def __rpc_pair(
        self, stream: "grpclib.server.Stream[QueryPairRequest, QueryPairResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.pair(request)
        await stream.send_message(response)

    async def __rpc_deposit_requests(
        self,
        stream: "grpclib.server.Stream[QueryDepositRequestsRequest, QueryDepositRequestsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deposit_requests(request)
        await stream.send_message(response)

    async def __rpc_deposit_request(
        self,
        stream: "grpclib.server.Stream[QueryDepositRequestRequest, QueryDepositRequestResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deposit_request(request)
        await stream.send_message(response)

    async def __rpc_withdraw_requests(
        self,
        stream: "grpclib.server.Stream[QueryWithdrawRequestsRequest, QueryWithdrawRequestsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.withdraw_requests(request)
        await stream.send_message(response)

    async def __rpc_withdraw_request(
        self,
        stream: "grpclib.server.Stream[QueryWithdrawRequestRequest, QueryWithdrawRequestResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.withdraw_request(request)
        await stream.send_message(response)

    async def __rpc_orders(
        self, stream: "grpclib.server.Stream[QueryOrdersRequest, QueryOrdersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.orders(request)
        await stream.send_message(response)

    async def __rpc_order(
        self, stream: "grpclib.server.Stream[QueryOrderRequest, QueryOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.order(request)
        await stream.send_message(response)

    async def __rpc_orders_by_orderer(
        self,
        stream: "grpclib.server.Stream[QueryOrdersByOrdererRequest, QueryOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.orders_by_orderer(request)
        await stream.send_message(response)

    async def __rpc_farmer(
        self, stream: "grpclib.server.Stream[QueryFarmerRequest, QueryFarmerResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.farmer(request)
        await stream.send_message(response)

    async def __rpc_deserialize_pool_coin(
        self,
        stream: "grpclib.server.Stream[QueryDeserializePoolCoinRequest, QueryDeserializePoolCoinResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deserialize_pool_coin(request)
        await stream.send_message(response)

    async def __rpc_pool_incentives(
        self,
        stream: "grpclib.server.Stream[QueryPoolsIncentivesRequest, QueryPoolIncentivesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pool_incentives(request)
        await stream.send_message(response)

    async def __rpc_farmed_pool_coin(
        self,
        stream: "grpclib.server.Stream[QueryFarmedPoolCoinRequest, QueryFarmedPoolCoinResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.farmed_pool_coin(request)
        await stream.send_message(response)

    async def __rpc_total_active_and_queued_pool_coin(
        self,
        stream: "grpclib.server.Stream[QueryAllFarmedPoolCoinsRequest, QueryAllFarmedPoolCoinsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.total_active_and_queued_pool_coin(request)
        await stream.send_message(response)

    async def __rpc_order_books(
        self,
        stream: "grpclib.server.Stream[QueryOrderBooksRequest, QueryOrderBooksResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.order_books(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.liquidity.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/GenericParams": grpclib.const.Handler(
                self.__rpc_generic_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGenericParamsRequest,
                QueryGenericParamsResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/Pools": grpclib.const.Handler(
                self.__rpc_pools,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPoolsRequest,
                QueryPoolsResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/Pool": grpclib.const.Handler(
                self.__rpc_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPoolRequest,
                QueryPoolResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/PoolByReserveAddress": grpclib.const.Handler(
                self.__rpc_pool_by_reserve_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPoolByReserveAddressRequest,
                QueryPoolResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/PoolByPoolCoinDenom": grpclib.const.Handler(
                self.__rpc_pool_by_pool_coin_denom,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPoolByPoolCoinDenomRequest,
                QueryPoolResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/Pairs": grpclib.const.Handler(
                self.__rpc_pairs,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPairsRequest,
                QueryPairsResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/Pair": grpclib.const.Handler(
                self.__rpc_pair,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPairRequest,
                QueryPairResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/DepositRequests": grpclib.const.Handler(
                self.__rpc_deposit_requests,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDepositRequestsRequest,
                QueryDepositRequestsResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/DepositRequest": grpclib.const.Handler(
                self.__rpc_deposit_request,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDepositRequestRequest,
                QueryDepositRequestResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/WithdrawRequests": grpclib.const.Handler(
                self.__rpc_withdraw_requests,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWithdrawRequestsRequest,
                QueryWithdrawRequestsResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/WithdrawRequest": grpclib.const.Handler(
                self.__rpc_withdraw_request,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWithdrawRequestRequest,
                QueryWithdrawRequestResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/Orders": grpclib.const.Handler(
                self.__rpc_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOrdersRequest,
                QueryOrdersResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/Order": grpclib.const.Handler(
                self.__rpc_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOrderRequest,
                QueryOrderResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/OrdersByOrderer": grpclib.const.Handler(
                self.__rpc_orders_by_orderer,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOrdersByOrdererRequest,
                QueryOrdersResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/Farmer": grpclib.const.Handler(
                self.__rpc_farmer,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFarmerRequest,
                QueryFarmerResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/DeserializePoolCoin": grpclib.const.Handler(
                self.__rpc_deserialize_pool_coin,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDeserializePoolCoinRequest,
                QueryDeserializePoolCoinResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/PoolIncentives": grpclib.const.Handler(
                self.__rpc_pool_incentives,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPoolsIncentivesRequest,
                QueryPoolIncentivesResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/FarmedPoolCoin": grpclib.const.Handler(
                self.__rpc_farmed_pool_coin,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFarmedPoolCoinRequest,
                QueryFarmedPoolCoinResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/TotalActiveAndQueuedPoolCoin": grpclib.const.Handler(
                self.__rpc_total_active_and_queued_pool_coin,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllFarmedPoolCoinsRequest,
                QueryAllFarmedPoolCoinsResponse,
            ),
            "/comdex.liquidity.v1beta1.Query/OrderBooks": grpclib.const.Handler(
                self.__rpc_order_books,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOrderBooksRequest,
                QueryOrderBooksResponse,
            ),
        }
