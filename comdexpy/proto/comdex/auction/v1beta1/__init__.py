# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/auction/v1beta1/auction.proto, comdex/auction/v1beta1/biddings.proto, comdex/auction/v1beta1/genesis.proto, comdex/auction/v1beta1/params.proto, comdex/auction/v1beta1/query.proto, comdex/auction/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgPlaceSurplusBidRequest(betterproto.Message):
    auction_id: int = betterproto.uint64_field(1)
    bidder: str = betterproto.string_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    app_id: int = betterproto.uint64_field(4)
    auction_mapping_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class MsgPlaceSurplusBidResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgPlaceDebtBidRequest(betterproto.Message):
    auction_id: int = betterproto.uint64_field(1)
    bidder: str = betterproto.string_field(2)
    bid: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    expected_user_token: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    app_id: int = betterproto.uint64_field(5)
    auction_mapping_id: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class MsgPlaceDebtBidResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgPlaceDutchBidRequest(betterproto.Message):
    auction_id: int = betterproto.uint64_field(1)
    bidder: str = betterproto.string_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    app_id: int = betterproto.uint64_field(4)
    auction_mapping_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class MsgPlaceDutchBidResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgPlaceDutchLendBidRequest(betterproto.Message):
    auction_id: int = betterproto.uint64_field(1)
    bidder: str = betterproto.string_field(2)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    app_id: int = betterproto.uint64_field(4)
    auction_mapping_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class MsgPlaceDutchLendBidResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SurplusAuction(betterproto.Message):
    auction_id: int = betterproto.uint64_field(1)
    sell_token: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)
    buy_token: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    active_bidding_id: int = betterproto.uint64_field(4)
    bidder: str = betterproto.string_field(5)
    bid: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(6)
    end_time: datetime = betterproto.message_field(7)
    bid_factor: str = betterproto.string_field(8)
    bidding_ids: List["BidOwnerMapping"] = betterproto.message_field(9)
    auction_status: int = betterproto.uint64_field(10)
    app_id: int = betterproto.uint64_field(11)
    asset_id: int = betterproto.uint64_field(12)
    auction_mapping_id: int = betterproto.uint64_field(13)
    asset_in_id: int = betterproto.uint64_field(14)
    asset_out_id: int = betterproto.uint64_field(15)
    bid_end_time: datetime = betterproto.message_field(16)


@dataclass(eq=False, repr=False)
class DebtAuction(betterproto.Message):
    auction_id: int = betterproto.uint64_field(1)
    auctioned_token: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)
    expected_user_token: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    expected_minted_token: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(
        4
    )
    end_time: datetime = betterproto.message_field(5)
    active_bidding_id: int = betterproto.uint64_field(6)
    bidder: str = betterproto.string_field(7)
    current_bid_amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(8)
    auction_status: int = betterproto.uint64_field(9)
    app_id: int = betterproto.uint64_field(10)
    asset_id: int = betterproto.uint64_field(11)
    bidding_ids: List["BidOwnerMapping"] = betterproto.message_field(12)
    auction_mapping_id: int = betterproto.uint64_field(13)
    bid_factor: str = betterproto.string_field(14)
    asset_in_id: int = betterproto.uint64_field(15)
    asset_out_id: int = betterproto.uint64_field(16)
    bid_end_time: datetime = betterproto.message_field(17)


@dataclass(eq=False, repr=False)
class DutchAuction(betterproto.Message):
    auction_id: int = betterproto.uint64_field(1)
    outflow_token_init_amount: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(2)
    )
    outflow_token_current_amount: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(3)
    )
    inflow_token_target_amount: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(4)
    )
    inflow_token_current_amount: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(5)
    )
    outflow_token_initial_price: str = betterproto.string_field(6)
    outflow_token_current_price: str = betterproto.string_field(7)
    outflow_token_end_price: str = betterproto.string_field(8)
    inflow_token_current_price: str = betterproto.string_field(9)
    end_time: datetime = betterproto.message_field(10)
    auction_status: int = betterproto.uint64_field(11)
    start_time: datetime = betterproto.message_field(12)
    bidding_ids: List["BidOwnerMapping"] = betterproto.message_field(13)
    auction_mapping_id: int = betterproto.uint64_field(14)
    app_id: int = betterproto.uint64_field(15)
    asset_in_id: int = betterproto.uint64_field(16)
    asset_out_id: int = betterproto.uint64_field(17)
    locked_vault_id: int = betterproto.uint64_field(18)
    vault_owner: str = betterproto.string_field(19)
    liquidation_penalty: str = betterproto.string_field(20)


@dataclass(eq=False, repr=False)
class BidOwnerMapping(betterproto.Message):
    bid_id: int = betterproto.uint64_field(1)
    bid_owner: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ProtocolStatistics(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    loss: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AuctionParams(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    auction_duration_seconds: int = betterproto.uint64_field(2)
    buffer: str = betterproto.string_field(3)
    cusp: str = betterproto.string_field(4)
    step: str = betterproto.string_field(5)
    price_function_type: int = betterproto.uint64_field(6)
    surplus_id: int = betterproto.uint64_field(7)
    debt_id: int = betterproto.uint64_field(8)
    dutch_id: int = betterproto.uint64_field(9)
    bid_duration_seconds: int = betterproto.uint64_field(10)


@dataclass(eq=False, repr=False)
class SurplusBiddings(betterproto.Message):
    bidding_id: int = betterproto.uint64_field(1)
    auction_id: int = betterproto.uint64_field(2)
    auction_status: str = betterproto.string_field(3)
    auctioned_collateral: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(
        4
    )
    bidder: str = betterproto.string_field(5)
    bid: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(6)
    bidding_timestamp: datetime = betterproto.message_field(7)
    bidding_status: str = betterproto.string_field(8)
    auction_mapping_id: int = betterproto.uint64_field(9)
    app_id: int = betterproto.uint64_field(10)


@dataclass(eq=False, repr=False)
class DebtBiddings(betterproto.Message):
    bidding_id: int = betterproto.uint64_field(1)
    auction_id: int = betterproto.uint64_field(2)
    auction_status: str = betterproto.string_field(3)
    outflow_tokens: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    bidder: str = betterproto.string_field(5)
    bid: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(6)
    bidding_timestamp: datetime = betterproto.message_field(7)
    bidding_status: str = betterproto.string_field(8)
    auction_mapping_id: int = betterproto.uint64_field(9)
    app_id: int = betterproto.uint64_field(10)


@dataclass(eq=False, repr=False)
class DutchBiddings(betterproto.Message):
    bidding_id: int = betterproto.uint64_field(1)
    auction_id: int = betterproto.uint64_field(2)
    auction_status: str = betterproto.string_field(3)
    outflow_token_amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(
        4
    )
    inflow_token_amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(5)
    bidder: str = betterproto.string_field(6)
    bidding_timestamp: datetime = betterproto.message_field(7)
    bidding_status: str = betterproto.string_field(8)
    auction_mapping_id: int = betterproto.uint64_field(9)
    app_id: int = betterproto.uint64_field(10)


@dataclass(eq=False, repr=False)
class QuerySurplusAuctionRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    auction_mapping_id: int = betterproto.uint64_field(2)
    auction_id: int = betterproto.uint64_field(3)
    history: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class QuerySurplusAuctionResponse(betterproto.Message):
    auction: "SurplusAuction" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuerySurplusAuctionsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    history: bool = betterproto.bool_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QuerySurplusAuctionsResponse(betterproto.Message):
    auctions: List["SurplusAuction"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QuerySurplusBiddingsRequest(betterproto.Message):
    bidder: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    history: bool = betterproto.bool_field(3)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QuerySurplusBiddingsResponse(betterproto.Message):
    bidder: str = betterproto.string_field(1)
    biddings: List["SurplusBiddings"] = betterproto.message_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryDebtAuctionRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    auction_mapping_id: int = betterproto.uint64_field(2)
    auction_id: int = betterproto.uint64_field(3)
    history: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class QueryDebtAuctionResponse(betterproto.Message):
    auction: "DebtAuction" = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryDebtAuctionsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    history: bool = betterproto.bool_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryDebtAuctionsResponse(betterproto.Message):
    auctions: List["DebtAuction"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryDebtBiddingsRequest(betterproto.Message):
    bidder: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    history: bool = betterproto.bool_field(3)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryDebtBiddingsResponse(betterproto.Message):
    bidder: str = betterproto.string_field(1)
    biddings: List["DebtBiddings"] = betterproto.message_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryDutchAuctionRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    auction_mapping_id: int = betterproto.uint64_field(2)
    auction_id: int = betterproto.uint64_field(3)
    history: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class QueryDutchAuctionResponse(betterproto.Message):
    auction: "DutchAuction" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDutchAuctionsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    history: bool = betterproto.bool_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryDutchAuctionsResponse(betterproto.Message):
    auctions: List["DutchAuction"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryDutchBiddingsRequest(betterproto.Message):
    bidder: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    history: bool = betterproto.bool_field(3)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryDutchBiddingsResponse(betterproto.Message):
    bidder: str = betterproto.string_field(1)
    biddings: List["DutchBiddings"] = betterproto.message_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryBiddingsForSurplusAuctionRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    auction_mapping_id: int = betterproto.uint64_field(2)
    auction_id: int = betterproto.uint64_field(3)
    history: bool = betterproto.bool_field(4)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class QueryBiddingsForSurplusAuctionResponse(betterproto.Message):
    biddings: List["SurplusBiddings"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryProtocolStatisticsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryProtocolStatisticsResponse(betterproto.Message):
    stats: List["ProtocolStatistics"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryGenericAuctionParamRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryGenericAuctionParamResponse(betterproto.Message):
    auction_params: "AuctionParams" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDutchLendAuctionRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    auction_mapping_id: int = betterproto.uint64_field(2)
    auction_id: int = betterproto.uint64_field(3)
    history: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class QueryDutchLendAuctionResponse(betterproto.Message):
    auction: "DutchAuction" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDutchLendAuctionsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    history: bool = betterproto.bool_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryDutchLendAuctionsResponse(betterproto.Message):
    auctions: List["DutchAuction"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryDutchLendBiddingsRequest(betterproto.Message):
    bidder: str = betterproto.string_field(1)
    app_id: int = betterproto.uint64_field(2)
    history: bool = betterproto.bool_field(3)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryDutchLendBiddingsResponse(betterproto.Message):
    bidder: str = betterproto.string_field(1)
    biddings: List["DutchBiddings"] = betterproto.message_field(2)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class QueryFilterDutchAuctionsRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    denom: List[str] = betterproto.string_field(2)
    history: bool = betterproto.bool_field(3)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class QueryFilterDutchAuctionsResponse(betterproto.Message):
    auctions: List["DutchAuction"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    surplus_auction: List["SurplusAuction"] = betterproto.message_field(1)
    debt_auction: List["DebtAuction"] = betterproto.message_field(2)
    dutch_auction: List["DutchAuction"] = betterproto.message_field(3)
    protocol_statistics: List["ProtocolStatistics"] = betterproto.message_field(4)
    auction_params: List["AuctionParams"] = betterproto.message_field(5)
    dutch_lend_auction: List["DutchAuction"] = betterproto.message_field(6)
    params: "Params" = betterproto.message_field(7)
    user_bidding_id: int = betterproto.uint64_field(8)


class MsgStub(betterproto.ServiceStub):
    async def msg_place_surplus_bid(
        self,
        msg_place_surplus_bid_request: "MsgPlaceSurplusBidRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgPlaceSurplusBidResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Msg/MsgPlaceSurplusBid",
            msg_place_surplus_bid_request,
            MsgPlaceSurplusBidResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_place_debt_bid(
        self,
        msg_place_debt_bid_request: "MsgPlaceDebtBidRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgPlaceDebtBidResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Msg/MsgPlaceDebtBid",
            msg_place_debt_bid_request,
            MsgPlaceDebtBidResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_place_dutch_bid(
        self,
        msg_place_dutch_bid_request: "MsgPlaceDutchBidRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgPlaceDutchBidResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Msg/MsgPlaceDutchBid",
            msg_place_dutch_bid_request,
            MsgPlaceDutchBidResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def msg_place_dutch_lend_bid(
        self,
        msg_place_dutch_lend_bid_request: "MsgPlaceDutchLendBidRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgPlaceDutchLendBidResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Msg/MsgPlaceDutchLendBid",
            msg_place_dutch_lend_bid_request,
            MsgPlaceDutchLendBidResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def query_surplus_auction(
        self,
        query_surplus_auction_request: "QuerySurplusAuctionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySurplusAuctionResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QuerySurplusAuction",
            query_surplus_auction_request,
            QuerySurplusAuctionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_surplus_auctions(
        self,
        query_surplus_auctions_request: "QuerySurplusAuctionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySurplusAuctionsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QuerySurplusAuctions",
            query_surplus_auctions_request,
            QuerySurplusAuctionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_surplus_biddings(
        self,
        query_surplus_biddings_request: "QuerySurplusBiddingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySurplusBiddingsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QuerySurplusBiddings",
            query_surplus_biddings_request,
            QuerySurplusBiddingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_debt_auction(
        self,
        query_debt_auction_request: "QueryDebtAuctionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDebtAuctionResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDebtAuction",
            query_debt_auction_request,
            QueryDebtAuctionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_debt_auctions(
        self,
        query_debt_auctions_request: "QueryDebtAuctionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDebtAuctionsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDebtAuctions",
            query_debt_auctions_request,
            QueryDebtAuctionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_debt_biddings(
        self,
        query_debt_biddings_request: "QueryDebtBiddingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDebtBiddingsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDebtBiddings",
            query_debt_biddings_request,
            QueryDebtBiddingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_dutch_auction(
        self,
        query_dutch_auction_request: "QueryDutchAuctionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDutchAuctionResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDutchAuction",
            query_dutch_auction_request,
            QueryDutchAuctionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_dutch_auctions(
        self,
        query_dutch_auctions_request: "QueryDutchAuctionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDutchAuctionsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDutchAuctions",
            query_dutch_auctions_request,
            QueryDutchAuctionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_dutch_biddings(
        self,
        query_dutch_biddings_request: "QueryDutchBiddingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDutchBiddingsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDutchBiddings",
            query_dutch_biddings_request,
            QueryDutchBiddingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_protocol_statistics(
        self,
        query_protocol_statistics_request: "QueryProtocolStatisticsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryProtocolStatisticsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryProtocolStatistics",
            query_protocol_statistics_request,
            QueryProtocolStatisticsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_generic_auction_params(
        self,
        query_generic_auction_param_request: "QueryGenericAuctionParamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGenericAuctionParamResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryGenericAuctionParams",
            query_generic_auction_param_request,
            QueryGenericAuctionParamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_dutch_lend_auction(
        self,
        query_dutch_lend_auction_request: "QueryDutchLendAuctionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDutchLendAuctionResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDutchLendAuction",
            query_dutch_lend_auction_request,
            QueryDutchLendAuctionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_dutch_lend_auctions(
        self,
        query_dutch_lend_auctions_request: "QueryDutchLendAuctionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDutchLendAuctionsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDutchLendAuctions",
            query_dutch_lend_auctions_request,
            QueryDutchLendAuctionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_dutch_lend_biddings(
        self,
        query_dutch_lend_biddings_request: "QueryDutchLendBiddingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDutchLendBiddingsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryDutchLendBiddings",
            query_dutch_lend_biddings_request,
            QueryDutchLendBiddingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_filter_dutch_auctions(
        self,
        query_filter_dutch_auctions_request: "QueryFilterDutchAuctionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryFilterDutchAuctionsResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryFilterDutchAuctions",
            query_filter_dutch_auctions_request,
            QueryFilterDutchAuctionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
    
    async def query_biddings_for_surplus_auction(
        self,
        query_biddings_for_surplus_auctions_request: "QueryBiddingsForSurplusAuctionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryBiddingsForSurplusAuctionResponse":
        return await self._unary_unary(
            "/comdex.auction.v1beta1.Query/QueryBiddingsForSurplusAuction",
            query_biddings_for_surplus_auctions_request,
            QueryBiddingsForSurplusAuctionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def msg_place_surplus_bid(
        self, msg_place_surplus_bid_request: "MsgPlaceSurplusBidRequest"
    ) -> "MsgPlaceSurplusBidResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_place_debt_bid(
        self, msg_place_debt_bid_request: "MsgPlaceDebtBidRequest"
    ) -> "MsgPlaceDebtBidResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_place_dutch_bid(
        self, msg_place_dutch_bid_request: "MsgPlaceDutchBidRequest"
    ) -> "MsgPlaceDutchBidResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def msg_place_dutch_lend_bid(
        self, msg_place_dutch_lend_bid_request: "MsgPlaceDutchLendBidRequest"
    ) -> "MsgPlaceDutchLendBidResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_msg_place_surplus_bid(
        self,
        stream: "grpclib.server.Stream[MsgPlaceSurplusBidRequest, MsgPlaceSurplusBidResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_place_surplus_bid(request)
        await stream.send_message(response)

    async def __rpc_msg_place_debt_bid(
        self,
        stream: "grpclib.server.Stream[MsgPlaceDebtBidRequest, MsgPlaceDebtBidResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_place_debt_bid(request)
        await stream.send_message(response)

    async def __rpc_msg_place_dutch_bid(
        self,
        stream: "grpclib.server.Stream[MsgPlaceDutchBidRequest, MsgPlaceDutchBidResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_place_dutch_bid(request)
        await stream.send_message(response)

    async def __rpc_msg_place_dutch_lend_bid(
        self,
        stream: "grpclib.server.Stream[MsgPlaceDutchLendBidRequest, MsgPlaceDutchLendBidResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.msg_place_dutch_lend_bid(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.auction.v1beta1.Msg/MsgPlaceSurplusBid": grpclib.const.Handler(
                self.__rpc_msg_place_surplus_bid,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgPlaceSurplusBidRequest,
                MsgPlaceSurplusBidResponse,
            ),
            "/comdex.auction.v1beta1.Msg/MsgPlaceDebtBid": grpclib.const.Handler(
                self.__rpc_msg_place_debt_bid,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgPlaceDebtBidRequest,
                MsgPlaceDebtBidResponse,
            ),
            "/comdex.auction.v1beta1.Msg/MsgPlaceDutchBid": grpclib.const.Handler(
                self.__rpc_msg_place_dutch_bid,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgPlaceDutchBidRequest,
                MsgPlaceDutchBidResponse,
            ),
            "/comdex.auction.v1beta1.Msg/MsgPlaceDutchLendBid": grpclib.const.Handler(
                self.__rpc_msg_place_dutch_lend_bid,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgPlaceDutchLendBidRequest,
                MsgPlaceDutchLendBidResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def query_surplus_auction(
        self, query_surplus_auction_request: "QuerySurplusAuctionRequest"
    ) -> "QuerySurplusAuctionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_surplus_auctions(
        self, query_surplus_auctions_request: "QuerySurplusAuctionsRequest"
    ) -> "QuerySurplusAuctionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_surplus_biddings(
        self, query_surplus_biddings_request: "QuerySurplusBiddingsRequest"
    ) -> "QuerySurplusBiddingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_debt_auction(
        self, query_debt_auction_request: "QueryDebtAuctionRequest"
    ) -> "QueryDebtAuctionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_debt_auctions(
        self, query_debt_auctions_request: "QueryDebtAuctionsRequest"
    ) -> "QueryDebtAuctionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_debt_biddings(
        self, query_debt_biddings_request: "QueryDebtBiddingsRequest"
    ) -> "QueryDebtBiddingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_dutch_auction(
        self, query_dutch_auction_request: "QueryDutchAuctionRequest"
    ) -> "QueryDutchAuctionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_dutch_auctions(
        self, query_dutch_auctions_request: "QueryDutchAuctionsRequest"
    ) -> "QueryDutchAuctionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_dutch_biddings(
        self, query_dutch_biddings_request: "QueryDutchBiddingsRequest"
    ) -> "QueryDutchBiddingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_protocol_statistics(
        self, query_protocol_statistics_request: "QueryProtocolStatisticsRequest"
    ) -> "QueryProtocolStatisticsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_generic_auction_params(
        self, query_generic_auction_param_request: "QueryGenericAuctionParamRequest"
    ) -> "QueryGenericAuctionParamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_dutch_lend_auction(
        self, query_dutch_lend_auction_request: "QueryDutchLendAuctionRequest"
    ) -> "QueryDutchLendAuctionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_dutch_lend_auctions(
        self, query_dutch_lend_auctions_request: "QueryDutchLendAuctionsRequest"
    ) -> "QueryDutchLendAuctionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_dutch_lend_biddings(
        self, query_dutch_lend_biddings_request: "QueryDutchLendBiddingsRequest"
    ) -> "QueryDutchLendBiddingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_filter_dutch_auctions(
        self, query_filter_dutch_auctions_request: "QueryFilterDutchAuctionsRequest"
    ) -> "QueryFilterDutchAuctionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
    
    async def query_biddings_for_surplus_auction(
        self, query_biddings_for_surplus_auction_request: "QueryBiddingsForSurplusAuctionRequest"
    ) -> "QueryBiddingsForSurplusAuctionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_surplus_auction(
        self,
        stream: "grpclib.server.Stream[QuerySurplusAuctionRequest, QuerySurplusAuctionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_surplus_auction(request)
        await stream.send_message(response)

    async def __rpc_query_surplus_auctions(
        self,
        stream: "grpclib.server.Stream[QuerySurplusAuctionsRequest, QuerySurplusAuctionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_surplus_auctions(request)
        await stream.send_message(response)

    async def __rpc_query_surplus_biddings(
        self,
        stream: "grpclib.server.Stream[QuerySurplusBiddingsRequest, QuerySurplusBiddingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_surplus_biddings(request)
        await stream.send_message(response)

    async def __rpc_query_debt_auction(
        self,
        stream: "grpclib.server.Stream[QueryDebtAuctionRequest, QueryDebtAuctionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_debt_auction(request)
        await stream.send_message(response)

    async def __rpc_query_debt_auctions(
        self,
        stream: "grpclib.server.Stream[QueryDebtAuctionsRequest, QueryDebtAuctionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_debt_auctions(request)
        await stream.send_message(response)

    async def __rpc_query_debt_biddings(
        self,
        stream: "grpclib.server.Stream[QueryDebtBiddingsRequest, QueryDebtBiddingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_debt_biddings(request)
        await stream.send_message(response)

    async def __rpc_query_dutch_auction(
        self,
        stream: "grpclib.server.Stream[QueryDutchAuctionRequest, QueryDutchAuctionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_dutch_auction(request)
        await stream.send_message(response)

    async def __rpc_query_dutch_auctions(
        self,
        stream: "grpclib.server.Stream[QueryDutchAuctionsRequest, QueryDutchAuctionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_dutch_auctions(request)
        await stream.send_message(response)

    async def __rpc_query_dutch_biddings(
        self,
        stream: "grpclib.server.Stream[QueryDutchBiddingsRequest, QueryDutchBiddingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_dutch_biddings(request)
        await stream.send_message(response)

    async def __rpc_query_protocol_statistics(
        self,
        stream: "grpclib.server.Stream[QueryProtocolStatisticsRequest, QueryProtocolStatisticsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_protocol_statistics(request)
        await stream.send_message(response)

    async def __rpc_query_generic_auction_params(
        self,
        stream: "grpclib.server.Stream[QueryGenericAuctionParamRequest, QueryGenericAuctionParamResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_generic_auction_params(request)
        await stream.send_message(response)

    async def __rpc_query_dutch_lend_auction(
        self,
        stream: "grpclib.server.Stream[QueryDutchLendAuctionRequest, QueryDutchLendAuctionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_dutch_lend_auction(request)
        await stream.send_message(response)

    async def __rpc_query_dutch_lend_auctions(
        self,
        stream: "grpclib.server.Stream[QueryDutchLendAuctionsRequest, QueryDutchLendAuctionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_dutch_lend_auctions(request)
        await stream.send_message(response)

    async def __rpc_query_dutch_lend_biddings(
        self,
        stream: "grpclib.server.Stream[QueryDutchLendBiddingsRequest, QueryDutchLendBiddingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_dutch_lend_biddings(request)
        await stream.send_message(response)

    async def __rpc_query_filter_dutch_auctions(
        self,
        stream: "grpclib.server.Stream[QueryFilterDutchAuctionsRequest, QueryFilterDutchAuctionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_filter_dutch_auctions(request)
        await stream.send_message(response)

    async def __rpc_query_biddings_for_surplus_auction(
        self,
        stream: "grpclib.server.Stream[QueryBiddingsForSurplusAuctionRequest, QueryBiddingsForSurplusAuctionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_biddings_for_surplus_auction(request)
        await stream.send_message(response)


    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.auction.v1beta1.Query/QuerySurplusAuction": grpclib.const.Handler(
                self.__rpc_query_surplus_auction,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySurplusAuctionRequest,
                QuerySurplusAuctionResponse,
            ),
            "/comdex.auction.v1beta1.Query/QuerySurplusAuctions": grpclib.const.Handler(
                self.__rpc_query_surplus_auctions,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySurplusAuctionsRequest,
                QuerySurplusAuctionsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QuerySurplusBiddings": grpclib.const.Handler(
                self.__rpc_query_surplus_biddings,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySurplusBiddingsRequest,
                QuerySurplusBiddingsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDebtAuction": grpclib.const.Handler(
                self.__rpc_query_debt_auction,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDebtAuctionRequest,
                QueryDebtAuctionResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDebtAuctions": grpclib.const.Handler(
                self.__rpc_query_debt_auctions,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDebtAuctionsRequest,
                QueryDebtAuctionsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDebtBiddings": grpclib.const.Handler(
                self.__rpc_query_debt_biddings,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDebtBiddingsRequest,
                QueryDebtBiddingsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDutchAuction": grpclib.const.Handler(
                self.__rpc_query_dutch_auction,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDutchAuctionRequest,
                QueryDutchAuctionResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDutchAuctions": grpclib.const.Handler(
                self.__rpc_query_dutch_auctions,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDutchAuctionsRequest,
                QueryDutchAuctionsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDutchBiddings": grpclib.const.Handler(
                self.__rpc_query_dutch_biddings,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDutchBiddingsRequest,
                QueryDutchBiddingsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryProtocolStatistics": grpclib.const.Handler(
                self.__rpc_query_protocol_statistics,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryProtocolStatisticsRequest,
                QueryProtocolStatisticsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryGenericAuctionParams": grpclib.const.Handler(
                self.__rpc_query_generic_auction_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGenericAuctionParamRequest,
                QueryGenericAuctionParamResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDutchLendAuction": grpclib.const.Handler(
                self.__rpc_query_dutch_lend_auction,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDutchLendAuctionRequest,
                QueryDutchLendAuctionResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDutchLendAuctions": grpclib.const.Handler(
                self.__rpc_query_dutch_lend_auctions,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDutchLendAuctionsRequest,
                QueryDutchLendAuctionsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryDutchLendBiddings": grpclib.const.Handler(
                self.__rpc_query_dutch_lend_biddings,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDutchLendBiddingsRequest,
                QueryDutchLendBiddingsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryFilterDutchAuctions": grpclib.const.Handler(
                self.__rpc_query_filter_dutch_auctions,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryFilterDutchAuctionsRequest,
                QueryFilterDutchAuctionsResponse,
            ),
            "/comdex.auction.v1beta1.Query/QueryBiddingsForSurplusAuction": grpclib.const.Handler(
                self.__rpc_query_biddings_for_surplus_auction,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryBiddingsForSurplusAuctionRequest,
                QueryBiddingsForSurplusAuctionResponse,
            ),
        }
