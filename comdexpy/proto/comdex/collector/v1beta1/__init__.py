# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/collector/v1beta1/collector.proto, comdex/collector/v1beta1/genesis.proto, comdex/collector/v1beta1/params.proto, comdex/collector/v1beta1/query.proto, comdex/collector/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class CollectorData(betterproto.Message):
    collected_stability_fee: str = betterproto.string_field(1)
    collected_closing_fee: str = betterproto.string_field(2)
    collected_opening_fee: str = betterproto.string_field(3)
    liquidation_rewards_collected: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class AppAssetIdToFeeCollectedData(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    net_fees_collected: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AppToAssetIdCollectorMapping(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    collector: "CollectorData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CollectorLookupTableData(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    collector_asset_id: int = betterproto.uint64_field(2)
    secondary_asset_id: int = betterproto.uint64_field(3)
    surplus_threshold: str = betterproto.string_field(4)
    debt_threshold: str = betterproto.string_field(5)
    locker_saving_rate: str = betterproto.string_field(6)
    lot_size: str = betterproto.string_field(7)
    bid_factor: str = betterproto.string_field(8)
    debt_lot_size: str = betterproto.string_field(9)
    block_height: int = betterproto.int64_field(10)
    block_time: datetime = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class AppToDenomsMapping(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_ids: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class AppAssetIdToAuctionLookupTable(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    is_surplus_auction: bool = betterproto.bool_field(3)
    is_debt_auction: bool = betterproto.bool_field(4)
    is_distributor: bool = betterproto.bool_field(5)
    is_auction_active: bool = betterproto.bool_field(6)
    asset_out_oracle_price: bool = betterproto.bool_field(7)
    asset_out_price: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryCollectorLookupByAppRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryCollectorLookupByAppResponse(betterproto.Message):
    collector_lookup: List["CollectorLookupTableData"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryCollectorLookupByAppAndAssetRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryCollectorLookupByAppAndAssetResponse(betterproto.Message):
    collector_lookup: "CollectorLookupTableData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryCollectorDataByAppAndAssetRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryCollectorDataByAppAndAssetResponse(betterproto.Message):
    collector_data: "CollectorData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAuctionMappingForAppAndAssetRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryAuctionMappingForAppAndAssetResponse(betterproto.Message):
    asset_id_to_auction_lookup_table: "AppAssetIdToAuctionLookupTable" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryNetFeeCollectedForAppAndAssetRequest(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryNetFeeCollectedForAppAndAssetResponse(betterproto.Message):
    asset_id_to_fee_collected: "AppAssetIdToFeeCollectedData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    net_fee_collected_data: List[
        "AppAssetIdToFeeCollectedData"
    ] = betterproto.message_field(1)
    app_id_to_asset_collector_mapping: List[
        "AppToAssetIdCollectorMapping"
    ] = betterproto.message_field(2)
    collector_lookup: List["CollectorLookupTableData"] = betterproto.message_field(3)
    collector_auction_lookup_table: List[
        "AppAssetIdToAuctionLookupTable"
    ] = betterproto.message_field(4)
    app_to_denoms_mapping: List["AppToDenomsMapping"] = betterproto.message_field(5)
    params: "Params" = betterproto.message_field(6)


class MsgStub(betterproto.ServiceStub):
    pass


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/comdex.collector.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_collector_lookup_by_app(
        self,
        query_collector_lookup_by_app_request: "QueryCollectorLookupByAppRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCollectorLookupByAppResponse":
        return await self._unary_unary(
            "/comdex.collector.v1beta1.Query/QueryCollectorLookupByApp",
            query_collector_lookup_by_app_request,
            QueryCollectorLookupByAppResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_collector_lookup_by_app_and_asset(
        self,
        query_collector_lookup_by_app_and_asset_request: "QueryCollectorLookupByAppAndAssetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCollectorLookupByAppAndAssetResponse":
        return await self._unary_unary(
            "/comdex.collector.v1beta1.Query/QueryCollectorLookupByAppAndAsset",
            query_collector_lookup_by_app_and_asset_request,
            QueryCollectorLookupByAppAndAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_collector_data_by_app_and_asset(
        self,
        query_collector_data_by_app_and_asset_request: "QueryCollectorDataByAppAndAssetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCollectorDataByAppAndAssetResponse":
        return await self._unary_unary(
            "/comdex.collector.v1beta1.Query/QueryCollectorDataByAppAndAsset",
            query_collector_data_by_app_and_asset_request,
            QueryCollectorDataByAppAndAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_auction_mapping_for_app_and_asset(
        self,
        query_auction_mapping_for_app_and_asset_request: "QueryAuctionMappingForAppAndAssetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAuctionMappingForAppAndAssetResponse":
        return await self._unary_unary(
            "/comdex.collector.v1beta1.Query/QueryAuctionMappingForAppAndAsset",
            query_auction_mapping_for_app_and_asset_request,
            QueryAuctionMappingForAppAndAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_net_fee_collected_for_app_and_asset(
        self,
        query_net_fee_collected_for_app_and_asset_request: "QueryNetFeeCollectedForAppAndAssetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryNetFeeCollectedForAppAndAssetResponse":
        return await self._unary_unary(
            "/comdex.collector.v1beta1.Query/QueryNetFeeCollectedForAppAndAsset",
            query_net_fee_collected_for_app_and_asset_request,
            QueryNetFeeCollectedForAppAndAssetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {}


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_collector_lookup_by_app(
        self, query_collector_lookup_by_app_request: "QueryCollectorLookupByAppRequest"
    ) -> "QueryCollectorLookupByAppResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_collector_lookup_by_app_and_asset(
        self,
        query_collector_lookup_by_app_and_asset_request: "QueryCollectorLookupByAppAndAssetRequest",
    ) -> "QueryCollectorLookupByAppAndAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_collector_data_by_app_and_asset(
        self,
        query_collector_data_by_app_and_asset_request: "QueryCollectorDataByAppAndAssetRequest",
    ) -> "QueryCollectorDataByAppAndAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_auction_mapping_for_app_and_asset(
        self,
        query_auction_mapping_for_app_and_asset_request: "QueryAuctionMappingForAppAndAssetRequest",
    ) -> "QueryAuctionMappingForAppAndAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_net_fee_collected_for_app_and_asset(
        self,
        query_net_fee_collected_for_app_and_asset_request: "QueryNetFeeCollectedForAppAndAssetRequest",
    ) -> "QueryNetFeeCollectedForAppAndAssetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_query_collector_lookup_by_app(
        self,
        stream: "grpclib.server.Stream[QueryCollectorLookupByAppRequest, QueryCollectorLookupByAppResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_collector_lookup_by_app(request)
        await stream.send_message(response)

    async def __rpc_query_collector_lookup_by_app_and_asset(
        self,
        stream: "grpclib.server.Stream[QueryCollectorLookupByAppAndAssetRequest, QueryCollectorLookupByAppAndAssetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_collector_lookup_by_app_and_asset(request)
        await stream.send_message(response)

    async def __rpc_query_collector_data_by_app_and_asset(
        self,
        stream: "grpclib.server.Stream[QueryCollectorDataByAppAndAssetRequest, QueryCollectorDataByAppAndAssetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_collector_data_by_app_and_asset(request)
        await stream.send_message(response)

    async def __rpc_query_auction_mapping_for_app_and_asset(
        self,
        stream: "grpclib.server.Stream[QueryAuctionMappingForAppAndAssetRequest, QueryAuctionMappingForAppAndAssetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_auction_mapping_for_app_and_asset(request)
        await stream.send_message(response)

    async def __rpc_query_net_fee_collected_for_app_and_asset(
        self,
        stream: "grpclib.server.Stream[QueryNetFeeCollectedForAppAndAssetRequest, QueryNetFeeCollectedForAppAndAssetResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_net_fee_collected_for_app_and_asset(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.collector.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/comdex.collector.v1beta1.Query/QueryCollectorLookupByApp": grpclib.const.Handler(
                self.__rpc_query_collector_lookup_by_app,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCollectorLookupByAppRequest,
                QueryCollectorLookupByAppResponse,
            ),
            "/comdex.collector.v1beta1.Query/QueryCollectorLookupByAppAndAsset": grpclib.const.Handler(
                self.__rpc_query_collector_lookup_by_app_and_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCollectorLookupByAppAndAssetRequest,
                QueryCollectorLookupByAppAndAssetResponse,
            ),
            "/comdex.collector.v1beta1.Query/QueryCollectorDataByAppAndAsset": grpclib.const.Handler(
                self.__rpc_query_collector_data_by_app_and_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCollectorDataByAppAndAssetRequest,
                QueryCollectorDataByAppAndAssetResponse,
            ),
            "/comdex.collector.v1beta1.Query/QueryAuctionMappingForAppAndAsset": grpclib.const.Handler(
                self.__rpc_query_auction_mapping_for_app_and_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAuctionMappingForAppAndAssetRequest,
                QueryAuctionMappingForAppAndAssetResponse,
            ),
            "/comdex.collector.v1beta1.Query/QueryNetFeeCollectedForAppAndAsset": grpclib.const.Handler(
                self.__rpc_query_net_fee_collected_for_app_and_asset,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryNetFeeCollectedForAppAndAssetRequest,
                QueryNetFeeCollectedForAppAndAssetResponse,
            ),
        }
