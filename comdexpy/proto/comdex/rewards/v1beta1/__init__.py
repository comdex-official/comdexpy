# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: comdex/rewards/v1beta1/epochs.proto, comdex/rewards/v1beta1/gauge.proto, comdex/rewards/v1beta1/genesis.proto, comdex/rewards/v1beta1/params.proto, comdex/rewards/v1beta1/query.proto, comdex/rewards/v1beta1/rewards.proto, comdex/rewards/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class LiquidtyGaugeMetaData(betterproto.Message):
    pool_id: int = betterproto.uint64_field(1)
    is_master_pool: bool = betterproto.bool_field(2)
    child_pool_ids: List[int] = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class Gauge(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    from_: str = betterproto.string_field(2)
    created_at: datetime = betterproto.message_field(3)
    start_time: datetime = betterproto.message_field(4)
    gauge_type_id: int = betterproto.uint64_field(5)
    trigger_duration: timedelta = betterproto.message_field(6)
    deposit_amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(7)
    total_triggers: int = betterproto.uint64_field(8)
    triggered_count: int = betterproto.uint64_field(9)
    distributed_amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(10)
    is_active: bool = betterproto.bool_field(11)
    for_swap_fee: bool = betterproto.bool_field(12)
    liquidity_meta_data: "LiquidtyGaugeMetaData" = betterproto.message_field(
        13, group="kind"
    )
    app_id: int = betterproto.uint64_field(14)


@dataclass(eq=False, repr=False)
class GaugeByTriggerDuration(betterproto.Message):
    trigger_duration: timedelta = betterproto.message_field(1)
    gauge_ids: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class MsgCreateGauge(betterproto.Message):
    from_: str = betterproto.string_field(1)
    gauge_type_id: int = betterproto.uint64_field(2)
    trigger_duration: timedelta = betterproto.message_field(3)
    deposit_amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    total_triggers: int = betterproto.uint64_field(5)
    start_time: datetime = betterproto.message_field(6)
    liquidity_meta_data: "LiquidtyGaugeMetaData" = betterproto.message_field(
        7, group="kind"
    )
    app_id: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class MsgCreateGaugeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WhitelistAsset(betterproto.Message):
    app_mapping_id: int = betterproto.uint64_field(1)
    from_: str = betterproto.string_field(2)
    asset_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class RemoveWhitelistAsset(betterproto.Message):
    app_mapping_id: int = betterproto.uint64_field(1)
    from_: str = betterproto.string_field(2)
    asset_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgWhitelistAssetResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRemoveWhitelistAssetResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WhitelistAppIdVault(betterproto.Message):
    app_mapping_id: int = betterproto.uint64_field(1)
    from_: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RemoveWhitelistAppIdVault(betterproto.Message):
    app_mapping_id: int = betterproto.uint64_field(1)
    from_: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgWhitelistAppIdVaultResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRemoveWhitelistAppIdVaultResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ActivateExternalRewardsLockers(betterproto.Message):
    app_mapping_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    duration_days: int = betterproto.int64_field(4)
    depositor: str = betterproto.string_field(5)
    min_lockup_time_seconds: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class ActivateExternalRewardsLockersResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ActivateExternalRewardsVault(betterproto.Message):
    app_mapping_id: int = betterproto.uint64_field(1)
    extended_pair_id: int = betterproto.uint64_field(2)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    duration_days: int = betterproto.int64_field(4)
    depositor: str = betterproto.string_field(5)
    min_lockup_time_seconds: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class ActivateExternalRewardsVaultResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ActivateExternalRewardsLend(betterproto.Message):
    app_mapping_id: int = betterproto.uint64_field(1)
    c_pool_id: int = betterproto.uint64_field(2)
    asset_id: List[int] = betterproto.uint64_field(3)
    c_swap_app_id: int = betterproto.uint64_field(4)
    c_swap_min_lock_amount: int = betterproto.uint64_field(5)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(6)
    master_pool_id: int = betterproto.int64_field(7)
    duration_days: int = betterproto.int64_field(8)
    min_lockup_time_seconds: int = betterproto.int64_field(9)
    depositor: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class ActivateExternalRewardsLendResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ActivateExternalRewardsStableMint(betterproto.Message):
    app_id: int = betterproto.uint64_field(1)
    cswap_app_id: int = betterproto.uint64_field(2)
    commodo_app_id: int = betterproto.uint64_field(3)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    duration_days: int = betterproto.int64_field(5)
    depositor: str = betterproto.string_field(6)
    accepted_block_height: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class ActivateExternalRewardsStableMintResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InternalRewards(betterproto.Message):
    app_mapping_id: int = betterproto.uint64_field(1)
    asset_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class LockerRewardsTracker(betterproto.Message):
    locker_id: int = betterproto.uint64_field(1)
    app_mapping_id: int = betterproto.uint64_field(2)
    rewards_accumulated: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class VaultInterestTracker(betterproto.Message):
    vault_id: int = betterproto.uint64_field(1)
    app_mapping_id: int = betterproto.uint64_field(2)
    interest_accumulated: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LockerExternalRewards(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    app_mapping_id: int = betterproto.uint64_field(2)
    asset_id: int = betterproto.uint64_field(3)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    duration_days: int = betterproto.int64_field(5)
    is_active: bool = betterproto.bool_field(6)
    available_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(7)
    depositor: str = betterproto.string_field(8)
    start_timestamp: datetime = betterproto.message_field(9)
    end_timestamp: datetime = betterproto.message_field(10)
    min_lockup_time_seconds: int = betterproto.int64_field(11)
    epoch_id: int = betterproto.uint64_field(12)


@dataclass(eq=False, repr=False)
class VaultExternalRewards(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    app_mapping_id: int = betterproto.uint64_field(2)
    extended_pair_id: int = betterproto.uint64_field(3)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    duration_days: int = betterproto.int64_field(5)
    is_active: bool = betterproto.bool_field(6)
    available_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(7)
    depositor: str = betterproto.string_field(8)
    start_timestamp: datetime = betterproto.message_field(9)
    end_timestamp: datetime = betterproto.message_field(10)
    min_lockup_time_seconds: int = betterproto.int64_field(11)
    epoch_id: int = betterproto.uint64_field(12)


@dataclass(eq=False, repr=False)
class EpochTime(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    app_mapping_id: int = betterproto.uint64_field(2)
    starting_time: int = betterproto.int64_field(3)
    count: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class LendExternalRewards(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    app_mapping_id: int = betterproto.uint64_field(2)
    rewards_asset_pool_data: "RewardsAssetPoolData" = betterproto.message_field(3)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    master_pool_id: int = betterproto.int64_field(5)
    duration_days: int = betterproto.int64_field(6)
    is_active: bool = betterproto.bool_field(7)
    available_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(8)
    depositor: str = betterproto.string_field(9)
    start_timestamp: datetime = betterproto.message_field(10)
    end_timestamp: datetime = betterproto.message_field(11)
    min_lockup_time_seconds: int = betterproto.int64_field(12)
    epoch_id: int = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class RewardsAssetPoolData(betterproto.Message):
    c_pool_id: int = betterproto.uint64_field(1)
    asset_id: List[int] = betterproto.uint64_field(2)
    c_swap_app_id: int = betterproto.uint64_field(3)
    c_swap_min_lock_amount: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class StableVaultExternalRewards(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    app_id: int = betterproto.uint64_field(2)
    cswap_app_id: int = betterproto.uint64_field(3)
    commodo_app_id: int = betterproto.uint64_field(4)
    total_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(5)
    duration_days: int = betterproto.int64_field(6)
    is_active: bool = betterproto.bool_field(7)
    available_rewards: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(8)
    depositor: str = betterproto.string_field(9)
    start_timestamp: datetime = betterproto.message_field(10)
    end_timestamp: datetime = betterproto.message_field(11)
    accepted_block_height: int = betterproto.int64_field(12)
    epoch_id: int = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class EpochInfo(betterproto.Message):
    start_time: datetime = betterproto.message_field(2)
    duration: timedelta = betterproto.message_field(3)
    current_epoch: int = betterproto.int64_field(4)
    current_epoch_start_time: datetime = betterproto.message_field(5)
    current_epoch_start_height: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """PARAMS"""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllEpochsInfoRequest(betterproto.Message):
    """ALL EPOCHES"""

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllEpochsInfoResponse(betterproto.Message):
    epochs: List["EpochInfo"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryEpochInfoByDurationRequest(betterproto.Message):
    """EPOCH BY DURATION"""

    duration_seconds: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryEpochInfoByDurationResponse(betterproto.Message):
    epoch: "EpochInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllGaugesRequest(betterproto.Message):
    """ALL GAUGES"""

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllGaugesResponse(betterproto.Message):
    gauges: List["Gauge"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryGaugeByIdRequest(betterproto.Message):
    """GAUGE BY ID"""

    gauge_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryGaugeByIdResponse(betterproto.Message):
    gauge: "Gauge" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGaugesByDurationRequest(betterproto.Message):
    """GAUGE BY TRIIGER DURATION"""

    duration_seconds: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryGaugeByDurationResponse(betterproto.Message):
    gauges: List["Gauge"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryRewardsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryRewardsResponse(betterproto.Message):
    rewards: List["InternalRewards"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryRewardRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryRewardResponse(betterproto.Message):
    reward: List["InternalRewards"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryExternalRewardsLockersRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryExternalRewardsLockersResponse(betterproto.Message):
    locker_external_rewards: List["LockerExternalRewards"] = betterproto.message_field(
        1
    )
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryExternalRewardVaultsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryExternalRewardVaultsResponse(betterproto.Message):
    vault_external_rewards: List["VaultExternalRewards"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryWhitelistedAppIdsVaultRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryWhitelistedAppIdsVaultResponse(betterproto.Message):
    whitelisted_app_ids_vault: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryExternalRewardLendsRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryExternalRewardLendsResponse(betterproto.Message):
    lend_external_rewards: List["LendExternalRewards"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryExternalRewardStableMintRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryExternalRewardStableMintResponse(betterproto.Message):
    stable_mint_external_rewards: List[
        "StableVaultExternalRewards"
    ] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryEpochTimeRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryEpochTimeResponse(betterproto.Message):
    epoch_time: List["EpochTime"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryExtLendRewardsAprRequest(betterproto.Message):
    asset_id: int = betterproto.uint64_field(1)
    c_pool_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryExtLendRewardsAprResponse(betterproto.Message):
    apr: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the rewards module's genesis state."""

    internal_rewards: List["InternalRewards"] = betterproto.message_field(1)
    locker_rewards_tracker: List["LockerRewardsTracker"] = betterproto.message_field(2)
    vault_interest_tracker: List["VaultInterestTracker"] = betterproto.message_field(3)
    locker_external_rewards: List["LockerExternalRewards"] = betterproto.message_field(
        4
    )
    vault_external_rewards: List["VaultExternalRewards"] = betterproto.message_field(5)
    app_i_ds: List[int] = betterproto.uint64_field(6)
    epoch_info: List["EpochInfo"] = betterproto.message_field(7)
    gauge: List["Gauge"] = betterproto.message_field(8)
    gauge_by_trigger_duration: List[
        "GaugeByTriggerDuration"
    ] = betterproto.message_field(9)
    params: "Params" = betterproto.message_field(10)
    lend_external_rewards: List["LendExternalRewards"] = betterproto.message_field(11)


class MsgStub(betterproto.ServiceStub):
    async def create_gauge(
        self,
        msg_create_gauge: "MsgCreateGauge",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateGaugeResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Msg/CreateGauge",
            msg_create_gauge,
            MsgCreateGaugeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def external_rewards_lockers(
        self,
        activate_external_rewards_lockers: "ActivateExternalRewardsLockers",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ActivateExternalRewardsLockersResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Msg/ExternalRewardsLockers",
            activate_external_rewards_lockers,
            ActivateExternalRewardsLockersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def external_rewards_vault(
        self,
        activate_external_rewards_vault: "ActivateExternalRewardsVault",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ActivateExternalRewardsVaultResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Msg/ExternalRewardsVault",
            activate_external_rewards_vault,
            ActivateExternalRewardsVaultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def external_rewards_lend(
        self,
        activate_external_rewards_lend: "ActivateExternalRewardsLend",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ActivateExternalRewardsLendResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Msg/ExternalRewardsLend",
            activate_external_rewards_lend,
            ActivateExternalRewardsLendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def external_rewards_stable_mint(
        self,
        activate_external_rewards_stable_mint: "ActivateExternalRewardsStableMint",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ActivateExternalRewardsStableMintResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Msg/ExternalRewardsStableMint",
            activate_external_rewards_stable_mint,
            ActivateExternalRewardsStableMintResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_epochs_info(
        self,
        query_all_epochs_info_request: "QueryAllEpochsInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllEpochsInfoResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryAllEpochsInfo",
            query_all_epochs_info_request,
            QueryAllEpochsInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_epoch_info_by_duration(
        self,
        query_epoch_info_by_duration_request: "QueryEpochInfoByDurationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryEpochInfoByDurationResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryEpochInfoByDuration",
            query_epoch_info_by_duration_request,
            QueryEpochInfoByDurationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_all_gauges(
        self,
        query_all_gauges_request: "QueryAllGaugesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllGaugesResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryAllGauges",
            query_all_gauges_request,
            QueryAllGaugesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_gauge_by_id(
        self,
        query_gauge_by_id_request: "QueryGaugeByIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGaugeByIdResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryGaugeByID",
            query_gauge_by_id_request,
            QueryGaugeByIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_gauge_by_duration(
        self,
        query_gauges_by_duration_request: "QueryGaugesByDurationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGaugeByDurationResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryGaugeByDuration",
            query_gauges_by_duration_request,
            QueryGaugeByDurationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_rewards(
        self,
        query_rewards_request: "QueryRewardsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRewardsResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryRewards",
            query_rewards_request,
            QueryRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_reward(
        self,
        query_reward_request: "QueryRewardRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRewardResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryReward",
            query_reward_request,
            QueryRewardResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_external_rewards_lockers(
        self,
        query_external_rewards_lockers_request: "QueryExternalRewardsLockersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExternalRewardsLockersResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryExternalRewardsLockers",
            query_external_rewards_lockers_request,
            QueryExternalRewardsLockersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_external_reward_vaults(
        self,
        query_external_reward_vaults_request: "QueryExternalRewardVaultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExternalRewardVaultsResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryExternalRewardVaults",
            query_external_reward_vaults_request,
            QueryExternalRewardVaultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_whitelisted_app_ids_vault(
        self,
        query_whitelisted_app_ids_vault_request: "QueryWhitelistedAppIdsVaultRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWhitelistedAppIdsVaultResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryWhitelistedAppIdsVault",
            query_whitelisted_app_ids_vault_request,
            QueryWhitelistedAppIdsVaultResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_external_reward_lends(
        self,
        query_external_reward_lends_request: "QueryExternalRewardLendsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExternalRewardLendsResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryExternalRewardLends",
            query_external_reward_lends_request,
            QueryExternalRewardLendsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_external_reward_stable_mint(
        self,
        query_external_reward_stable_mint_request: "QueryExternalRewardStableMintRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExternalRewardStableMintResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryExternalRewardStableMint",
            query_external_reward_stable_mint_request,
            QueryExternalRewardStableMintResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_epoch_time(
        self,
        query_epoch_time_request: "QueryEpochTimeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryEpochTimeResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryEpochTime",
            query_epoch_time_request,
            QueryEpochTimeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_ext_lend_rewards_apr(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryExtLendRewardsAprResponse":
        return await self._unary_unary(
            "/comdex.rewards.v1beta1.Query/QueryExtLendRewardsAPR",
            query_ext_lend_rewards_apr_request,
            QueryExtLendRewardsAprResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def create_gauge(
        self, msg_create_gauge: "MsgCreateGauge"
    ) -> "MsgCreateGaugeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def external_rewards_lockers(
        self, activate_external_rewards_lockers: "ActivateExternalRewardsLockers"
    ) -> "ActivateExternalRewardsLockersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def external_rewards_vault(
        self, activate_external_rewards_vault: "ActivateExternalRewardsVault"
    ) -> "ActivateExternalRewardsVaultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def external_rewards_lend(
        self, activate_external_rewards_lend: "ActivateExternalRewardsLend"
    ) -> "ActivateExternalRewardsLendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def external_rewards_stable_mint(
        self, activate_external_rewards_stable_mint: "ActivateExternalRewardsStableMint"
    ) -> "ActivateExternalRewardsStableMintResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_gauge(
        self, stream: "grpclib.server.Stream[MsgCreateGauge, MsgCreateGaugeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_gauge(request)
        await stream.send_message(response)

    async def __rpc_external_rewards_lockers(
        self,
        stream: "grpclib.server.Stream[ActivateExternalRewardsLockers, ActivateExternalRewardsLockersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.external_rewards_lockers(request)
        await stream.send_message(response)

    async def __rpc_external_rewards_vault(
        self,
        stream: "grpclib.server.Stream[ActivateExternalRewardsVault, ActivateExternalRewardsVaultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.external_rewards_vault(request)
        await stream.send_message(response)

    async def __rpc_external_rewards_lend(
        self,
        stream: "grpclib.server.Stream[ActivateExternalRewardsLend, ActivateExternalRewardsLendResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.external_rewards_lend(request)
        await stream.send_message(response)

    async def __rpc_external_rewards_stable_mint(
        self,
        stream: "grpclib.server.Stream[ActivateExternalRewardsStableMint, ActivateExternalRewardsStableMintResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.external_rewards_stable_mint(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.rewards.v1beta1.Msg/CreateGauge": grpclib.const.Handler(
                self.__rpc_create_gauge,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateGauge,
                MsgCreateGaugeResponse,
            ),
            "/comdex.rewards.v1beta1.Msg/ExternalRewardsLockers": grpclib.const.Handler(
                self.__rpc_external_rewards_lockers,
                grpclib.const.Cardinality.UNARY_UNARY,
                ActivateExternalRewardsLockers,
                ActivateExternalRewardsLockersResponse,
            ),
            "/comdex.rewards.v1beta1.Msg/ExternalRewardsVault": grpclib.const.Handler(
                self.__rpc_external_rewards_vault,
                grpclib.const.Cardinality.UNARY_UNARY,
                ActivateExternalRewardsVault,
                ActivateExternalRewardsVaultResponse,
            ),
            "/comdex.rewards.v1beta1.Msg/ExternalRewardsLend": grpclib.const.Handler(
                self.__rpc_external_rewards_lend,
                grpclib.const.Cardinality.UNARY_UNARY,
                ActivateExternalRewardsLend,
                ActivateExternalRewardsLendResponse,
            ),
            "/comdex.rewards.v1beta1.Msg/ExternalRewardsStableMint": grpclib.const.Handler(
                self.__rpc_external_rewards_stable_mint,
                grpclib.const.Cardinality.UNARY_UNARY,
                ActivateExternalRewardsStableMint,
                ActivateExternalRewardsStableMintResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_epochs_info(
        self, query_all_epochs_info_request: "QueryAllEpochsInfoRequest"
    ) -> "QueryAllEpochsInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_epoch_info_by_duration(
        self, query_epoch_info_by_duration_request: "QueryEpochInfoByDurationRequest"
    ) -> "QueryEpochInfoByDurationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_all_gauges(
        self, query_all_gauges_request: "QueryAllGaugesRequest"
    ) -> "QueryAllGaugesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_gauge_by_id(
        self, query_gauge_by_id_request: "QueryGaugeByIdRequest"
    ) -> "QueryGaugeByIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_gauge_by_duration(
        self, query_gauges_by_duration_request: "QueryGaugesByDurationRequest"
    ) -> "QueryGaugeByDurationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_rewards(
        self, query_rewards_request: "QueryRewardsRequest"
    ) -> "QueryRewardsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_reward(
        self, query_reward_request: "QueryRewardRequest"
    ) -> "QueryRewardResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_external_rewards_lockers(
        self,
        query_external_rewards_lockers_request: "QueryExternalRewardsLockersRequest",
    ) -> "QueryExternalRewardsLockersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_external_reward_vaults(
        self, query_external_reward_vaults_request: "QueryExternalRewardVaultsRequest"
    ) -> "QueryExternalRewardVaultsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_whitelisted_app_ids_vault(
        self,
        query_whitelisted_app_ids_vault_request: "QueryWhitelistedAppIdsVaultRequest",
    ) -> "QueryWhitelistedAppIdsVaultResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_external_reward_lends(
        self, query_external_reward_lends_request: "QueryExternalRewardLendsRequest"
    ) -> "QueryExternalRewardLendsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_external_reward_stable_mint(
        self,
        query_external_reward_stable_mint_request: "QueryExternalRewardStableMintRequest",
    ) -> "QueryExternalRewardStableMintResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_epoch_time(
        self, query_epoch_time_request: "QueryEpochTimeRequest"
    ) -> "QueryEpochTimeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_ext_lend_rewards_apr(self) -> "QueryExtLendRewardsAprResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_query_all_epochs_info(
        self,
        stream: "grpclib.server.Stream[QueryAllEpochsInfoRequest, QueryAllEpochsInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_epochs_info(request)
        await stream.send_message(response)

    async def __rpc_query_epoch_info_by_duration(
        self,
        stream: "grpclib.server.Stream[QueryEpochInfoByDurationRequest, QueryEpochInfoByDurationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_epoch_info_by_duration(request)
        await stream.send_message(response)

    async def __rpc_query_all_gauges(
        self,
        stream: "grpclib.server.Stream[QueryAllGaugesRequest, QueryAllGaugesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_all_gauges(request)
        await stream.send_message(response)

    async def __rpc_query_gauge_by_id(
        self,
        stream: "grpclib.server.Stream[QueryGaugeByIdRequest, QueryGaugeByIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_gauge_by_id(request)
        await stream.send_message(response)

    async def __rpc_query_gauge_by_duration(
        self,
        stream: "grpclib.server.Stream[QueryGaugesByDurationRequest, QueryGaugeByDurationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_gauge_by_duration(request)
        await stream.send_message(response)

    async def __rpc_query_rewards(
        self, stream: "grpclib.server.Stream[QueryRewardsRequest, QueryRewardsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_rewards(request)
        await stream.send_message(response)

    async def __rpc_query_reward(
        self, stream: "grpclib.server.Stream[QueryRewardRequest, QueryRewardResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_reward(request)
        await stream.send_message(response)

    async def __rpc_query_external_rewards_lockers(
        self,
        stream: "grpclib.server.Stream[QueryExternalRewardsLockersRequest, QueryExternalRewardsLockersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_external_rewards_lockers(request)
        await stream.send_message(response)

    async def __rpc_query_external_reward_vaults(
        self,
        stream: "grpclib.server.Stream[QueryExternalRewardVaultsRequest, QueryExternalRewardVaultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_external_reward_vaults(request)
        await stream.send_message(response)

    async def __rpc_query_whitelisted_app_ids_vault(
        self,
        stream: "grpclib.server.Stream[QueryWhitelistedAppIdsVaultRequest, QueryWhitelistedAppIdsVaultResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_whitelisted_app_ids_vault(request)
        await stream.send_message(response)

    async def __rpc_query_external_reward_lends(
        self,
        stream: "grpclib.server.Stream[QueryExternalRewardLendsRequest, QueryExternalRewardLendsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_external_reward_lends(request)
        await stream.send_message(response)

    async def __rpc_query_external_reward_stable_mint(
        self,
        stream: "grpclib.server.Stream[QueryExternalRewardStableMintRequest, QueryExternalRewardStableMintResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_external_reward_stable_mint(request)
        await stream.send_message(response)

    async def __rpc_query_epoch_time(
        self,
        stream: "grpclib.server.Stream[QueryEpochTimeRequest, QueryEpochTimeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_epoch_time(request)
        await stream.send_message(response)

    async def __rpc_query_ext_lend_rewards_apr(
        self,
        stream: "grpclib.server.Stream[QueryExtLendRewardsAprRequest, QueryExtLendRewardsAprResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_ext_lend_rewards_apr(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/comdex.rewards.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryAllEpochsInfo": grpclib.const.Handler(
                self.__rpc_query_all_epochs_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllEpochsInfoRequest,
                QueryAllEpochsInfoResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryEpochInfoByDuration": grpclib.const.Handler(
                self.__rpc_query_epoch_info_by_duration,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryEpochInfoByDurationRequest,
                QueryEpochInfoByDurationResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryAllGauges": grpclib.const.Handler(
                self.__rpc_query_all_gauges,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllGaugesRequest,
                QueryAllGaugesResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryGaugeByID": grpclib.const.Handler(
                self.__rpc_query_gauge_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGaugeByIdRequest,
                QueryGaugeByIdResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryGaugeByDuration": grpclib.const.Handler(
                self.__rpc_query_gauge_by_duration,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGaugesByDurationRequest,
                QueryGaugeByDurationResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryRewards": grpclib.const.Handler(
                self.__rpc_query_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRewardsRequest,
                QueryRewardsResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryReward": grpclib.const.Handler(
                self.__rpc_query_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRewardRequest,
                QueryRewardResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryExternalRewardsLockers": grpclib.const.Handler(
                self.__rpc_query_external_rewards_lockers,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExternalRewardsLockersRequest,
                QueryExternalRewardsLockersResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryExternalRewardVaults": grpclib.const.Handler(
                self.__rpc_query_external_reward_vaults,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExternalRewardVaultsRequest,
                QueryExternalRewardVaultsResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryWhitelistedAppIdsVault": grpclib.const.Handler(
                self.__rpc_query_whitelisted_app_ids_vault,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWhitelistedAppIdsVaultRequest,
                QueryWhitelistedAppIdsVaultResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryExternalRewardLends": grpclib.const.Handler(
                self.__rpc_query_external_reward_lends,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExternalRewardLendsRequest,
                QueryExternalRewardLendsResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryExternalRewardStableMint": grpclib.const.Handler(
                self.__rpc_query_external_reward_stable_mint,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExternalRewardStableMintRequest,
                QueryExternalRewardStableMintResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryEpochTime": grpclib.const.Handler(
                self.__rpc_query_epoch_time,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryEpochTimeRequest,
                QueryEpochTimeResponse,
            ),
            "/comdex.rewards.v1beta1.Query/QueryExtLendRewardsAPR": grpclib.const.Handler(
                self.__rpc_query_ext_lend_rewards_apr,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryExtLendRewardsAprRequest,
                QueryExtLendRewardsAprResponse,
            ),
        }
